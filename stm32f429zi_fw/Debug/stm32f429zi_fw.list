
stm32f429zi_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bb4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000324  08006d64  08006d64  00016d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007088  08007088  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08007088  08007088  00017088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007090  08007090  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007090  08007090  00017090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007094  08007094  00017094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08007098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020100  2**0
                  CONTENTS
 10 .bss          000005f0  20000100  20000100  00020100  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006f0  200006f0  00020100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013b87  00000000  00000000  00020173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000035aa  00000000  00000000  00033cfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001220  00000000  00000000  000372a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000df0  00000000  00000000  000384c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027e8c  00000000  00000000  000392b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019f6b  00000000  00000000  00061144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e92f6  00000000  00000000  0007b0af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004ffc  00000000  00000000  001643a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  001693a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000100 	.word	0x20000100
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006d4c 	.word	0x08006d4c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000104 	.word	0x20000104
 80001ec:	08006d4c 	.word	0x08006d4c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <apInit>:




void apInit(void) 
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  cliInit();
 80005b0:	f000 fa60 	bl	8000a74 <cliInit>
	ledInit();
 80005b4:	f000 fe24 	bl	8001200 <ledInit>
	pwmInit();
 80005b8:	f000 feae 	bl	8001318 <pwmInit>
	adcInit();
 80005bc:	f000 f9a2 	bl	8000904 <adcInit>
	buttonInit();
 80005c0:	f000 fa24 	bl	8000a0c <buttonInit>
  btnGpioInit();
 80005c4:	f000 f9dd 	bl	8000982 <btnGpioInit>
	uartInit();
 80005c8:	f000 ff12 	bl	80013f0 <uartInit>
  gpioInit();
 80005cc:	f000 fbda 	bl	8000d84 <gpioInit>
  //flashInit();//추후
  spiInit();
 80005d0:	f000 fee2 	bl	8001398 <spiInit>

	cliAdd("info", infoCli);
 80005d4:	490c      	ldr	r1, [pc, #48]	; (8000608 <apInit+0x5c>)
 80005d6:	480d      	ldr	r0, [pc, #52]	; (800060c <apInit+0x60>)
 80005d8:	f000 faa8 	bl	8000b2c <cliAdd>
  // spiDmaTxTransfer(_DEF_SPI0,tx,2,100);
	  // cliPrintf("st7735Init() : %d",st7735Init());
  // gpioPinWrite(1, _DEF_HIGH);

//	 CLCD_GPIO_Init(); // LCD GPIO 초기화
	 CLCD_Init(); // Char LCD 내부 초기화
 80005dc:	f001 f9f1 	bl	80019c2 <CLCD_Init>
	 CLCD_Puts(0, 0, "Welcome to");
 80005e0:	4a0b      	ldr	r2, [pc, #44]	; (8000610 <apInit+0x64>)
 80005e2:	2100      	movs	r1, #0
 80005e4:	2000      	movs	r0, #0
 80005e6:	f001 f9c7 	bl	8001978 <CLCD_Puts>
	 CLCD_Puts(0, 1, "CLCD World");
 80005ea:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <apInit+0x68>)
 80005ec:	2101      	movs	r1, #1
 80005ee:	2000      	movs	r0, #0
 80005f0:	f001 f9c2 	bl	8001978 <CLCD_Puts>
	 CLCD_Puts(6, 1, "Booting...");
 80005f4:	4a08      	ldr	r2, [pc, #32]	; (8000618 <apInit+0x6c>)
 80005f6:	2101      	movs	r1, #1
 80005f8:	2006      	movs	r0, #6
 80005fa:	f001 f9bd 	bl	8001978 <CLCD_Puts>
	 CLCD_Clear();
 80005fe:	f001 fa02 	bl	8001a06 <CLCD_Clear>
//                    D5_GPIO_Port, D5_Pin,
//                    D6_GPIO_Port, D6_Pin,
//                    D7_GPIO_Port, D7_Pin);
		

}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	08000775 	.word	0x08000775
 800060c:	08006d64 	.word	0x08006d64
 8000610:	08006d6c 	.word	0x08006d6c
 8000614:	08006d78 	.word	0x08006d78
 8000618:	08006d84 	.word	0x08006d84

0800061c <apMain>:

void apMain(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0
	uint32_t pre_time;
	 uint8_t a = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	76fb      	strb	r3, [r7, #27]
	 uint8_t str[20];

  ledDuty(_DEF_LED_CH0,5); //5%
 8000626:	2105      	movs	r1, #5
 8000628:	2000      	movs	r0, #0
 800062a:	f000 fe5b 	bl	80012e4 <ledDuty>

	uint16_t pwm_value = pwmRead(_DEF_PWM_CH0);
 800062e:	2000      	movs	r0, #0
 8000630:	f000 fe9a 	bl	8001368 <pwmRead>
 8000634:	4603      	mov	r3, r0
 8000636:	833b      	strh	r3, [r7, #24]
  while(1)
  {
		 HAL_Delay(100);
 8000638:	2064      	movs	r0, #100	; 0x64
 800063a:	f002 f81d 	bl	8002678 <HAL_Delay>
		 CLCD_Clear();
 800063e:	f001 f9e2 	bl	8001a06 <CLCD_Clear>
		 CLCD_Puts(0,0,"Hi! GoldenBoy");
 8000642:	4a45      	ldr	r2, [pc, #276]	; (8000758 <apMain+0x13c>)
 8000644:	2100      	movs	r1, #0
 8000646:	2000      	movs	r0, #0
 8000648:	f001 f996 	bl	8001978 <CLCD_Puts>
		 sprintf(str, "%d", a++);
 800064c:	7efb      	ldrb	r3, [r7, #27]
 800064e:	1c5a      	adds	r2, r3, #1
 8000650:	76fa      	strb	r2, [r7, #27]
 8000652:	461a      	mov	r2, r3
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	4941      	ldr	r1, [pc, #260]	; (800075c <apMain+0x140>)
 8000658:	4618      	mov	r0, r3
 800065a:	f005 fe5b 	bl	8006314 <siprintf>
		 CLCD_Puts(0, 1, str);
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	461a      	mov	r2, r3
 8000662:	2101      	movs	r1, #1
 8000664:	2000      	movs	r0, #0
 8000666:	f001 f987 	bl	8001978 <CLCD_Puts>
    
    /* 16x2 LCD Test Begin */
//		LCD1602_print("HELLO World!!!");


  if(btnGpioGetPressed(_DEF_BTN_GPIO_CH0)){
 800066a:	2000      	movs	r0, #0
 800066c:	f000 f996 	bl	800099c <btnGpioGetPressed>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d006      	beq.n	8000684 <apMain+0x68>
    ledOn(_DEF_LED_CH0);
 8000676:	2000      	movs	r0, #0
 8000678:	f000 fdf4 	bl	8001264 <ledOn>
    ledOn(_DEF_LED_CH1);
 800067c:	2001      	movs	r0, #1
 800067e:	f000 fdf1 	bl	8001264 <ledOn>
 8000682:	e005      	b.n	8000690 <apMain+0x74>
  }else{
    ledOff(_DEF_LED_CH0);
 8000684:	2000      	movs	r0, #0
 8000686:	f000 fe0d 	bl	80012a4 <ledOff>
    ledOff(_DEF_LED_CH1);
 800068a:	2001      	movs	r0, #1
 800068c:	f000 fe0a 	bl	80012a4 <ledOff>
  }

    // cliPrintf("Pressed? %d\r\n",btnGpioGetPressed(_DEF_BTN_GPIO_CH0));
    pwmWrite(_DEF_PWM_CH0,pwm_value);
 8000690:	8b3b      	ldrh	r3, [r7, #24]
 8000692:	4619      	mov	r1, r3
 8000694:	2000      	movs	r0, #0
 8000696:	f000 fe4f 	bl	8001338 <pwmWrite>
    if(millis() - pre_time >= 350)
 800069a:	f000 ffc2 	bl	8001622 <millis>
 800069e:	4602      	mov	r2, r0
 80006a0:	69fb      	ldr	r3, [r7, #28]
 80006a2:	1ad3      	subs	r3, r2, r3
 80006a4:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80006a8:	d302      	bcc.n	80006b0 <apMain+0x94>
    {
      pre_time = millis();
 80006aa:	f000 ffba 	bl	8001622 <millis>
 80006ae:	61f8      	str	r0, [r7, #28]
      // ledOn(_DEF_LED_CH0);
      // ledToggle(_DEF_LED_CH0);
      //uartWrite(_DEF_UART_CH3,(uint8_t *)"test\n",5);
//      uartPrintf(_DEF_UART_CH3,"test %d\r\n",millis());
    }
    adc_vol = (float)adcRead(_DEF_ADC_CH0)/100.f;
 80006b0:	2000      	movs	r0, #0
 80006b2:	f000 f935 	bl	8000920 <adcRead>
 80006b6:	4603      	mov	r3, r0
 80006b8:	ee07 3a90 	vmov	s15, r3
 80006bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006c0:	eddf 6a27 	vldr	s13, [pc, #156]	; 8000760 <apMain+0x144>
 80006c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006c8:	4b26      	ldr	r3, [pc, #152]	; (8000764 <apMain+0x148>)
 80006ca:	edc3 7a00 	vstr	s15, [r3]
    adc_vol_temperature =(float)adcRead(_DEF_ADC_CH1)/100.f;
 80006ce:	2001      	movs	r0, #1
 80006d0:	f000 f926 	bl	8000920 <adcRead>
 80006d4:	4603      	mov	r3, r0
 80006d6:	ee07 3a90 	vmov	s15, r3
 80006da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006de:	eddf 6a20 	vldr	s13, [pc, #128]	; 8000760 <apMain+0x144>
 80006e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006e6:	4b20      	ldr	r3, [pc, #128]	; (8000768 <apMain+0x14c>)
 80006e8:	edc3 7a00 	vstr	s15, [r3]
    adc_vol_vref = (float)adcRead(_DEF_ADC_CH2)/100.f;
 80006ec:	2002      	movs	r0, #2
 80006ee:	f000 f917 	bl	8000920 <adcRead>
 80006f2:	4603      	mov	r3, r0
 80006f4:	ee07 3a90 	vmov	s15, r3
 80006f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006fc:	eddf 6a18 	vldr	s13, [pc, #96]	; 8000760 <apMain+0x144>
 8000700:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000704:	4b19      	ldr	r3, [pc, #100]	; (800076c <apMain+0x150>)
 8000706:	edc3 7a00 	vstr	s15, [r3]
    {
      button_data[i] = buttonGetPressed(i);
    }
#elif 1
    /*이제 가독성이 편해졌다.*/
    button_data[_BUTTON_CH_SEL]   = buttonGetPressed(_BUTTON_CH_SEL);
 800070a:	2000      	movs	r0, #0
 800070c:	f000 f986 	bl	8000a1c <buttonGetPressed>
 8000710:	4603      	mov	r3, r0
 8000712:	461a      	mov	r2, r3
 8000714:	4b16      	ldr	r3, [pc, #88]	; (8000770 <apMain+0x154>)
 8000716:	701a      	strb	r2, [r3, #0]
    button_data[_BUTTON_CH_LEFT]  = buttonGetPressed(_BUTTON_CH_LEFT);
 8000718:	2001      	movs	r0, #1
 800071a:	f000 f97f 	bl	8000a1c <buttonGetPressed>
 800071e:	4603      	mov	r3, r0
 8000720:	461a      	mov	r2, r3
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <apMain+0x154>)
 8000724:	705a      	strb	r2, [r3, #1]
    button_data[_BUTTON_CH_DOWN]  = buttonGetPressed(_BUTTON_CH_DOWN);
 8000726:	2002      	movs	r0, #2
 8000728:	f000 f978 	bl	8000a1c <buttonGetPressed>
 800072c:	4603      	mov	r3, r0
 800072e:	461a      	mov	r2, r3
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <apMain+0x154>)
 8000732:	709a      	strb	r2, [r3, #2]
    button_data[_BUTTON_CH_UP]    = buttonGetPressed(_BUTTON_CH_UP);
 8000734:	2003      	movs	r0, #3
 8000736:	f000 f971 	bl	8000a1c <buttonGetPressed>
 800073a:	4603      	mov	r3, r0
 800073c:	461a      	mov	r2, r3
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <apMain+0x154>)
 8000740:	70da      	strb	r2, [r3, #3]
    button_data[_BUTTON_CH_RIGHT] = buttonGetPressed(_BUTTON_CH_RIGHT);
 8000742:	2004      	movs	r0, #4
 8000744:	f000 f96a 	bl	8000a1c <buttonGetPressed>
 8000748:	4603      	mov	r3, r0
 800074a:	461a      	mov	r2, r3
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <apMain+0x154>)
 800074e:	711a      	strb	r2, [r3, #4]

    cliMain();
 8000750:	f000 fa66 	bl	8000c20 <cliMain>
		 HAL_Delay(100);
 8000754:	e770      	b.n	8000638 <apMain+0x1c>
 8000756:	bf00      	nop
 8000758:	08006d90 	.word	0x08006d90
 800075c:	08006da0 	.word	0x08006da0
 8000760:	42c80000 	.word	0x42c80000
 8000764:	2000011c 	.word	0x2000011c
 8000768:	20000120 	.word	0x20000120
 800076c:	20000124 	.word	0x20000124
 8000770:	20000128 	.word	0x20000128

08000774 <infoCli>:
  }
}


void infoCli(uint8_t argc, const char **argv)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b088      	sub	sp, #32
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	6039      	str	r1, [r7, #0]
 800077e:	71fb      	strb	r3, [r7, #7]
//  uartPrintf(_DEF_UART_CH3, "infoCli run %d\r\n",argc);
  //cli전용printf만들어야 내부적으로 사용되는 채널로 보냄,
  //uartPrintf의 가변 인자 처리를 위해서 uartVPrintf()함수 씀
  //uartVPrintf함수 사용해서 cliPrintf()구현

  bool ret = false;
 8000780:	2300      	movs	r3, #0
 8000782:	77fb      	strb	r3, [r7, #31]
  
  /*clin# info test하면*/
  if(argc ==1 && cliIsStr(argv[0], "test"))
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	2b01      	cmp	r3, #1
 8000788:	d10d      	bne.n	80007a6 <infoCli+0x32>
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4951      	ldr	r1, [pc, #324]	; (80008d4 <infoCli+0x160>)
 8000790:	4618      	mov	r0, r3
 8000792:	f000 fa13 	bl	8000bbc <cliIsStr>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d004      	beq.n	80007a6 <infoCli+0x32>
  {//인자가 1개이고, info 첫번째 인자가 test이면
  
    cliPrintf("infoCli run test\r\n");
 800079c:	484e      	ldr	r0, [pc, #312]	; (80008d8 <infoCli+0x164>)
 800079e:	f000 f9f9 	bl	8000b94 <cliPrintf>
    //이명령어 쓸수 있다고 말함.
    ret = true;
 80007a2:	2301      	movs	r3, #1
 80007a4:	77fb      	strb	r3, [r7, #31]
  }

  /*clin# info print 5하면*/
  if(argc ==2 &&cliIsStr(argv[0], "print"))
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	2b02      	cmp	r3, #2
 80007aa:	d123      	bne.n	80007f4 <infoCli+0x80>
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	494a      	ldr	r1, [pc, #296]	; (80008dc <infoCli+0x168>)
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 fa02 	bl	8000bbc <cliIsStr>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d01a      	beq.n	80007f4 <infoCli+0x80>
  {
    uint8_t count;

    count = (uint8_t)cliGetData(argv[1]);
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	3304      	adds	r3, #4
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 fa0c 	bl	8000be2 <cliGetData>
 80007ca:	4603      	mov	r3, r0
 80007cc:	73fb      	strb	r3, [r7, #15]
    for(int i=0;i<count;i++)
 80007ce:	2300      	movs	r3, #0
 80007d0:	61bb      	str	r3, [r7, #24]
 80007d2:	e009      	b.n	80007e8 <infoCli+0x74>
    {
      cliPrintf("print %d/%d\r\n", i+1, count);
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	3301      	adds	r3, #1
 80007d8:	7bfa      	ldrb	r2, [r7, #15]
 80007da:	4619      	mov	r1, r3
 80007dc:	4840      	ldr	r0, [pc, #256]	; (80008e0 <infoCli+0x16c>)
 80007de:	f000 f9d9 	bl	8000b94 <cliPrintf>
    for(int i=0;i<count;i++)
 80007e2:	69bb      	ldr	r3, [r7, #24]
 80007e4:	3301      	adds	r3, #1
 80007e6:	61bb      	str	r3, [r7, #24]
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	69ba      	ldr	r2, [r7, #24]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	dbf1      	blt.n	80007d4 <infoCli+0x60>
    }
    ret = true;
 80007f0:	2301      	movs	r3, #1
 80007f2:	77fb      	strb	r3, [r7, #31]
  }

   /*명령어 info button하면, 현재 눌린 버튼 정보가 뜸*/
  if(argc ==1 && cliIsStr(argv[0], "button"))
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d129      	bne.n	800084e <infoCli+0xda>
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4939      	ldr	r1, [pc, #228]	; (80008e4 <infoCli+0x170>)
 8000800:	4618      	mov	r0, r3
 8000802:	f000 f9db 	bl	8000bbc <cliIsStr>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d020      	beq.n	800084e <infoCli+0xda>
  {
    while(cliKeepLoop())
 800080c:	e018      	b.n	8000840 <infoCli+0xcc>
    {
      for(int i =0; i<BUTTON_MAX_CH; i++)
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
 8000812:	e00c      	b.n	800082e <infoCli+0xba>
      {
        cliPrintf("%d", buttonGetPressed(i));
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	b2db      	uxtb	r3, r3
 8000818:	4618      	mov	r0, r3
 800081a:	f000 f8ff 	bl	8000a1c <buttonGetPressed>
 800081e:	4603      	mov	r3, r0
 8000820:	4619      	mov	r1, r3
 8000822:	4831      	ldr	r0, [pc, #196]	; (80008e8 <infoCli+0x174>)
 8000824:	f000 f9b6 	bl	8000b94 <cliPrintf>
      for(int i =0; i<BUTTON_MAX_CH; i++)
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	3301      	adds	r3, #1
 800082c:	617b      	str	r3, [r7, #20]
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	2b04      	cmp	r3, #4
 8000832:	ddef      	ble.n	8000814 <infoCli+0xa0>
        //5개 반복
      }
      cliPrintf("\r\n");
 8000834:	482d      	ldr	r0, [pc, #180]	; (80008ec <infoCli+0x178>)
 8000836:	f000 f9ad 	bl	8000b94 <cliPrintf>
      delay(100);
 800083a:	2064      	movs	r0, #100	; 0x64
 800083c:	f000 fee6 	bl	800160c <delay>
    while(cliKeepLoop())
 8000840:	f000 f9df 	bl	8000c02 <cliKeepLoop>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d1e1      	bne.n	800080e <infoCli+0x9a>
    }
    ret = true;
 800084a:	2301      	movs	r3, #1
 800084c:	77fb      	strb	r3, [r7, #31]
  }

  /*cli# info btn_gpio*/
  if(argc==1 &&cliIsStr(argv[0],"btn_gpio"))
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	2b01      	cmp	r3, #1
 8000852:	d129      	bne.n	80008a8 <infoCli+0x134>
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4925      	ldr	r1, [pc, #148]	; (80008f0 <infoCli+0x17c>)
 800085a:	4618      	mov	r0, r3
 800085c:	f000 f9ae 	bl	8000bbc <cliIsStr>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d020      	beq.n	80008a8 <infoCli+0x134>
  {
    while(cliKeepLoop())
 8000866:	e018      	b.n	800089a <infoCli+0x126>
    {
      for(int i =0 ;i < BTN_GPIO_MAX_CH;i++)
 8000868:	2300      	movs	r3, #0
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	e00c      	b.n	8000888 <infoCli+0x114>
      {
        cliPrintf("%d",btnGpioGetPressed(i));
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	4618      	mov	r0, r3
 8000874:	f000 f892 	bl	800099c <btnGpioGetPressed>
 8000878:	4603      	mov	r3, r0
 800087a:	4619      	mov	r1, r3
 800087c:	481a      	ldr	r0, [pc, #104]	; (80008e8 <infoCli+0x174>)
 800087e:	f000 f989 	bl	8000b94 <cliPrintf>
      for(int i =0 ;i < BTN_GPIO_MAX_CH;i++)
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	3301      	adds	r3, #1
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	2b00      	cmp	r3, #0
 800088c:	ddef      	ble.n	800086e <infoCli+0xfa>
      }
      cliPrintf("\r\n");
 800088e:	4817      	ldr	r0, [pc, #92]	; (80008ec <infoCli+0x178>)
 8000890:	f000 f980 	bl	8000b94 <cliPrintf>
      delay(100);
 8000894:	2064      	movs	r0, #100	; 0x64
 8000896:	f000 feb9 	bl	800160c <delay>
    while(cliKeepLoop())
 800089a:	f000 f9b2 	bl	8000c02 <cliKeepLoop>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d1e1      	bne.n	8000868 <infoCli+0xf4>
    }
    ret = true;
 80008a4:	2301      	movs	r3, #1
 80008a6:	77fb      	strb	r3, [r7, #31]
  }

  /*cli# info*/
  if(ret == false)
 80008a8:	7ffb      	ldrb	r3, [r7, #31]
 80008aa:	f083 0301 	eor.w	r3, r3, #1
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d00b      	beq.n	80008cc <infoCli+0x158>
  {
    cliPrintf("info test\r\n");
 80008b4:	480f      	ldr	r0, [pc, #60]	; (80008f4 <infoCli+0x180>)
 80008b6:	f000 f96d 	bl	8000b94 <cliPrintf>
    cliPrintf("info print 0~10\r\n");
 80008ba:	480f      	ldr	r0, [pc, #60]	; (80008f8 <infoCli+0x184>)
 80008bc:	f000 f96a 	bl	8000b94 <cliPrintf>
    cliPrintf("info button\r\n");
 80008c0:	480e      	ldr	r0, [pc, #56]	; (80008fc <infoCli+0x188>)
 80008c2:	f000 f967 	bl	8000b94 <cliPrintf>
    cliPrintf("info btn_gpio\r\n");
 80008c6:	480e      	ldr	r0, [pc, #56]	; (8000900 <infoCli+0x18c>)
 80008c8:	f000 f964 	bl	8000b94 <cliPrintf>
  }


}
 80008cc:	bf00      	nop
 80008ce:	3720      	adds	r7, #32
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	08006da4 	.word	0x08006da4
 80008d8:	08006dac 	.word	0x08006dac
 80008dc:	08006dc0 	.word	0x08006dc0
 80008e0:	08006dc8 	.word	0x08006dc8
 80008e4:	08006dd8 	.word	0x08006dd8
 80008e8:	08006da0 	.word	0x08006da0
 80008ec:	08006de0 	.word	0x08006de0
 80008f0:	08006de4 	.word	0x08006de4
 80008f4:	08006df0 	.word	0x08006df0
 80008f8:	08006dfc 	.word	0x08006dfc
 80008fc:	08006e10 	.word	0x08006e10
 8000900:	08006e20 	.word	0x08006e20

08000904 <adcInit>:
extern ADC_HandleTypeDef hadc1;
uint16_t adc_data[3]; //3개채널씀
//uint32_t adc_time;

bool adcInit(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
//  HAL_ADCEx_Calibration_Start(&hadc1);
  //강의에서는 있지만 나는 없다.
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_data, 3 );
 8000908:	2203      	movs	r2, #3
 800090a:	4903      	ldr	r1, [pc, #12]	; (8000918 <adcInit+0x14>)
 800090c:	4803      	ldr	r0, [pc, #12]	; (800091c <adcInit+0x18>)
 800090e:	f001 ff1b 	bl	8002748 <HAL_ADC_Start_DMA>
  //위 함수는 stm32f4xx_hal_adc.c에서 옴
  //adc_data는 16 bit로 선언했지만, 함수는 32bit쓰므로 형변환해야 애러안남
  //데이터 갯수가 3이므로 3넣음.

  return true;
 8000912:	2301      	movs	r3, #1
}
 8000914:	4618      	mov	r0, r3
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000130 	.word	0x20000130
 800091c:	20000354 	.word	0x20000354

08000920 <adcRead>:

uint16_t adcRead(uint8_t ch)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	71fb      	strb	r3, [r7, #7]
  uint16_t ret =0;
 800092a:	2300      	movs	r3, #0
 800092c:	81fb      	strh	r3, [r7, #14]

      #endif
      break;
  }
#elif 1
  ret = adc_data[ch];
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	4a05      	ldr	r2, [pc, #20]	; (8000948 <adcRead+0x28>)
 8000932:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000936:	81fb      	strh	r3, [r7, #14]
#endif
  return ret;
 8000938:	89fb      	ldrh	r3, [r7, #14]
}
 800093a:	4618      	mov	r0, r3
 800093c:	3714      	adds	r7, #20
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	20000130 	.word	0x20000130

0800094c <adcReadVoltage>:

uint32_t adcReadVoltage(uint8_t ch)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
  uint32_t ret;
  uint32_t adc_data =0;
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
  uint32_t adc_vol =0;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]

  adc_data = adcRead(ch);
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff ffdd 	bl	8000920 <adcRead>
 8000966:	4603      	mov	r3, r0
 8000968:	617b      	str	r3, [r7, #20]

  ret = (330* adc_data) /4096;
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8000970:	fb02 f303 	mul.w	r3, r2, r3
 8000974:	0b1b      	lsrs	r3, r3, #12
 8000976:	60fb      	str	r3, [r7, #12]
  return ret;
 8000978:	68fb      	ldr	r3, [r7, #12]

}
 800097a:	4618      	mov	r0, r3
 800097c:	3718      	adds	r7, #24
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <btnGpioInit>:




bool btnGpioInit(void)
{
 8000982:	b480      	push	{r7}
 8000984:	b083      	sub	sp, #12
 8000986:	af00      	add	r7, sp, #0
  bool ret = true;
 8000988:	2301      	movs	r3, #1
 800098a:	71fb      	strb	r3, [r7, #7]

  return ret;
 800098c:	79fb      	ldrb	r3, [r7, #7]
}
 800098e:	4618      	mov	r0, r3
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
	...

0800099c <btnGpioGetPressed>:
bool btnGpioGetPressed(uint8_t ch)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80009a6:	2300      	movs	r3, #0
 80009a8:	73fb      	strb	r3, [r7, #15]
   if (ch>= BTN_GPIO_MAX_CH)
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <btnGpioGetPressed+0x18>
     return false;
 80009b0:	2300      	movs	r3, #0
 80009b2:	e024      	b.n	80009fe <btnGpioGetPressed+0x62>
  
  if(HAL_GPIO_ReadPin(btn_gpio_tbl[ch].port, btn_gpio_tbl[ch].pin) == btn_gpio_tbl[ch].on_state)
 80009b4:	79fa      	ldrb	r2, [r7, #7]
 80009b6:	4914      	ldr	r1, [pc, #80]	; (8000a08 <btnGpioGetPressed+0x6c>)
 80009b8:	4613      	mov	r3, r2
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	4413      	add	r3, r2
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	440b      	add	r3, r1
 80009c2:	6818      	ldr	r0, [r3, #0]
 80009c4:	79fa      	ldrb	r2, [r7, #7]
 80009c6:	4910      	ldr	r1, [pc, #64]	; (8000a08 <btnGpioGetPressed+0x6c>)
 80009c8:	4613      	mov	r3, r2
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	4413      	add	r3, r2
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	440b      	add	r3, r1
 80009d2:	3304      	adds	r3, #4
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	4619      	mov	r1, r3
 80009da:	f003 f8e3 	bl	8003ba4 <HAL_GPIO_ReadPin>
 80009de:	4603      	mov	r3, r0
 80009e0:	4618      	mov	r0, r3
 80009e2:	79fa      	ldrb	r2, [r7, #7]
 80009e4:	4908      	ldr	r1, [pc, #32]	; (8000a08 <btnGpioGetPressed+0x6c>)
 80009e6:	4613      	mov	r3, r2
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	4413      	add	r3, r2
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	440b      	add	r3, r1
 80009f0:	3308      	adds	r3, #8
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	4298      	cmp	r0, r3
 80009f6:	d101      	bne.n	80009fc <btnGpioGetPressed+0x60>
    ret = true;
 80009f8:	2301      	movs	r3, #1
 80009fa:	73fb      	strb	r3, [r7, #15]



  return ret;
 80009fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000000 	.word	0x20000000

08000a0c <buttonInit>:




bool buttonInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  return true;
 8000a10:	2301      	movs	r3, #1
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <buttonGetPressed>:

bool buttonGetPressed(uint8_t ch)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8000a26:	2300      	movs	r3, #0
 8000a28:	73fb      	strb	r3, [r7, #15]
  uint32_t adc_voltage;

  adc_voltage = adcReadVoltage(adc_ch);
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ff8d 	bl	800094c <adcReadVoltage>
 8000a32:	60b8      	str	r0, [r7, #8]

  if( ch>= BUTTON_MAX_CH)
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	2b04      	cmp	r3, #4
 8000a38:	d901      	bls.n	8000a3e <buttonGetPressed+0x22>
    return false;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	e013      	b.n	8000a66 <buttonGetPressed+0x4a>
    {
      ret = true;
    }
  }
#elif 1
  if(adc_voltage >= button_adc[ch].adc_min && adc_voltage <= button_adc[ch].adc_max)
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	4a0b      	ldr	r2, [pc, #44]	; (8000a70 <buttonGetPressed+0x54>)
 8000a42:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000a46:	461a      	mov	r2, r3
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d30a      	bcc.n	8000a64 <buttonGetPressed+0x48>
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	4a07      	ldr	r2, [pc, #28]	; (8000a70 <buttonGetPressed+0x54>)
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	4413      	add	r3, r2
 8000a56:	885b      	ldrh	r3, [r3, #2]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d801      	bhi.n	8000a64 <buttonGetPressed+0x48>
  {
    ret = true;
 8000a60:	2301      	movs	r3, #1
 8000a62:	73fb      	strb	r3, [r7, #15]
  }
#endif
  return ret;
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	08006f20 	.word	0x08006f20

08000a74 <cliInit>:

static void cliHelp(uint8_t argc, const char **argv);
//이중 포인터

bool cliInit(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
    for( int i =0 ; i < CLI_CMD_LIST_MAX; i++)
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	e00c      	b.n	8000a9a <cliInit+0x26>
    {
        cli_cmd_func[i].cmd_func = NULL;
 8000a80:	490e      	ldr	r1, [pc, #56]	; (8000abc <cliInit+0x48>)
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	4613      	mov	r3, r2
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	4413      	add	r3, r2
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	440b      	add	r3, r1
 8000a8e:	3308      	adds	r3, #8
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
    for( int i =0 ; i < CLI_CMD_LIST_MAX; i++)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3301      	adds	r3, #1
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b07      	cmp	r3, #7
 8000a9e:	ddef      	ble.n	8000a80 <cliInit+0xc>
    }
    cliAdd("help", cliHelp); //명령어 등록
 8000aa0:	4907      	ldr	r1, [pc, #28]	; (8000ac0 <cliInit+0x4c>)
 8000aa2:	4808      	ldr	r0, [pc, #32]	; (8000ac4 <cliInit+0x50>)
 8000aa4:	f000 f842 	bl	8000b2c <cliAdd>
    //cliHelp라는 함수가 따로 있고, 그 함수를 
    cliAdd("ls",cliHelp); //다른 명령어 등록
 8000aa8:	4905      	ldr	r1, [pc, #20]	; (8000ac0 <cliInit+0x4c>)
 8000aaa:	4807      	ldr	r0, [pc, #28]	; (8000ac8 <cliInit+0x54>)
 8000aac:	f000 f83e 	bl	8000b2c <cliAdd>

    return true;
 8000ab0:	2301      	movs	r3, #1
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200001e0 	.word	0x200001e0
 8000ac0:	08000acd 	.word	0x08000acd
 8000ac4:	08006e30 	.word	0x08006e30
 8000ac8:	08006e38 	.word	0x08006e38

08000acc <cliHelp>:

void cliHelp(uint8_t argc, const char ** argv)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	6039      	str	r1, [r7, #0]
 8000ad6:	71fb      	strb	r3, [r7, #7]
  cliPrintf("-------cliHelp--------\r\n");
 8000ad8:	4810      	ldr	r0, [pc, #64]	; (8000b1c <cliHelp+0x50>)
 8000ada:	f000 f85b 	bl	8000b94 <cliPrintf>
  for(int i =0 ; i < cli_cmd_count; i++)
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	e00d      	b.n	8000b00 <cliHelp+0x34>
  {
    cliPrintf("%s\r\n",cli_cmd_func[i].cmd_str);
 8000ae4:	68fa      	ldr	r2, [r7, #12]
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	4413      	add	r3, r2
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	4a0c      	ldr	r2, [pc, #48]	; (8000b20 <cliHelp+0x54>)
 8000af0:	4413      	add	r3, r2
 8000af2:	4619      	mov	r1, r3
 8000af4:	480b      	ldr	r0, [pc, #44]	; (8000b24 <cliHelp+0x58>)
 8000af6:	f000 f84d 	bl	8000b94 <cliPrintf>
  for(int i =0 ; i < cli_cmd_count; i++)
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	3301      	adds	r3, #1
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <cliHelp+0x5c>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	461a      	mov	r2, r3
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	dbeb      	blt.n	8000ae4 <cliHelp+0x18>
  }
  cliPrintf("-------cliHelp--------\r\n");
 8000b0c:	4803      	ldr	r0, [pc, #12]	; (8000b1c <cliHelp+0x50>)
 8000b0e:	f000 f841 	bl	8000b94 <cliPrintf>
}
 8000b12:	bf00      	nop
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	08006e3c 	.word	0x08006e3c
 8000b20:	200001e0 	.word	0x200001e0
 8000b24:	08006e58 	.word	0x08006e58
 8000b28:	200001dc 	.word	0x200001dc

08000b2c <cliAdd>:


/*내부적으로 쓰는 함수배열에 추가함*/
//명령어 등록함
bool cliAdd(const char *cmd_str, void (*cmd_func)(uint8_t argc,const char **argv))
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
  if(cli_cmd_count >= CLI_CMD_LIST_MAX)
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <cliAdd+0x60>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b07      	cmp	r3, #7
 8000b3c:	d901      	bls.n	8000b42 <cliAdd+0x16>
    //더이상 저장할 공간이 없으니까 false반환
    return false;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	e020      	b.n	8000b84 <cliAdd+0x58>


  strncpy(cli_cmd_func[cli_cmd_count].cmd_str,cmd_str,8);
 8000b42:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <cliAdd+0x60>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	461a      	mov	r2, r3
 8000b48:	4613      	mov	r3, r2
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	4413      	add	r3, r2
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	4a0f      	ldr	r2, [pc, #60]	; (8000b90 <cliAdd+0x64>)
 8000b52:	4413      	add	r3, r2
 8000b54:	2208      	movs	r2, #8
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f005 fc3d 	bl	80063d8 <strncpy>
  //버퍼 갯수 8
  //안전하게
  cli_cmd_func[cli_cmd_count].cmd_func = cmd_func;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <cliAdd+0x60>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	4619      	mov	r1, r3
 8000b64:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <cliAdd+0x64>)
 8000b66:	460b      	mov	r3, r1
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	440b      	add	r3, r1
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	4413      	add	r3, r2
 8000b70:	3308      	adds	r3, #8
 8000b72:	683a      	ldr	r2, [r7, #0]
 8000b74:	601a      	str	r2, [r3, #0]
  cli_cmd_count++;
 8000b76:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <cliAdd+0x60>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	b2da      	uxtb	r2, r3
 8000b7e:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <cliAdd+0x60>)
 8000b80:	701a      	strb	r2, [r3, #0]
  return true;
 8000b82:	2301      	movs	r3, #1
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	200001dc 	.word	0x200001dc
 8000b90:	200001e0 	.word	0x200001e0

08000b94 <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{//가변인자 받음
 8000b94:	b40f      	push	{r0, r1, r2, r3}
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
  va_list arg;

  /*? 아래 3줄은 모여다니는 건데,,, 기능까먹음. */
  va_start(arg,fmt);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	607b      	str	r3, [r7, #4]
  uartVPrintf(cli_ch,fmt, arg);
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	6939      	ldr	r1, [r7, #16]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f000 fcee 	bl	800158a <uartVPrintf>
  va_end(arg);
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <cliIsStr>:

/*받은 문자열에서 검색함 */
bool cliIsStr(const char *p_arg, const char *p_str)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  if(strcmp(p_arg, p_str) ==0)
 8000bc6:	6839      	ldr	r1, [r7, #0]
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f7ff fb11 	bl	80001f0 <strcmp>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d101      	bne.n	8000bd8 <cliIsStr+0x1c>
    return true;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	e000      	b.n	8000bda <cliIsStr+0x1e>
  else
    return false;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <cliGetData>:




int32_t cliGetData(const char *p_arg)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b084      	sub	sp, #16
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
  int32_t ret;
  ret = (int32_t)strtoul(p_arg, (char **)NULL,0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f005 fb86 	bl	8006300 <strtoul>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	60fb      	str	r3, [r7, #12]
  return ret;
 8000bf8:	68fb      	ldr	r3, [r7, #12]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	af00      	add	r7, sp, #0
  /*data가 없으면 true로 계속 대기*/
  if(uartAvailable(cli_ch) == 0)
 8000c06:	2303      	movs	r3, #3
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 fc23 	bl	8001454 <uartAvailable>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d101      	bne.n	8000c18 <cliKeepLoop+0x16>
  {
    return true;
 8000c14:	2301      	movs	r3, #1
 8000c16:	e000      	b.n	8000c1a <cliKeepLoop+0x18>
  } else {
    return false;
 8000c18:	2300      	movs	r3, #0
  }
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <cliMain>:
/*UART의 수신 데이터를 처리해서 명령어를 실행*/
bool cliMain(void) 
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
  bool ret =false;
 8000c26:	2300      	movs	r3, #0
 8000c28:	75fb      	strb	r3, [r7, #23]
    
    if(uartAvailable(cli_ch) >0)
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 fc11 	bl	8001454 <uartAvailable>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	f000 808c 	beq.w	8000d52 <cliMain+0x132>
    {
      uint8_t rx_data;

      rx_data = uartRead(cli_ch);
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 fc3b 	bl	80014b8 <uartRead>
 8000c42:	4603      	mov	r3, r0
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	72fb      	strb	r3, [r7, #11]
      // uartPrintf(cli_ch,"rx data : 0x%02X (%c)\r\n" ,rx_data, rx_data);
      if (rx_data == '\r')
 8000c48:	7afb      	ldrb	r3, [r7, #11]
 8000c4a:	2b0d      	cmp	r3, #13
 8000c4c:	d16a      	bne.n	8000d24 <cliMain+0x104>
      {
        /*엔터 후 초기화*/
        cli_buf[cli_buf_index] =0;
 8000c4e:	4b43      	ldr	r3, [pc, #268]	; (8000d5c <cliMain+0x13c>)
 8000c50:	881b      	ldrh	r3, [r3, #0]
 8000c52:	461a      	mov	r2, r3
 8000c54:	4b42      	ldr	r3, [pc, #264]	; (8000d60 <cliMain+0x140>)
 8000c56:	2100      	movs	r1, #0
 8000c58:	5499      	strb	r1, [r3, r2]
        cli_buf_index =0;
 8000c5a:	4b40      	ldr	r3, [pc, #256]	; (8000d5c <cliMain+0x13c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	801a      	strh	r2, [r3, #0]

        uartPrintf(cli_ch, "\r\n"); 
 8000c60:	2303      	movs	r3, #3
 8000c62:	4940      	ldr	r1, [pc, #256]	; (8000d64 <cliMain+0x144>)
 8000c64:	4618      	mov	r0, r3
 8000c66:	f000 fc57 	bl	8001518 <uartPrintf>
        //엔터 후 줄바꿈

        /*RUN CMD*/
        char *tok;
        char *str_ptr = cli_buf;
 8000c6a:	4b3d      	ldr	r3, [pc, #244]	; (8000d60 <cliMain+0x140>)
 8000c6c:	607b      	str	r3, [r7, #4]

        cli_argc =0;
 8000c6e:	4b3e      	ldr	r3, [pc, #248]	; (8000d68 <cliMain+0x148>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	801a      	strh	r2, [r3, #0]
        while((tok = strtok_r(str_ptr," ", &str_ptr)) != NULL)
 8000c74:	e00c      	b.n	8000c90 <cliMain+0x70>
        { //&str_ptr : 이중포인터, 
          //tok : " "이후 문자열 시작주소 
          cli_argv[cli_argc] = tok;
 8000c76:	4b3c      	ldr	r3, [pc, #240]	; (8000d68 <cliMain+0x148>)
 8000c78:	881b      	ldrh	r3, [r3, #0]
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4a3b      	ldr	r2, [pc, #236]	; (8000d6c <cliMain+0x14c>)
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
          cli_argc++;
 8000c84:	4b38      	ldr	r3, [pc, #224]	; (8000d68 <cliMain+0x148>)
 8000c86:	881b      	ldrh	r3, [r3, #0]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	4b36      	ldr	r3, [pc, #216]	; (8000d68 <cliMain+0x148>)
 8000c8e:	801a      	strh	r2, [r3, #0]
        while((tok = strtok_r(str_ptr," ", &str_ptr)) != NULL)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	1d3a      	adds	r2, r7, #4
 8000c94:	4936      	ldr	r1, [pc, #216]	; (8000d70 <cliMain+0x150>)
 8000c96:	4618      	mov	r0, r3
 8000c98:	f005 fbd9 	bl	800644e <strtok_r>
 8000c9c:	60f8      	str	r0, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d1e8      	bne.n	8000c76 <cliMain+0x56>
          //3개 잘렸으면 cli_argc는 3개
        }

        for (int i=0; i<cli_cmd_count;i++)
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	e030      	b.n	8000d0c <cliMain+0xec>
        {
          if(strcmp(cli_argv[0], cli_cmd_func[i].cmd_str) ==0)
 8000caa:	4b30      	ldr	r3, [pc, #192]	; (8000d6c <cliMain+0x14c>)
 8000cac:	6818      	ldr	r0, [r3, #0]
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	4413      	add	r3, r2
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	4a2e      	ldr	r2, [pc, #184]	; (8000d74 <cliMain+0x154>)
 8000cba:	4413      	add	r3, r2
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	f7ff fa97 	bl	80001f0 <strcmp>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d11e      	bne.n	8000d06 <cliMain+0xe6>
          { //실행하고자 하는 명령어가 리스트에 존재
            if(cli_cmd_func[i].cmd_func != NULL)
 8000cc8:	492a      	ldr	r1, [pc, #168]	; (8000d74 <cliMain+0x154>)
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	4413      	add	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	440b      	add	r3, r1
 8000cd6:	3308      	adds	r3, #8
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d013      	beq.n	8000d06 <cliMain+0xe6>
            {
              cli_cmd_func[i].cmd_func(cli_argc -1, (const char **)&cli_argv[1]);
 8000cde:	4925      	ldr	r1, [pc, #148]	; (8000d74 <cliMain+0x154>)
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	4413      	add	r3, r2
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	440b      	add	r3, r1
 8000cec:	3308      	adds	r3, #8
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a1d      	ldr	r2, [pc, #116]	; (8000d68 <cliMain+0x148>)
 8000cf2:	8812      	ldrh	r2, [r2, #0]
 8000cf4:	b2d2      	uxtb	r2, r2
 8000cf6:	3a01      	subs	r2, #1
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	491f      	ldr	r1, [pc, #124]	; (8000d78 <cliMain+0x158>)
 8000cfc:	4610      	mov	r0, r2
 8000cfe:	4798      	blx	r3
              //함수 넘기기
              ret = true;
 8000d00:	2301      	movs	r3, #1
 8000d02:	75fb      	strb	r3, [r7, #23]
              break;
 8000d04:	e008      	b.n	8000d18 <cliMain+0xf8>
        for (int i=0; i<cli_cmd_count;i++)
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <cliMain+0x15c>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	461a      	mov	r2, r3
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	4293      	cmp	r3, r2
 8000d16:	dbc8      	blt.n	8000caa <cliMain+0x8a>
//
//          ret = true;
//        }


        uartPrintf(cli_ch, "cli# ");
 8000d18:	2303      	movs	r3, #3
 8000d1a:	4919      	ldr	r1, [pc, #100]	; (8000d80 <cliMain+0x160>)
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f000 fbfb 	bl	8001518 <uartPrintf>
 8000d22:	e016      	b.n	8000d52 <cliMain+0x132>
      /*127개 이하면, 버퍼에 저장*/
      }else if(cli_buf_index < (128-1)){
 8000d24:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <cliMain+0x13c>)
 8000d26:	881b      	ldrh	r3, [r3, #0]
 8000d28:	2b7e      	cmp	r3, #126	; 0x7e
 8000d2a:	d812      	bhi.n	8000d52 <cliMain+0x132>
        cli_buf[cli_buf_index] = rx_data;
 8000d2c:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <cliMain+0x13c>)
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	461a      	mov	r2, r3
 8000d32:	7af9      	ldrb	r1, [r7, #11]
 8000d34:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <cliMain+0x140>)
 8000d36:	5499      	strb	r1, [r3, r2]
        cli_buf_index++;
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <cliMain+0x13c>)
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <cliMain+0x13c>)
 8000d42:	801a      	strh	r2, [r3, #0]

        uartWrite(cli_ch, &rx_data,1);
 8000d44:	2003      	movs	r0, #3
 8000d46:	f107 030b 	add.w	r3, r7, #11
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f000 fb5f 	bl	8001410 <uartWrite>
        
      }
    }
    return ret;
 8000d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3718      	adds	r7, #24
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	200001b8 	.word	0x200001b8
 8000d60:	20000138 	.word	0x20000138
 8000d64:	08006e60 	.word	0x08006e60
 8000d68:	200001ba 	.word	0x200001ba
 8000d6c:	200001bc 	.word	0x200001bc
 8000d70:	08006e64 	.word	0x08006e64
 8000d74:	200001e0 	.word	0x200001e0
 8000d78:	200001c0 	.word	0x200001c0
 8000d7c:	200001dc 	.word	0x200001dc
 8000d80:	08006e68 	.word	0x08006e68

08000d84 <gpioInit>:
};

static void cliGpio(uint8_t argc,const char **argv);

bool gpioInit()
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
    bool ret = true;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	70fb      	strb	r3, [r7, #3]



    for( int i=0; i <GPIO_MAX_CH ;i++) 
 8000d8e:	2300      	movs	r3, #0
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	e01e      	b.n	8000dd2 <gpioInit+0x4e>
    {
        gpioPinMode(i,gpio_tbl[i].mode);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	b2d8      	uxtb	r0, r3
 8000d98:	4914      	ldr	r1, [pc, #80]	; (8000dec <gpioInit+0x68>)
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	4413      	add	r3, r2
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	440b      	add	r3, r1
 8000da6:	3308      	adds	r3, #8
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	4619      	mov	r1, r3
 8000dac:	f000 f824 	bl	8000df8 <gpioPinMode>
        gpioPinWrite(i,gpio_tbl[i].init_value);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	b2d8      	uxtb	r0, r3
 8000db4:	490d      	ldr	r1, [pc, #52]	; (8000dec <gpioInit+0x68>)
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	4613      	mov	r3, r2
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	4413      	add	r3, r2
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	440b      	add	r3, r1
 8000dc2:	330b      	adds	r3, #11
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	f000 f8d2 	bl	8000f70 <gpioPinWrite>
    for( int i=0; i <GPIO_MAX_CH ;i++) 
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b0a      	cmp	r3, #10
 8000dd6:	dddd      	ble.n	8000d94 <gpioInit+0x10>
    }

    cliAdd("gpio",cliGpio);
 8000dd8:	4905      	ldr	r1, [pc, #20]	; (8000df0 <gpioInit+0x6c>)
 8000dda:	4806      	ldr	r0, [pc, #24]	; (8000df4 <gpioInit+0x70>)
 8000ddc:	f7ff fea6 	bl	8000b2c <cliAdd>
    return ret;
 8000de0:	78fb      	ldrb	r3, [r7, #3]
    // GPIO_InitStruct.Pin = GPIO_PIN_9;
    // GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    // GPIO_InitStruct.Pull = GPIO_PULLUP;
    // HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
    
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	2000000c 	.word	0x2000000c
 8000df0:	08001085 	.word	0x08001085
 8000df4:	08006e70 	.word	0x08006e70

08000df8 <gpioPinMode>:

bool gpioPinMode(uint8_t ch,uint8_t mode)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08e      	sub	sp, #56	; 0x38
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	460a      	mov	r2, r1
 8000e02:	71fb      	strb	r3, [r7, #7]
 8000e04:	4613      	mov	r3, r2
 8000e06:	71bb      	strb	r3, [r7, #6]
    bool ret = true;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    GPIO_InitTypeDef GPIO_InitStruct = {0}; //초기 구조체
 8000e0e:	f107 0320 	add.w	r3, r7, #32
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
 8000e1c:	611a      	str	r2, [r3, #16]
 //   if(ch >= GPIO_MAX_CH) 
 //       return false;

   /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
 8000e22:	4b51      	ldr	r3, [pc, #324]	; (8000f68 <gpioPinMode+0x170>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a50      	ldr	r2, [pc, #320]	; (8000f68 <gpioPinMode+0x170>)
 8000e28:	f043 0310 	orr.w	r3, r3, #16
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b4e      	ldr	r3, [pc, #312]	; (8000f68 <gpioPinMode+0x170>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0310 	and.w	r3, r3, #16
 8000e36:	61fb      	str	r3, [r7, #28]
 8000e38:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61bb      	str	r3, [r7, #24]
 8000e3e:	4b4a      	ldr	r3, [pc, #296]	; (8000f68 <gpioPinMode+0x170>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a49      	ldr	r2, [pc, #292]	; (8000f68 <gpioPinMode+0x170>)
 8000e44:	f043 0304 	orr.w	r3, r3, #4
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b47      	ldr	r3, [pc, #284]	; (8000f68 <gpioPinMode+0x170>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0304 	and.w	r3, r3, #4
 8000e52:	61bb      	str	r3, [r7, #24]
 8000e54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
 8000e5a:	4b43      	ldr	r3, [pc, #268]	; (8000f68 <gpioPinMode+0x170>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a42      	ldr	r2, [pc, #264]	; (8000f68 <gpioPinMode+0x170>)
 8000e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b40      	ldr	r3, [pc, #256]	; (8000f68 <gpioPinMode+0x170>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	4b3c      	ldr	r3, [pc, #240]	; (8000f68 <gpioPinMode+0x170>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a3b      	ldr	r2, [pc, #236]	; (8000f68 <gpioPinMode+0x170>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b39      	ldr	r3, [pc, #228]	; (8000f68 <gpioPinMode+0x170>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	4b35      	ldr	r3, [pc, #212]	; (8000f68 <gpioPinMode+0x170>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a34      	ldr	r2, [pc, #208]	; (8000f68 <gpioPinMode+0x170>)
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b32      	ldr	r3, [pc, #200]	; (8000f68 <gpioPinMode+0x170>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	4b2e      	ldr	r3, [pc, #184]	; (8000f68 <gpioPinMode+0x170>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a2d      	ldr	r2, [pc, #180]	; (8000f68 <gpioPinMode+0x170>)
 8000eb4:	f043 0308 	orr.w	r3, r3, #8
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b2b      	ldr	r3, [pc, #172]	; (8000f68 <gpioPinMode+0x170>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0308 	and.w	r3, r3, #8
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]

    switch(mode) 
 8000ec6:	79bb      	ldrb	r3, [r7, #6]
 8000ec8:	2b05      	cmp	r3, #5
 8000eca:	d82d      	bhi.n	8000f28 <gpioPinMode+0x130>
 8000ecc:	a201      	add	r2, pc, #4	; (adr r2, 8000ed4 <gpioPinMode+0xdc>)
 8000ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed2:	bf00      	nop
 8000ed4:	08000eed 	.word	0x08000eed
 8000ed8:	08000ef7 	.word	0x08000ef7
 8000edc:	08000f01 	.word	0x08000f01
 8000ee0:	08000f0b 	.word	0x08000f0b
 8000ee4:	08000f15 	.word	0x08000f15
 8000ee8:	08000f1f 	.word	0x08000f1f
    {
        case _DEF_INPUT:            //input
            GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eec:	2300      	movs	r3, #0
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
            GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
            break;
 8000ef4:	e018      	b.n	8000f28 <gpioPinMode+0x130>
    
        case _DEF_INPUT_PULLUP:     //input이면서 pullup
            GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
            GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000efa:	2301      	movs	r3, #1
 8000efc:	62bb      	str	r3, [r7, #40]	; 0x28
            break;
 8000efe:	e013      	b.n	8000f28 <gpioPinMode+0x130>
        case _DEF_INPUT_PULLDOWN:     //input이면서 pulldown
            GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
            GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f04:	2302      	movs	r3, #2
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
            break;
 8000f08:	e00e      	b.n	8000f28 <gpioPinMode+0x130>
        case _DEF_OUTPUT:     //output
            GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; //PP: PUSH PULL
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
            GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
            break;
 8000f12:	e009      	b.n	8000f28 <gpioPinMode+0x130>
        case _DEF_OUTPUT_PULLUP:     //output이면서 pullup
            GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f14:	2301      	movs	r3, #1
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
            GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	62bb      	str	r3, [r7, #40]	; 0x28
            break;
 8000f1c:	e004      	b.n	8000f28 <gpioPinMode+0x130>
        case _DEF_OUTPUT_PULLDOWN:     //output이면서 pulldown
            GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
            GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f22:	2302      	movs	r3, #2
 8000f24:	62bb      	str	r3, [r7, #40]	; 0x28
            break;
 8000f26:	bf00      	nop
    }

	

    GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 8000f28:	79fa      	ldrb	r2, [r7, #7]
 8000f2a:	4910      	ldr	r1, [pc, #64]	; (8000f6c <gpioPinMode+0x174>)
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	4413      	add	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	440b      	add	r3, r1
 8000f36:	3304      	adds	r3, #4
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 8000f40:	79fa      	ldrb	r2, [r7, #7]
 8000f42:	490a      	ldr	r1, [pc, #40]	; (8000f6c <gpioPinMode+0x174>)
 8000f44:	4613      	mov	r3, r2
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	4413      	add	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f107 0220 	add.w	r2, r7, #32
 8000f54:	4611      	mov	r1, r2
 8000f56:	4618      	mov	r0, r3
 8000f58:	f002 fc78 	bl	800384c <HAL_GPIO_Init>

    return ret;
 8000f5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37

}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3738      	adds	r7, #56	; 0x38
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	2000000c 	.word	0x2000000c

08000f70 <gpioPinWrite>:
void gpioPinWrite(uint8_t ch, bool value)
{
 8000f70:	b590      	push	{r4, r7, lr}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	460a      	mov	r2, r1
 8000f7a:	71fb      	strb	r3, [r7, #7]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	71bb      	strb	r3, [r7, #6]
    if(ch >= GPIO_MAX_CH) 
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	2b0a      	cmp	r3, #10
 8000f84:	d840      	bhi.n	8001008 <gpioPinWrite+0x98>
        return;
    if(value == true) 
 8000f86:	79bb      	ldrb	r3, [r7, #6]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d01e      	beq.n	8000fca <gpioPinWrite+0x5a>
    {
        HAL_GPIO_WritePin(gpio_tbl[ch].port,gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 8000f8c:	79fa      	ldrb	r2, [r7, #7]
 8000f8e:	4920      	ldr	r1, [pc, #128]	; (8001010 <gpioPinWrite+0xa0>)
 8000f90:	4613      	mov	r3, r2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	4413      	add	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	440b      	add	r3, r1
 8000f9a:	6818      	ldr	r0, [r3, #0]
 8000f9c:	79fa      	ldrb	r2, [r7, #7]
 8000f9e:	491c      	ldr	r1, [pc, #112]	; (8001010 <gpioPinWrite+0xa0>)
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	4413      	add	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	440b      	add	r3, r1
 8000faa:	3304      	adds	r3, #4
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	b299      	uxth	r1, r3
 8000fb0:	79fa      	ldrb	r2, [r7, #7]
 8000fb2:	4c17      	ldr	r4, [pc, #92]	; (8001010 <gpioPinWrite+0xa0>)
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	4413      	add	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4423      	add	r3, r4
 8000fbe:	3309      	adds	r3, #9
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	f002 fe06 	bl	8003bd4 <HAL_GPIO_WritePin>
 8000fc8:	e01f      	b.n	800100a <gpioPinWrite+0x9a>
    }
    else 
    {
        HAL_GPIO_WritePin(gpio_tbl[ch].port,gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 8000fca:	79fa      	ldrb	r2, [r7, #7]
 8000fcc:	4910      	ldr	r1, [pc, #64]	; (8001010 <gpioPinWrite+0xa0>)
 8000fce:	4613      	mov	r3, r2
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	4413      	add	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	6818      	ldr	r0, [r3, #0]
 8000fda:	79fa      	ldrb	r2, [r7, #7]
 8000fdc:	490c      	ldr	r1, [pc, #48]	; (8001010 <gpioPinWrite+0xa0>)
 8000fde:	4613      	mov	r3, r2
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	4413      	add	r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	3304      	adds	r3, #4
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	b299      	uxth	r1, r3
 8000fee:	79fa      	ldrb	r2, [r7, #7]
 8000ff0:	4c07      	ldr	r4, [pc, #28]	; (8001010 <gpioPinWrite+0xa0>)
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	4413      	add	r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4423      	add	r3, r4
 8000ffc:	330a      	adds	r3, #10
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	f002 fde7 	bl	8003bd4 <HAL_GPIO_WritePin>
 8001006:	e000      	b.n	800100a <gpioPinWrite+0x9a>
        return;
 8001008:	bf00      	nop
    }
}
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	bd90      	pop	{r4, r7, pc}
 8001010:	2000000c 	.word	0x2000000c

08001014 <gpioPinRead>:

bool gpioPinRead(uint8_t ch)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
    bool ret = false;
 800101e:	2300      	movs	r3, #0
 8001020:	73fb      	strb	r3, [r7, #15]
    if (ch >= GPIO_MAX_CH)
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b0a      	cmp	r3, #10
 8001026:	d901      	bls.n	800102c <gpioPinRead+0x18>
        return false;
 8001028:	2300      	movs	r3, #0
 800102a:	e024      	b.n	8001076 <gpioPinRead+0x62>
    
    if (HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) ==  gpio_tbl[ch].on_state)
 800102c:	79fa      	ldrb	r2, [r7, #7]
 800102e:	4914      	ldr	r1, [pc, #80]	; (8001080 <gpioPinRead+0x6c>)
 8001030:	4613      	mov	r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	4413      	add	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	440b      	add	r3, r1
 800103a:	6818      	ldr	r0, [r3, #0]
 800103c:	79fa      	ldrb	r2, [r7, #7]
 800103e:	4910      	ldr	r1, [pc, #64]	; (8001080 <gpioPinRead+0x6c>)
 8001040:	4613      	mov	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	440b      	add	r3, r1
 800104a:	3304      	adds	r3, #4
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	b29b      	uxth	r3, r3
 8001050:	4619      	mov	r1, r3
 8001052:	f002 fda7 	bl	8003ba4 <HAL_GPIO_ReadPin>
 8001056:	4603      	mov	r3, r0
 8001058:	4618      	mov	r0, r3
 800105a:	79fa      	ldrb	r2, [r7, #7]
 800105c:	4908      	ldr	r1, [pc, #32]	; (8001080 <gpioPinRead+0x6c>)
 800105e:	4613      	mov	r3, r2
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	4413      	add	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	440b      	add	r3, r1
 8001068:	3309      	adds	r3, #9
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4298      	cmp	r0, r3
 800106e:	d101      	bne.n	8001074 <gpioPinRead+0x60>
    {
        ret= true;
 8001070:	2301      	movs	r3, #1
 8001072:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 8001074:	7bfb      	ldrb	r3, [r7, #15]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000000c 	.word	0x2000000c

08001084 <cliGpio>:
}


//왜 static으로 했지?
static void cliGpio(uint8_t argc,const char **argv)
{
 8001084:	b590      	push	{r4, r7, lr}
 8001086:	b087      	sub	sp, #28
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	71fb      	strb	r3, [r7, #7]
    bool ret = false;
 8001090:	2300      	movs	r3, #0
 8001092:	75fb      	strb	r3, [r7, #23]


    if(argc ==1 && cliIsStr(argv[0],"show"))
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d129      	bne.n	80010ee <cliGpio+0x6a>
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	494e      	ldr	r1, [pc, #312]	; (80011d8 <cliGpio+0x154>)
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fd8b 	bl	8000bbc <cliIsStr>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d020      	beq.n	80010ee <cliGpio+0x6a>
    {
        while(cliKeepLoop())
 80010ac:	e018      	b.n	80010e0 <cliGpio+0x5c>
        {
            for (int i=0; i< GPIO_MAX_CH;i++) 
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	e00c      	b.n	80010ce <cliGpio+0x4a>
            {
                cliPrintf("%d", gpioPinRead(i));
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ffab 	bl	8001014 <gpioPinRead>
 80010be:	4603      	mov	r3, r0
 80010c0:	4619      	mov	r1, r3
 80010c2:	4846      	ldr	r0, [pc, #280]	; (80011dc <cliGpio+0x158>)
 80010c4:	f7ff fd66 	bl	8000b94 <cliPrintf>
            for (int i=0; i< GPIO_MAX_CH;i++) 
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	3301      	adds	r3, #1
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	2b0a      	cmp	r3, #10
 80010d2:	ddef      	ble.n	80010b4 <cliGpio+0x30>
            }
            cliPrintf("\n\r");
 80010d4:	4842      	ldr	r0, [pc, #264]	; (80011e0 <cliGpio+0x15c>)
 80010d6:	f7ff fd5d 	bl	8000b94 <cliPrintf>
            delay(100);
 80010da:	2064      	movs	r0, #100	; 0x64
 80010dc:	f000 fa96 	bl	800160c <delay>
        while(cliKeepLoop())
 80010e0:	f7ff fd8f 	bl	8000c02 <cliKeepLoop>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1e1      	bne.n	80010ae <cliGpio+0x2a>
        }
        ret = true;
 80010ea:	2301      	movs	r3, #1
 80010ec:	75fb      	strb	r3, [r7, #23]
    }

    /*write 명령어*/
    if(argc ==3 ,cliIsStr(argv[0],"write"))
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	493c      	ldr	r1, [pc, #240]	; (80011e4 <cliGpio+0x160>)
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fd61 	bl	8000bbc <cliIsStr>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d02c      	beq.n	800115a <cliGpio+0xd6>
    {
        uint8_t ch;
        uint8_t data;

        ch = (uint8_t)cliGetData(argv[1]);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	3304      	adds	r3, #4
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fd6b 	bl	8000be2 <cliGetData>
 800110c:	4603      	mov	r3, r0
 800110e:	73fb      	strb	r3, [r7, #15]
        data = (uint8_t)cliGetData(argv[2]);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	3308      	adds	r3, #8
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fd63 	bl	8000be2 <cliGetData>
 800111c:	4603      	mov	r3, r0
 800111e:	73bb      	strb	r3, [r7, #14]
        gpioPinWrite(ch,data);
 8001120:	7bbb      	ldrb	r3, [r7, #14]
 8001122:	2b00      	cmp	r3, #0
 8001124:	bf14      	ite	ne
 8001126:	2301      	movne	r3, #1
 8001128:	2300      	moveq	r3, #0
 800112a:	b2da      	uxtb	r2, r3
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	4611      	mov	r1, r2
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff1d 	bl	8000f70 <gpioPinWrite>
        while(cliKeepLoop())
 8001136:	e009      	b.n	800114c <cliGpio+0xc8>
        {
            cliPrintf("argv[0]: %s, argv[1]: %d, argv[2]: %d \r\n",argv[0],ch,data);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	6819      	ldr	r1, [r3, #0]
 800113c:	7bfa      	ldrb	r2, [r7, #15]
 800113e:	7bbb      	ldrb	r3, [r7, #14]
 8001140:	4829      	ldr	r0, [pc, #164]	; (80011e8 <cliGpio+0x164>)
 8001142:	f7ff fd27 	bl	8000b94 <cliPrintf>
            
            delay(100);
 8001146:	2064      	movs	r0, #100	; 0x64
 8001148:	f000 fa60 	bl	800160c <delay>
        while(cliKeepLoop())
 800114c:	f7ff fd59 	bl	8000c02 <cliKeepLoop>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f0      	bne.n	8001138 <cliGpio+0xb4>
        }
        ret = true;
 8001156:	2301      	movs	r3, #1
 8001158:	75fb      	strb	r3, [r7, #23]
    }

    if(argc ==2 && cliIsStr(argv[0],"read"))
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	2b02      	cmp	r3, #2
 800115e:	d126      	bne.n	80011ae <cliGpio+0x12a>
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4921      	ldr	r1, [pc, #132]	; (80011ec <cliGpio+0x168>)
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fd28 	bl	8000bbc <cliIsStr>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d01d      	beq.n	80011ae <cliGpio+0x12a>
    {
        uint8_t ch;
        ch = (uint8_t)cliGetData(argv[1]);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	3304      	adds	r3, #4
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff fd32 	bl	8000be2 <cliGetData>
 800117e:	4603      	mov	r3, r0
 8001180:	737b      	strb	r3, [r7, #13]
       while(cliKeepLoop())
 8001182:	e00d      	b.n	80011a0 <cliGpio+0x11c>
       {
        cliPrintf("gpio read [ch %d] : %d\r\n", ch, gpioPinRead(ch));
 8001184:	7b7c      	ldrb	r4, [r7, #13]
 8001186:	7b7b      	ldrb	r3, [r7, #13]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff43 	bl	8001014 <gpioPinRead>
 800118e:	4603      	mov	r3, r0
 8001190:	461a      	mov	r2, r3
 8001192:	4621      	mov	r1, r4
 8001194:	4816      	ldr	r0, [pc, #88]	; (80011f0 <cliGpio+0x16c>)
 8001196:	f7ff fcfd 	bl	8000b94 <cliPrintf>
        delay(100);
 800119a:	2064      	movs	r0, #100	; 0x64
 800119c:	f000 fa36 	bl	800160c <delay>
       while(cliKeepLoop())
 80011a0:	f7ff fd2f 	bl	8000c02 <cliKeepLoop>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1ec      	bne.n	8001184 <cliGpio+0x100>
       }
       ret = true;
 80011aa:	2301      	movs	r3, #1
 80011ac:	75fb      	strb	r3, [r7, #23]
    }

    if(ret  != true )
 80011ae:	7dfb      	ldrb	r3, [r7, #23]
 80011b0:	f083 0301 	eor.w	r3, r3, #1
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00a      	beq.n	80011d0 <cliGpio+0x14c>
    {
        cliPrintf("gpio show\n\r");
 80011ba:	480e      	ldr	r0, [pc, #56]	; (80011f4 <cliGpio+0x170>)
 80011bc:	f7ff fcea 	bl	8000b94 <cliPrintf>
        cliPrintf("gpio read ch[0~ %d]\n\r", GPIO_MAX_CH-1);
 80011c0:	210a      	movs	r1, #10
 80011c2:	480d      	ldr	r0, [pc, #52]	; (80011f8 <cliGpio+0x174>)
 80011c4:	f7ff fce6 	bl	8000b94 <cliPrintf>
        cliPrintf("gpio write ch[0~ %d] 0:1\n\r", GPIO_MAX_CH-1);
 80011c8:	210a      	movs	r1, #10
 80011ca:	480c      	ldr	r0, [pc, #48]	; (80011fc <cliGpio+0x178>)
 80011cc:	f7ff fce2 	bl	8000b94 <cliPrintf>
    }
}
 80011d0:	bf00      	nop
 80011d2:	371c      	adds	r7, #28
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd90      	pop	{r4, r7, pc}
 80011d8:	08006e78 	.word	0x08006e78
 80011dc:	08006e80 	.word	0x08006e80
 80011e0:	08006e84 	.word	0x08006e84
 80011e4:	08006e88 	.word	0x08006e88
 80011e8:	08006e90 	.word	0x08006e90
 80011ec:	08006ebc 	.word	0x08006ebc
 80011f0:	08006ec4 	.word	0x08006ec4
 80011f4:	08006ee0 	.word	0x08006ee0
 80011f8:	08006eec 	.word	0x08006eec
 80011fc:	08006f04 	.word	0x08006f04

08001200 <ledInit>:
static uint16_t led_duty[1] = {10};
//초기값
//채널 갯수만큼 현재 1개

bool ledInit(void)
{   
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
	          GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001206:	463b      	mov	r3, r7
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]

//	  __HAL_RCC_GPIOA_CLK_ENABLE();

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 8001214:	2201      	movs	r2, #1
 8001216:	210c      	movs	r1, #12
 8001218:	4811      	ldr	r0, [pc, #68]	; (8001260 <ledInit+0x60>)
 800121a:	f002 fcdb 	bl	8003bd4 <HAL_GPIO_WritePin>

	  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800121e:	230c      	movs	r3, #12
 8001220:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001222:	2301      	movs	r3, #1
 8001224:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122e:	463b      	mov	r3, r7
 8001230:	4619      	mov	r1, r3
 8001232:	480b      	ldr	r0, [pc, #44]	; (8001260 <ledInit+0x60>)
 8001234:	f002 fb0a 	bl	800384c <HAL_GPIO_Init>
	for(int i=0; i<LED_MAX_CH;i++)
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	e007      	b.n	800124e <ledInit+0x4e>
	{
    	ledOff(i);
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	4618      	mov	r0, r3
 8001244:	f000 f82e 	bl	80012a4 <ledOff>
	for(int i=0; i<LED_MAX_CH;i++)
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	3301      	adds	r3, #1
 800124c:	617b      	str	r3, [r7, #20]
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	2b01      	cmp	r3, #1
 8001252:	ddf4      	ble.n	800123e <ledInit+0x3e>
		//애초에 _DEF_LED_CH0가 0이기때문에 이렇게 해도 되겠다.
	}
    return true;
 8001254:	2301      	movs	r3, #1
}
 8001256:	4618      	mov	r0, r3
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40020000 	.word	0x40020000

08001264 <ledOn>:

void ledOn(uint8_t ch)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]

    //         break;

    // }
	/*여러 채널 쓸 땐*/
	if (ch>=LED_MAX_CH) return;
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d811      	bhi.n	8001298 <ledOn+0x34>
	HAL_GPIO_WritePin(led_tbl[ch].port,led_tbl[ch].pin, led_tbl[ch].on_state);
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	4a0a      	ldr	r2, [pc, #40]	; (80012a0 <ledOn+0x3c>)
 8001278:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	4a08      	ldr	r2, [pc, #32]	; (80012a0 <ledOn+0x3c>)
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	4413      	add	r3, r2
 8001284:	8899      	ldrh	r1, [r3, #4]
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <ledOn+0x3c>)
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	4413      	add	r3, r2
 800128e:	799b      	ldrb	r3, [r3, #6]
 8001290:	461a      	mov	r2, r3
 8001292:	f002 fc9f 	bl	8003bd4 <HAL_GPIO_WritePin>
 8001296:	e000      	b.n	800129a <ledOn+0x36>
	if (ch>=LED_MAX_CH) return;
 8001298:	bf00      	nop

}
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000090 	.word	0x20000090

080012a4 <ledOff>:

void ledOff(uint8_t ch)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]
//             HAL_GPIO_WritePin(LED0_GPIO_Port,LED0_Pin, GPIO_PIN_SET);
// //            pwmWrite(_DEF_LED_CH0,100);
//             //100은 완전꺼짐
//             break;
//     }
	if(ch>=LED_MAX_CH) return;
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d811      	bhi.n	80012d8 <ledOff+0x34>
	HAL_GPIO_WritePin(led_tbl[ch].port,led_tbl[ch].pin, led_tbl[ch].off_state);
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <ledOff+0x3c>)
 80012b8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	4a08      	ldr	r2, [pc, #32]	; (80012e0 <ledOff+0x3c>)
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	4413      	add	r3, r2
 80012c4:	8899      	ldrh	r1, [r3, #4]
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	4a05      	ldr	r2, [pc, #20]	; (80012e0 <ledOff+0x3c>)
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	4413      	add	r3, r2
 80012ce:	79db      	ldrb	r3, [r3, #7]
 80012d0:	461a      	mov	r2, r3
 80012d2:	f002 fc7f 	bl	8003bd4 <HAL_GPIO_WritePin>
 80012d6:	e000      	b.n	80012da <ledOff+0x36>
	if(ch>=LED_MAX_CH) return;
 80012d8:	bf00      	nop
}
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000090 	.word	0x20000090

080012e4 <ledDuty>:
//     }
	if(ch>=LED_MAX_CH) return;
	HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
}
void ledDuty(uint8_t ch, uint16_t duty_data)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	460a      	mov	r2, r1
 80012ee:	71fb      	strb	r3, [r7, #7]
 80012f0:	4613      	mov	r3, r2
 80012f2:	80bb      	strh	r3, [r7, #4]
  switch(ch)
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d105      	bne.n	8001306 <ledDuty+0x22>
  {
    case _DEF_LED_CH0:
        led_duty[ch] = duty_data;
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	4905      	ldr	r1, [pc, #20]	; (8001314 <ledDuty+0x30>)
 80012fe:	88ba      	ldrh	r2, [r7, #4]
 8001300:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        break;
 8001304:	bf00      	nop
  }
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	200000a0 	.word	0x200000a0

08001318 <pwmInit>:
extern TIM_HandleTypeDef htim1;
//main.c에 있지만 임시로 가져옴.


bool pwmInit(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
  bool ret = true;
 800131e:	2301      	movs	r3, #1
 8001320:	71fb      	strb	r3, [r7, #7]
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001322:	2100      	movs	r1, #0
 8001324:	4803      	ldr	r0, [pc, #12]	; (8001334 <pwmInit+0x1c>)
 8001326:	f003 fb0b 	bl	8004940 <HAL_TIM_PWM_Start>
  //PWM 출력이 나감.
  return ret;
 800132a:	79fb      	ldrb	r3, [r7, #7]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200004b4 	.word	0x200004b4

08001338 <pwmWrite>:

void pwmWrite(uint8_t ch, uint16_t duty)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	460a      	mov	r2, r1
 8001342:	71fb      	strb	r3, [r7, #7]
 8001344:	4613      	mov	r3, r2
 8001346:	80bb      	strh	r3, [r7, #4]
  switch(ch)
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d104      	bne.n	8001358 <pwmWrite+0x20>
  {
    case _DEF_PWM_CH0:
      htim1.Instance->CCR1= 20;
 800134e:	4b05      	ldr	r3, [pc, #20]	; (8001364 <pwmWrite+0x2c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2214      	movs	r2, #20
 8001354:	635a      	str	r2, [r3, #52]	; 0x34
      //pulse값은 레지스터를 직접 바꿔서 컨트롤한다.
      //CCR1은  stm32fxx_hal_tim.c에 있다.
      //100은 100%다. 10은 10%다. 10% write된다.
      //결과: led가 출력의 10%만 켜진다.
      //pin회로가 SET모드라면 반대로 10%아닌 90%만큼 켜진다.
      break;
 8001356:	bf00      	nop
  }
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	200004b4 	.word	0x200004b4

08001368 <pwmRead>:


uint16_t pwmRead(uint8_t ch)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
    uint16_t pwm_data = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	81fb      	strh	r3, [r7, #14]
    /*+ : 애러처리*/
    switch(ch)
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d104      	bne.n	8001386 <pwmRead+0x1e>
    {
      case _DEF_PWM_CH1:
        pwm_data = htim1.Instance->CCR1;
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <pwmRead+0x2c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001382:	81fb      	strh	r3, [r7, #14]
        break;
 8001384:	bf00      	nop
    }

    return pwm_data;
 8001386:	89fb      	ldrh	r3, [r7, #14]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	200004b4 	.word	0x200004b4

08001398 <spiInit>:
extern DMA_HandleTypeDef hdma_spi4_tx;  //main.c에서 선언된 것 여기서 쓰고 싶음.



bool spiInit(void)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
    bool ret = true;
 800139e:	2301      	movs	r3, #1
 80013a0:	70fb      	strb	r3, [r7, #3]

    for(int i=0; i< SPI_MAX_CH;i++) 
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	e016      	b.n	80013d6 <spiInit+0x3e>
    {
        spi_tbl[i].is_open = false;
 80013a8:	4a10      	ldr	r2, [pc, #64]	; (80013ec <spiInit+0x54>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	011b      	lsls	r3, r3, #4
 80013ae:	4413      	add	r3, r2
 80013b0:	2200      	movs	r2, #0
 80013b2:	701a      	strb	r2, [r3, #0]
        spi_tbl[i].is_tx_done = true;
 80013b4:	4a0d      	ldr	r2, [pc, #52]	; (80013ec <spiInit+0x54>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	011b      	lsls	r3, r3, #4
 80013ba:	4413      	add	r3, r2
 80013bc:	3301      	adds	r3, #1
 80013be:	2201      	movs	r2, #1
 80013c0:	701a      	strb	r2, [r3, #0]
        spi_tbl[i].func_tx = NULL;
 80013c2:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <spiInit+0x54>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	011b      	lsls	r3, r3, #4
 80013c8:	4413      	add	r3, r2
 80013ca:	3304      	adds	r3, #4
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
    for(int i=0; i< SPI_MAX_CH;i++) 
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3301      	adds	r3, #1
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	dde5      	ble.n	80013a8 <spiInit+0x10>
    }

    return ret;
 80013dc:	78fb      	ldrb	r3, [r7, #3]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	20000240 	.word	0x20000240

080013f0 <uartInit>:
static uint16_t q_out =0;
static uint8_t q_buf[UART_Q_BUF_MAX];


bool uartInit(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0

  HAL_UART_Receive_DMA(&huart3, &q_buf[0],UART_Q_BUF_MAX);
 80013f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013f8:	4903      	ldr	r1, [pc, #12]	; (8001408 <uartInit+0x18>)
 80013fa:	4804      	ldr	r0, [pc, #16]	; (800140c <uartInit+0x1c>)
 80013fc:	f004 f9af 	bl	800575e <HAL_UART_Receive_DMA>
  return true;
 8001400:	2301      	movs	r3, #1
}
 8001402:	4618      	mov	r0, r3
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000254 	.word	0x20000254
 800140c:	200004fc 	.word	0x200004fc

08001410 <uartWrite>:
uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
 800141c:	73fb      	strb	r3, [r7, #15]
  uint32_t ret =0;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef hal_ret;

  switch(ch)
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	2b03      	cmp	r3, #3
 8001426:	d10e      	bne.n	8001446 <uartWrite+0x36>
  {
    case _DEF_UART_CH3:
      hal_ret = HAL_UART_Transmit(&huart3,p_data,length,100);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	b29a      	uxth	r2, r3
 800142c:	2364      	movs	r3, #100	; 0x64
 800142e:	68b9      	ldr	r1, [r7, #8]
 8001430:	4807      	ldr	r0, [pc, #28]	; (8001450 <uartWrite+0x40>)
 8001432:	f004 f902 	bl	800563a <HAL_UART_Transmit>
 8001436:	4603      	mov	r3, r0
 8001438:	74fb      	strb	r3, [r7, #19]
      //맨마지막 Timeout 인자는 100ms정도로 한다.
      if(hal_ret ==HAL_OK)
 800143a:	7cfb      	ldrb	r3, [r7, #19]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d101      	bne.n	8001444 <uartWrite+0x34>
      {
        ret = length;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	617b      	str	r3, [r7, #20]
      }
      break;
 8001444:	bf00      	nop
  }

  return ret;
 8001446:	697b      	ldr	r3, [r7, #20]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3718      	adds	r7, #24
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	200004fc 	.word	0x200004fc

08001454 <uartAvailable>:
uint32_t uartAvailable(uint8_t ch)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
  uint32_t ret =0;
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	2b03      	cmp	r3, #3
 8001466:	d119      	bne.n	800149c <uartAvailable+0x48>
  {
    case _DEF_UART_CH3:
      q_in = (UART_Q_BUF_MAX - huart3.hdmarx->Instance->NDTR) % UART_Q_BUF_MAX;
 8001468:	4b10      	ldr	r3, [pc, #64]	; (80014ac <uartAvailable+0x58>)
 800146a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	b29b      	uxth	r3, r3
 8001472:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001476:	b29b      	uxth	r3, r3
 8001478:	b2db      	uxtb	r3, r3
 800147a:	b29a      	uxth	r2, r3
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <uartAvailable+0x5c>)
 800147e:	801a      	strh	r2, [r3, #0]
      ret = (UART_Q_BUF_MAX + q_in - q_out) % UART_Q_BUF_MAX;
 8001480:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <uartAvailable+0x5c>)
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001488:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <uartAvailable+0x60>)
 800148a:	8812      	ldrh	r2, [r2, #0]
 800148c:	1a9b      	subs	r3, r3, r2
 800148e:	425a      	negs	r2, r3
 8001490:	b2db      	uxtb	r3, r3
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	bf58      	it	pl
 8001496:	4253      	negpl	r3, r2
 8001498:	60fb      	str	r3, [r7, #12]
      break;
 800149a:	bf00      	nop
  }
  return ret;
 800149c:	68fb      	ldr	r3, [r7, #12]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	200004fc 	.word	0x200004fc
 80014b0:	20000250 	.word	0x20000250
 80014b4:	20000252 	.word	0x20000252

080014b8 <uartRead>:
uint32_t uartRead(uint8_t ch) //한바이트를 읽어옴.
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	2b03      	cmp	r3, #3
 80014ca:	d117      	bne.n	80014fc <uartRead+0x44>
  {
    case _DEF_UART_CH3:
      if(q_out !=q_in)
 80014cc:	4b0f      	ldr	r3, [pc, #60]	; (800150c <uartRead+0x54>)
 80014ce:	881a      	ldrh	r2, [r3, #0]
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <uartRead+0x58>)
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d010      	beq.n	80014fa <uartRead+0x42>
      {
        ret = q_buf[q_out];
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <uartRead+0x54>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	4b0d      	ldr	r3, [pc, #52]	; (8001514 <uartRead+0x5c>)
 80014e0:	5c9b      	ldrb	r3, [r3, r2]
 80014e2:	73fb      	strb	r3, [r7, #15]
        q_out = (q_out +1) %UART_Q_BUF_MAX;
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <uartRead+0x54>)
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	3301      	adds	r3, #1
 80014ea:	425a      	negs	r2, r3
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	bf58      	it	pl
 80014f2:	4253      	negpl	r3, r2
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	4b05      	ldr	r3, [pc, #20]	; (800150c <uartRead+0x54>)
 80014f8:	801a      	strh	r2, [r3, #0]
      }
      break;
 80014fa:	bf00      	nop
  }
  return ret;
 80014fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20000252 	.word	0x20000252
 8001510:	20000250 	.word	0x20000250
 8001514:	20000254 	.word	0x20000254

08001518 <uartPrintf>:



uint32_t uartPrintf(uint8_t ch, const char *fmt, ...)
{
 8001518:	b40e      	push	{r1, r2, r3}
 800151a:	b580      	push	{r7, lr}
 800151c:	b0c7      	sub	sp, #284	; 0x11c
 800151e:	af00      	add	r7, sp, #0
 8001520:	4602      	mov	r2, r0
 8001522:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001526:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800152a:	701a      	strb	r2, [r3, #0]
  uint32_t ret =0;
 800152c:	2300      	movs	r3, #0
 800152e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  va_list arg;
  char print_buf[256];

  /*va_start와 va_end사이에 가변인자 쓰는 함수 넣어야 함*/
  va_start(arg,fmt);
 8001532:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001536:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  int len;
  len = vsnprintf(print_buf, 256, fmt,arg);
 800153a:	f107 000c 	add.w	r0, r7, #12
 800153e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001542:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001546:	f44f 7180 	mov.w	r1, #256	; 0x100
 800154a:	f004 ff2f 	bl	80063ac <vsniprintf>
 800154e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
  va_end(arg);

  if(len >0)
 8001552:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001556:	2b00      	cmp	r3, #0
 8001558:	dd0d      	ble.n	8001576 <uartPrintf+0x5e>
  {
    ret = uartWrite(ch,(uint8_t *)print_buf,len);
 800155a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800155e:	f107 010c 	add.w	r1, r7, #12
 8001562:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001566:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff4f 	bl	8001410 <uartWrite>
 8001572:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  }

  return ret;
 8001576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
}
 800157a:	4618      	mov	r0, r3
 800157c:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8001580:	46bd      	mov	sp, r7
 8001582:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001586:	b003      	add	sp, #12
 8001588:	4770      	bx	lr

0800158a <uartVPrintf>:



uint32_t uartVPrintf(uint8_t ch, const char *fmt, va_list arg)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b0c6      	sub	sp, #280	; 0x118
 800158e:	af00      	add	r7, sp, #0
 8001590:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001594:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001598:	6019      	str	r1, [r3, #0]
 800159a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800159e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80015a8:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80015ac:	4602      	mov	r2, r0
 80015ae:	701a      	strb	r2, [r3, #0]
  uint32_t ret =0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  char print_buf[256];



  int len;
  len = vsnprintf(print_buf, 256, fmt,arg);
 80015b6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80015ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015be:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80015c2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80015c6:	f107 0010 	add.w	r0, r7, #16
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6812      	ldr	r2, [r2, #0]
 80015ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015d2:	f004 feeb 	bl	80063ac <vsniprintf>
 80015d6:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
  va_end(arg);

  if(len >0)
 80015da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80015de:	2b00      	cmp	r3, #0
 80015e0:	dd0d      	ble.n	80015fe <uartVPrintf+0x74>
  {
    ret = uartWrite(ch,(uint8_t *)print_buf,len);
 80015e2:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80015e6:	f107 0110 	add.w	r1, r7, #16
 80015ea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80015ee:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff0b 	bl	8001410 <uartWrite>
 80015fa:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  }

  return ret;
 80015fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
}
 8001602:	4618      	mov	r0, r3
 8001604:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <delay>:


#include "utils.h"

void delay(uint32_t time_ms)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
    HAL_Delay(time_ms);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f001 f82f 	bl	8002678 <HAL_Delay>
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <millis>:

uint32_t millis(void)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8001626:	f001 f81b 	bl	8002660 <HAL_GetTick>
 800162a:	4603      	mov	r3, r0
}
 800162c:	4618      	mov	r0, r3
 800162e:	bd80      	pop	{r7, pc}

08001630 <CLCD_Write_Instruction>:
//	GPIO_InitStruct.Pin = GPIO_PIN_D7;
//	HAL_GPIO_Init(GPIO_D7, &GPIO_InitStruct);
//}

void CLCD_Write_Instruction(unsigned char b)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
	//상위 4비트
	GPIO_D7->ODR = (b & 0x80) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	2b00      	cmp	r3, #0
 8001640:	da04      	bge.n	800164c <CLCD_Write_Instruction+0x1c>
 8001642:	4b59      	ldr	r3, [pc, #356]	; (80017a8 <CLCD_Write_Instruction+0x178>)
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	f043 0310 	orr.w	r3, r3, #16
 800164a:	e003      	b.n	8001654 <CLCD_Write_Instruction+0x24>
 800164c:	4b56      	ldr	r3, [pc, #344]	; (80017a8 <CLCD_Write_Instruction+0x178>)
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	f023 0310 	bic.w	r3, r3, #16
 8001654:	4a54      	ldr	r2, [pc, #336]	; (80017a8 <CLCD_Write_Instruction+0x178>)
 8001656:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x40) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800165e:	2b00      	cmp	r3, #0
 8001660:	d004      	beq.n	800166c <CLCD_Write_Instruction+0x3c>
 8001662:	4b52      	ldr	r3, [pc, #328]	; (80017ac <CLCD_Write_Instruction+0x17c>)
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800166a:	e003      	b.n	8001674 <CLCD_Write_Instruction+0x44>
 800166c:	4b4f      	ldr	r3, [pc, #316]	; (80017ac <CLCD_Write_Instruction+0x17c>)
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001674:	4a4d      	ldr	r2, [pc, #308]	; (80017ac <CLCD_Write_Instruction+0x17c>)
 8001676:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x20) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	f003 0320 	and.w	r3, r3, #32
 800167e:	2b00      	cmp	r3, #0
 8001680:	d004      	beq.n	800168c <CLCD_Write_Instruction+0x5c>
 8001682:	4b4a      	ldr	r3, [pc, #296]	; (80017ac <CLCD_Write_Instruction+0x17c>)
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800168a:	e003      	b.n	8001694 <CLCD_Write_Instruction+0x64>
 800168c:	4b47      	ldr	r3, [pc, #284]	; (80017ac <CLCD_Write_Instruction+0x17c>)
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001694:	4a45      	ldr	r2, [pc, #276]	; (80017ac <CLCD_Write_Instruction+0x17c>)
 8001696:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x10) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	f003 0310 	and.w	r3, r3, #16
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d004      	beq.n	80016ac <CLCD_Write_Instruction+0x7c>
 80016a2:	4b42      	ldr	r3, [pc, #264]	; (80017ac <CLCD_Write_Instruction+0x17c>)
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016aa:	e003      	b.n	80016b4 <CLCD_Write_Instruction+0x84>
 80016ac:	4b3f      	ldr	r3, [pc, #252]	; (80017ac <CLCD_Write_Instruction+0x17c>)
 80016ae:	695b      	ldr	r3, [r3, #20]
 80016b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80016b4:	4a3d      	ldr	r2, [pc, #244]	; (80017ac <CLCD_Write_Instruction+0x17c>)
 80016b6:	6153      	str	r3, [r2, #20]
	
	GPIO_RS->ODR = GPIO_RS->ODR & ~GPIO_PIN_RS; //RS를 Low
 80016b8:	4b3d      	ldr	r3, [pc, #244]	; (80017b0 <CLCD_Write_Instruction+0x180>)
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	4a3c      	ldr	r2, [pc, #240]	; (80017b0 <CLCD_Write_Instruction+0x180>)
 80016be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80016c2:	6153      	str	r3, [r2, #20]
	// GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW를 Low
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 80016c4:	4b39      	ldr	r3, [pc, #228]	; (80017ac <CLCD_Write_Instruction+0x17c>)
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	4a38      	ldr	r2, [pc, #224]	; (80017ac <CLCD_Write_Instruction+0x17c>)
 80016ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80016ce:	6153      	str	r3, [r2, #20]
	
	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN를 High
 80016d0:	4b36      	ldr	r3, [pc, #216]	; (80017ac <CLCD_Write_Instruction+0x17c>)
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	4a35      	ldr	r2, [pc, #212]	; (80017ac <CLCD_Write_Instruction+0x17c>)
 80016d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016da:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 80016dc:	4b33      	ldr	r3, [pc, #204]	; (80017ac <CLCD_Write_Instruction+0x17c>)
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	4a32      	ldr	r2, [pc, #200]	; (80017ac <CLCD_Write_Instruction+0x17c>)
 80016e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80016e6:	6153      	str	r3, [r2, #20]
	
	//하위 4비트
	GPIO_D7->ODR = (b & 0x08) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d004      	beq.n	80016fc <CLCD_Write_Instruction+0xcc>
 80016f2:	4b2d      	ldr	r3, [pc, #180]	; (80017a8 <CLCD_Write_Instruction+0x178>)
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	f043 0310 	orr.w	r3, r3, #16
 80016fa:	e003      	b.n	8001704 <CLCD_Write_Instruction+0xd4>
 80016fc:	4b2a      	ldr	r3, [pc, #168]	; (80017a8 <CLCD_Write_Instruction+0x178>)
 80016fe:	695b      	ldr	r3, [r3, #20]
 8001700:	f023 0310 	bic.w	r3, r3, #16
 8001704:	4a28      	ldr	r2, [pc, #160]	; (80017a8 <CLCD_Write_Instruction+0x178>)
 8001706:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x04) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	f003 0304 	and.w	r3, r3, #4
 800170e:	2b00      	cmp	r3, #0
 8001710:	d004      	beq.n	800171c <CLCD_Write_Instruction+0xec>
 8001712:	4b26      	ldr	r3, [pc, #152]	; (80017ac <CLCD_Write_Instruction+0x17c>)
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800171a:	e003      	b.n	8001724 <CLCD_Write_Instruction+0xf4>
 800171c:	4b23      	ldr	r3, [pc, #140]	; (80017ac <CLCD_Write_Instruction+0x17c>)
 800171e:	695b      	ldr	r3, [r3, #20]
 8001720:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001724:	4a21      	ldr	r2, [pc, #132]	; (80017ac <CLCD_Write_Instruction+0x17c>)
 8001726:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x02) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d004      	beq.n	800173c <CLCD_Write_Instruction+0x10c>
 8001732:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <CLCD_Write_Instruction+0x17c>)
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800173a:	e003      	b.n	8001744 <CLCD_Write_Instruction+0x114>
 800173c:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <CLCD_Write_Instruction+0x17c>)
 800173e:	695b      	ldr	r3, [r3, #20]
 8001740:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001744:	4a19      	ldr	r2, [pc, #100]	; (80017ac <CLCD_Write_Instruction+0x17c>)
 8001746:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x01) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	d004      	beq.n	800175c <CLCD_Write_Instruction+0x12c>
 8001752:	4b16      	ldr	r3, [pc, #88]	; (80017ac <CLCD_Write_Instruction+0x17c>)
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800175a:	e003      	b.n	8001764 <CLCD_Write_Instruction+0x134>
 800175c:	4b13      	ldr	r3, [pc, #76]	; (80017ac <CLCD_Write_Instruction+0x17c>)
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001764:	4a11      	ldr	r2, [pc, #68]	; (80017ac <CLCD_Write_Instruction+0x17c>)
 8001766:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR & ~GPIO_PIN_RS; //RS를 Low
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <CLCD_Write_Instruction+0x180>)
 800176a:	695b      	ldr	r3, [r3, #20]
 800176c:	4a10      	ldr	r2, [pc, #64]	; (80017b0 <CLCD_Write_Instruction+0x180>)
 800176e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001772:	6153      	str	r3, [r2, #20]
	// GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW를 Low
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 8001774:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <CLCD_Write_Instruction+0x17c>)
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	4a0c      	ldr	r2, [pc, #48]	; (80017ac <CLCD_Write_Instruction+0x17c>)
 800177a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800177e:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN를 High
 8001780:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <CLCD_Write_Instruction+0x17c>)
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	4a09      	ldr	r2, [pc, #36]	; (80017ac <CLCD_Write_Instruction+0x17c>)
 8001786:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800178a:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 800178c:	4b07      	ldr	r3, [pc, #28]	; (80017ac <CLCD_Write_Instruction+0x17c>)
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	4a06      	ldr	r2, [pc, #24]	; (80017ac <CLCD_Write_Instruction+0x17c>)
 8001792:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001796:	6153      	str	r3, [r2, #20]

	HAL_Delay(1);
 8001798:	2001      	movs	r0, #1
 800179a:	f000 ff6d 	bl	8002678 <HAL_Delay>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40020800 	.word	0x40020800
 80017ac:	40020400 	.word	0x40020400
 80017b0:	40020000 	.word	0x40020000

080017b4 <CLCD_Write_Display>:

void CLCD_Write_Display(unsigned char b)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
	//상위 4비트
	GPIO_D7->ODR = (b & 0x80) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	da04      	bge.n	80017d0 <CLCD_Write_Display+0x1c>
 80017c6:	4b59      	ldr	r3, [pc, #356]	; (800192c <CLCD_Write_Display+0x178>)
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	f043 0310 	orr.w	r3, r3, #16
 80017ce:	e003      	b.n	80017d8 <CLCD_Write_Display+0x24>
 80017d0:	4b56      	ldr	r3, [pc, #344]	; (800192c <CLCD_Write_Display+0x178>)
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	f023 0310 	bic.w	r3, r3, #16
 80017d8:	4a54      	ldr	r2, [pc, #336]	; (800192c <CLCD_Write_Display+0x178>)
 80017da:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x40) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d004      	beq.n	80017f0 <CLCD_Write_Display+0x3c>
 80017e6:	4b52      	ldr	r3, [pc, #328]	; (8001930 <CLCD_Write_Display+0x17c>)
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017ee:	e003      	b.n	80017f8 <CLCD_Write_Display+0x44>
 80017f0:	4b4f      	ldr	r3, [pc, #316]	; (8001930 <CLCD_Write_Display+0x17c>)
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80017f8:	4a4d      	ldr	r2, [pc, #308]	; (8001930 <CLCD_Write_Display+0x17c>)
 80017fa:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x20) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	f003 0320 	and.w	r3, r3, #32
 8001802:	2b00      	cmp	r3, #0
 8001804:	d004      	beq.n	8001810 <CLCD_Write_Display+0x5c>
 8001806:	4b4a      	ldr	r3, [pc, #296]	; (8001930 <CLCD_Write_Display+0x17c>)
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800180e:	e003      	b.n	8001818 <CLCD_Write_Display+0x64>
 8001810:	4b47      	ldr	r3, [pc, #284]	; (8001930 <CLCD_Write_Display+0x17c>)
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001818:	4a45      	ldr	r2, [pc, #276]	; (8001930 <CLCD_Write_Display+0x17c>)
 800181a:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x10) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	f003 0310 	and.w	r3, r3, #16
 8001822:	2b00      	cmp	r3, #0
 8001824:	d004      	beq.n	8001830 <CLCD_Write_Display+0x7c>
 8001826:	4b42      	ldr	r3, [pc, #264]	; (8001930 <CLCD_Write_Display+0x17c>)
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800182e:	e003      	b.n	8001838 <CLCD_Write_Display+0x84>
 8001830:	4b3f      	ldr	r3, [pc, #252]	; (8001930 <CLCD_Write_Display+0x17c>)
 8001832:	695b      	ldr	r3, [r3, #20]
 8001834:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001838:	4a3d      	ldr	r2, [pc, #244]	; (8001930 <CLCD_Write_Display+0x17c>)
 800183a:	6153      	str	r3, [r2, #20]
	
	GPIO_RS->ODR = GPIO_RS->ODR | GPIO_PIN_RS; //RS를 High
 800183c:	4b3d      	ldr	r3, [pc, #244]	; (8001934 <CLCD_Write_Display+0x180>)
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	4a3c      	ldr	r2, [pc, #240]	; (8001934 <CLCD_Write_Display+0x180>)
 8001842:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001846:	6153      	str	r3, [r2, #20]
	// GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW를 Low
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 8001848:	4b39      	ldr	r3, [pc, #228]	; (8001930 <CLCD_Write_Display+0x17c>)
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	4a38      	ldr	r2, [pc, #224]	; (8001930 <CLCD_Write_Display+0x17c>)
 800184e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001852:	6153      	str	r3, [r2, #20]
	
	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN를 High
 8001854:	4b36      	ldr	r3, [pc, #216]	; (8001930 <CLCD_Write_Display+0x17c>)
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	4a35      	ldr	r2, [pc, #212]	; (8001930 <CLCD_Write_Display+0x17c>)
 800185a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800185e:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 8001860:	4b33      	ldr	r3, [pc, #204]	; (8001930 <CLCD_Write_Display+0x17c>)
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	4a32      	ldr	r2, [pc, #200]	; (8001930 <CLCD_Write_Display+0x17c>)
 8001866:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800186a:	6153      	str	r3, [r2, #20]
	
	//하위 4비트
	GPIO_D7->ODR = (b & 0x08) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	f003 0308 	and.w	r3, r3, #8
 8001872:	2b00      	cmp	r3, #0
 8001874:	d004      	beq.n	8001880 <CLCD_Write_Display+0xcc>
 8001876:	4b2d      	ldr	r3, [pc, #180]	; (800192c <CLCD_Write_Display+0x178>)
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	f043 0310 	orr.w	r3, r3, #16
 800187e:	e003      	b.n	8001888 <CLCD_Write_Display+0xd4>
 8001880:	4b2a      	ldr	r3, [pc, #168]	; (800192c <CLCD_Write_Display+0x178>)
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	f023 0310 	bic.w	r3, r3, #16
 8001888:	4a28      	ldr	r2, [pc, #160]	; (800192c <CLCD_Write_Display+0x178>)
 800188a:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x04) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	f003 0304 	and.w	r3, r3, #4
 8001892:	2b00      	cmp	r3, #0
 8001894:	d004      	beq.n	80018a0 <CLCD_Write_Display+0xec>
 8001896:	4b26      	ldr	r3, [pc, #152]	; (8001930 <CLCD_Write_Display+0x17c>)
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800189e:	e003      	b.n	80018a8 <CLCD_Write_Display+0xf4>
 80018a0:	4b23      	ldr	r3, [pc, #140]	; (8001930 <CLCD_Write_Display+0x17c>)
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80018a8:	4a21      	ldr	r2, [pc, #132]	; (8001930 <CLCD_Write_Display+0x17c>)
 80018aa:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x02) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d004      	beq.n	80018c0 <CLCD_Write_Display+0x10c>
 80018b6:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <CLCD_Write_Display+0x17c>)
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018be:	e003      	b.n	80018c8 <CLCD_Write_Display+0x114>
 80018c0:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <CLCD_Write_Display+0x17c>)
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018c8:	4a19      	ldr	r2, [pc, #100]	; (8001930 <CLCD_Write_Display+0x17c>)
 80018ca:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x01) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d004      	beq.n	80018e0 <CLCD_Write_Display+0x12c>
 80018d6:	4b16      	ldr	r3, [pc, #88]	; (8001930 <CLCD_Write_Display+0x17c>)
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018de:	e003      	b.n	80018e8 <CLCD_Write_Display+0x134>
 80018e0:	4b13      	ldr	r3, [pc, #76]	; (8001930 <CLCD_Write_Display+0x17c>)
 80018e2:	695b      	ldr	r3, [r3, #20]
 80018e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80018e8:	4a11      	ldr	r2, [pc, #68]	; (8001930 <CLCD_Write_Display+0x17c>)
 80018ea:	6153      	str	r3, [r2, #20]
	
	GPIO_RS->ODR = GPIO_RS->ODR | GPIO_PIN_RS; //RS를 High
 80018ec:	4b11      	ldr	r3, [pc, #68]	; (8001934 <CLCD_Write_Display+0x180>)
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	4a10      	ldr	r2, [pc, #64]	; (8001934 <CLCD_Write_Display+0x180>)
 80018f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018f6:	6153      	str	r3, [r2, #20]
	// GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW를 Low
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 80018f8:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <CLCD_Write_Display+0x17c>)
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	4a0c      	ldr	r2, [pc, #48]	; (8001930 <CLCD_Write_Display+0x17c>)
 80018fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001902:	6153      	str	r3, [r2, #20]
	
	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN를 High
 8001904:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <CLCD_Write_Display+0x17c>)
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	4a09      	ldr	r2, [pc, #36]	; (8001930 <CLCD_Write_Display+0x17c>)
 800190a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800190e:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 8001910:	4b07      	ldr	r3, [pc, #28]	; (8001930 <CLCD_Write_Display+0x17c>)
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	4a06      	ldr	r2, [pc, #24]	; (8001930 <CLCD_Write_Display+0x17c>)
 8001916:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800191a:	6153      	str	r3, [r2, #20]
	
	HAL_Delay(1);
 800191c:	2001      	movs	r0, #1
 800191e:	f000 feab 	bl	8002678 <HAL_Delay>
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40020800 	.word	0x40020800
 8001930:	40020400 	.word	0x40020400
 8001934:	40020000 	.word	0x40020000

08001938 <CLCD_Gotoxy>:


void CLCD_Gotoxy(unsigned char x, unsigned char y)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	460a      	mov	r2, r1
 8001942:	71fb      	strb	r3, [r7, #7]
 8001944:	4613      	mov	r3, r2
 8001946:	71bb      	strb	r3, [r7, #6]
	// 16 * 2 Character LCD
	switch(y)
 8001948:	79bb      	ldrb	r3, [r7, #6]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d002      	beq.n	8001954 <CLCD_Gotoxy+0x1c>
 800194e:	2b01      	cmp	r3, #1
 8001950:	d007      	beq.n	8001962 <CLCD_Gotoxy+0x2a>
		case 0 : CLCD_Write_Instruction(0x80 + x); break;
		case 1 : CLCD_Write_Instruction(0xC0 + x); break;
		//case 2 : instruction_out(0x90+x); break;
		//case 3 : instruction_out(0xd0+x); break;
	}
}
 8001952:	e00d      	b.n	8001970 <CLCD_Gotoxy+0x38>
		case 0 : CLCD_Write_Instruction(0x80 + x); break;
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	3b80      	subs	r3, #128	; 0x80
 8001958:	b2db      	uxtb	r3, r3
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fe68 	bl	8001630 <CLCD_Write_Instruction>
 8001960:	e006      	b.n	8001970 <CLCD_Gotoxy+0x38>
		case 1 : CLCD_Write_Instruction(0xC0 + x); break;
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	3b40      	subs	r3, #64	; 0x40
 8001966:	b2db      	uxtb	r3, r3
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fe61 	bl	8001630 <CLCD_Write_Instruction>
 800196e:	bf00      	nop
}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <CLCD_Puts>:

void CLCD_Puts(unsigned char x, unsigned char y, unsigned char *str)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	603a      	str	r2, [r7, #0]
 8001982:	71fb      	strb	r3, [r7, #7]
 8001984:	460b      	mov	r3, r1
 8001986:	71bb      	strb	r3, [r7, #6]
	unsigned int i=0;
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]

	CLCD_Gotoxy(x,y);
 800198c:	79ba      	ldrb	r2, [r7, #6]
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	4611      	mov	r1, r2
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff ffd0 	bl	8001938 <CLCD_Gotoxy>
	do
	{
		CLCD_Write_Display(str[i]);
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4413      	add	r3, r2
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff07 	bl	80017b4 <CLCD_Write_Display>
	}
	while(str[++i]!='\0');
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	3301      	adds	r3, #1
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4413      	add	r3, r2
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1ef      	bne.n	8001998 <CLCD_Puts+0x20>
}
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <CLCD_Init>:

void CLCD_Init(void)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 80019c6:	2064      	movs	r0, #100	; 0x64
 80019c8:	f000 fe56 	bl	8002678 <HAL_Delay>
	CLCD_Write_Instruction(0x28);
 80019cc:	2028      	movs	r0, #40	; 0x28
 80019ce:	f7ff fe2f 	bl	8001630 <CLCD_Write_Instruction>
	HAL_Delay(10);
 80019d2:	200a      	movs	r0, #10
 80019d4:	f000 fe50 	bl	8002678 <HAL_Delay>
	CLCD_Write_Instruction(0x28);
 80019d8:	2028      	movs	r0, #40	; 0x28
 80019da:	f7ff fe29 	bl	8001630 <CLCD_Write_Instruction>
	HAL_Delay(10);
 80019de:	200a      	movs	r0, #10
 80019e0:	f000 fe4a 	bl	8002678 <HAL_Delay>
	CLCD_Write_Instruction(0x0C);
 80019e4:	200c      	movs	r0, #12
 80019e6:	f7ff fe23 	bl	8001630 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x06);
 80019ea:	2006      	movs	r0, #6
 80019ec:	f7ff fe20 	bl	8001630 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x02);
 80019f0:	2002      	movs	r0, #2
 80019f2:	f7ff fe1d 	bl	8001630 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x01);
 80019f6:	2001      	movs	r0, #1
 80019f8:	f7ff fe1a 	bl	8001630 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x01);
 80019fc:	2001      	movs	r0, #1
 80019fe:	f7ff fe17 	bl	8001630 <CLCD_Write_Instruction>
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <CLCD_Clear>:

void CLCD_Clear(void)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	af00      	add	r7, sp, #0
	CLCD_Write_Instruction(0x01);
 8001a0a:	2001      	movs	r0, #1
 8001a0c:	f7ff fe10 	bl	8001630 <CLCD_Write_Instruction>
	HAL_Delay(10);
 8001a10:	200a      	movs	r0, #10
 8001a12:	f000 fe31 	bl	8002678 <HAL_Delay>
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */  HAL_Init();
 8001a1e:	f000 fdb9 	bl	8002594 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a22:	f000 f811 	bl	8001a48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a26:	f000 fa27 	bl	8001e78 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a2a:	f000 f9e7 	bl	8001dfc <MX_DMA_Init>
  MX_TIM1_Init();
 8001a2e:	f000 f91b 	bl	8001c68 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001a32:	f000 f873 	bl	8001b1c <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8001a36:	f000 f9b7 	bl	8001da8 <MX_USART3_UART_Init>
  MX_SPI4_Init();
 8001a3a:	f000 f8df 	bl	8001bfc <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  apInit();
 8001a3e:	f7fe fdb5 	bl	80005ac <apInit>
  apMain();
 8001a42:	f7fe fdeb 	bl	800061c <apMain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a46:	e7fe      	b.n	8001a46 <main+0x2c>

08001a48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b094      	sub	sp, #80	; 0x50
 8001a4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a4e:	f107 0320 	add.w	r3, r7, #32
 8001a52:	2230      	movs	r2, #48	; 0x30
 8001a54:	2100      	movs	r1, #0
 8001a56:	4618      	mov	r0, r3
 8001a58:	f004 fcb6 	bl	80063c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a5c:	f107 030c 	add.w	r3, r7, #12
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	4b28      	ldr	r3, [pc, #160]	; (8001b14 <SystemClock_Config+0xcc>)
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	4a27      	ldr	r2, [pc, #156]	; (8001b14 <SystemClock_Config+0xcc>)
 8001a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7c:	4b25      	ldr	r3, [pc, #148]	; (8001b14 <SystemClock_Config+0xcc>)
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a88:	2300      	movs	r3, #0
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <SystemClock_Config+0xd0>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a21      	ldr	r2, [pc, #132]	; (8001b18 <SystemClock_Config+0xd0>)
 8001a92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a96:	6013      	str	r3, [r2, #0]
 8001a98:	4b1f      	ldr	r3, [pc, #124]	; (8001b18 <SystemClock_Config+0xd0>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001aa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ab2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001ab8:	230f      	movs	r3, #15
 8001aba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001abc:	23c0      	movs	r3, #192	; 0xc0
 8001abe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ac4:	2304      	movs	r3, #4
 8001ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ac8:	f107 0320 	add.w	r3, r7, #32
 8001acc:	4618      	mov	r0, r3
 8001ace:	f002 f89b 	bl	8003c08 <HAL_RCC_OscConfig>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ad8:	f000 fa96 	bl	8002008 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001adc:	230f      	movs	r3, #15
 8001ade:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ae8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001aec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001aee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001af4:	f107 030c 	add.w	r3, r7, #12
 8001af8:	2105      	movs	r1, #5
 8001afa:	4618      	mov	r0, r3
 8001afc:	f002 fafc 	bl	80040f8 <HAL_RCC_ClockConfig>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b06:	f000 fa7f 	bl	8002008 <Error_Handler>
  }
}
 8001b0a:	bf00      	nop
 8001b0c:	3750      	adds	r7, #80	; 0x50
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40007000 	.word	0x40007000

08001b1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b22:	463b      	mov	r3, r7
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b2e:	4b2f      	ldr	r3, [pc, #188]	; (8001bec <MX_ADC1_Init+0xd0>)
 8001b30:	4a2f      	ldr	r2, [pc, #188]	; (8001bf0 <MX_ADC1_Init+0xd4>)
 8001b32:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b34:	4b2d      	ldr	r3, [pc, #180]	; (8001bec <MX_ADC1_Init+0xd0>)
 8001b36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b3a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b3c:	4b2b      	ldr	r3, [pc, #172]	; (8001bec <MX_ADC1_Init+0xd0>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001b42:	4b2a      	ldr	r3, [pc, #168]	; (8001bec <MX_ADC1_Init+0xd0>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b48:	4b28      	ldr	r3, [pc, #160]	; (8001bec <MX_ADC1_Init+0xd0>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b4e:	4b27      	ldr	r3, [pc, #156]	; (8001bec <MX_ADC1_Init+0xd0>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b56:	4b25      	ldr	r3, [pc, #148]	; (8001bec <MX_ADC1_Init+0xd0>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b5c:	4b23      	ldr	r3, [pc, #140]	; (8001bec <MX_ADC1_Init+0xd0>)
 8001b5e:	4a25      	ldr	r2, [pc, #148]	; (8001bf4 <MX_ADC1_Init+0xd8>)
 8001b60:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b62:	4b22      	ldr	r3, [pc, #136]	; (8001bec <MX_ADC1_Init+0xd0>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001b68:	4b20      	ldr	r3, [pc, #128]	; (8001bec <MX_ADC1_Init+0xd0>)
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b6e:	4b1f      	ldr	r3, [pc, #124]	; (8001bec <MX_ADC1_Init+0xd0>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b76:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <MX_ADC1_Init+0xd0>)
 8001b78:	2201      	movs	r2, #1
 8001b7a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b7c:	481b      	ldr	r0, [pc, #108]	; (8001bec <MX_ADC1_Init+0xd0>)
 8001b7e:	f000 fd9f 	bl	80026c0 <HAL_ADC_Init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b88:	f000 fa3e 	bl	8002008 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001b8c:	2304      	movs	r3, #4
 8001b8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b90:	2301      	movs	r3, #1
 8001b92:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001b94:	2307      	movs	r3, #7
 8001b96:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b98:	463b      	mov	r3, r7
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4813      	ldr	r0, [pc, #76]	; (8001bec <MX_ADC1_Init+0xd0>)
 8001b9e:	f000 ff01 	bl	80029a4 <HAL_ADC_ConfigChannel>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001ba8:	f000 fa2e 	bl	8002008 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001bac:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <MX_ADC1_Init+0xdc>)
 8001bae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bb4:	463b      	mov	r3, r7
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	480c      	ldr	r0, [pc, #48]	; (8001bec <MX_ADC1_Init+0xd0>)
 8001bba:	f000 fef3 	bl	80029a4 <HAL_ADC_ConfigChannel>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001bc4:	f000 fa20 	bl	8002008 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001bc8:	2311      	movs	r3, #17
 8001bca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bd0:	463b      	mov	r3, r7
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4805      	ldr	r0, [pc, #20]	; (8001bec <MX_ADC1_Init+0xd0>)
 8001bd6:	f000 fee5 	bl	80029a4 <HAL_ADC_ConfigChannel>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001be0:	f000 fa12 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001be4:	bf00      	nop
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000354 	.word	0x20000354
 8001bf0:	40012000 	.word	0x40012000
 8001bf4:	0f000001 	.word	0x0f000001
 8001bf8:	10000012 	.word	0x10000012

08001bfc <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001c00:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <MX_SPI4_Init+0x64>)
 8001c02:	4a18      	ldr	r2, [pc, #96]	; (8001c64 <MX_SPI4_Init+0x68>)
 8001c04:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001c06:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <MX_SPI4_Init+0x64>)
 8001c08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c0c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001c0e:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <MX_SPI4_Init+0x64>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c14:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <MX_SPI4_Init+0x64>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c1a:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <MX_SPI4_Init+0x64>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c20:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <MX_SPI4_Init+0x64>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001c26:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <MX_SPI4_Init+0x64>)
 8001c28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c2c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <MX_SPI4_Init+0x64>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c34:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <MX_SPI4_Init+0x64>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c3a:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <MX_SPI4_Init+0x64>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c40:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <MX_SPI4_Init+0x64>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <MX_SPI4_Init+0x64>)
 8001c48:	220a      	movs	r2, #10
 8001c4a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001c4c:	4804      	ldr	r0, [pc, #16]	; (8001c60 <MX_SPI4_Init+0x64>)
 8001c4e:	f002 fc33 	bl	80044b8 <HAL_SPI_Init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001c58:	f000 f9d6 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	200003fc 	.word	0x200003fc
 8001c64:	40013400 	.word	0x40013400

08001c68 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b096      	sub	sp, #88	; 0x58
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c6e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c7c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	609a      	str	r2, [r3, #8]
 8001c92:	60da      	str	r2, [r3, #12]
 8001c94:	611a      	str	r2, [r3, #16]
 8001c96:	615a      	str	r2, [r3, #20]
 8001c98:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f004 fb91 	bl	80063c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ca6:	4b3e      	ldr	r3, [pc, #248]	; (8001da0 <MX_TIM1_Init+0x138>)
 8001ca8:	4a3e      	ldr	r2, [pc, #248]	; (8001da4 <MX_TIM1_Init+0x13c>)
 8001caa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 159;
 8001cac:	4b3c      	ldr	r3, [pc, #240]	; (8001da0 <MX_TIM1_Init+0x138>)
 8001cae:	229f      	movs	r2, #159	; 0x9f
 8001cb0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb2:	4b3b      	ldr	r3, [pc, #236]	; (8001da0 <MX_TIM1_Init+0x138>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8001cb8:	4b39      	ldr	r3, [pc, #228]	; (8001da0 <MX_TIM1_Init+0x138>)
 8001cba:	2263      	movs	r2, #99	; 0x63
 8001cbc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cbe:	4b38      	ldr	r3, [pc, #224]	; (8001da0 <MX_TIM1_Init+0x138>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cc4:	4b36      	ldr	r3, [pc, #216]	; (8001da0 <MX_TIM1_Init+0x138>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cca:	4b35      	ldr	r3, [pc, #212]	; (8001da0 <MX_TIM1_Init+0x138>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cd0:	4833      	ldr	r0, [pc, #204]	; (8001da0 <MX_TIM1_Init+0x138>)
 8001cd2:	f002 fd8d 	bl	80047f0 <HAL_TIM_Base_Init>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001cdc:	f000 f994 	bl	8002008 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ce6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cea:	4619      	mov	r1, r3
 8001cec:	482c      	ldr	r0, [pc, #176]	; (8001da0 <MX_TIM1_Init+0x138>)
 8001cee:	f002 ffb1 	bl	8004c54 <HAL_TIM_ConfigClockSource>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001cf8:	f000 f986 	bl	8002008 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001cfc:	4828      	ldr	r0, [pc, #160]	; (8001da0 <MX_TIM1_Init+0x138>)
 8001cfe:	f002 fdc6 	bl	800488e <HAL_TIM_PWM_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001d08:	f000 f97e 	bl	8002008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d10:	2300      	movs	r3, #0
 8001d12:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d14:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4821      	ldr	r0, [pc, #132]	; (8001da0 <MX_TIM1_Init+0x138>)
 8001d1c:	f003 fb72 	bl	8005404 <HAL_TIMEx_MasterConfigSynchronization>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001d26:	f000 f96f 	bl	8002008 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d2a:	2360      	movs	r3, #96	; 0x60
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d32:	2300      	movs	r3, #0
 8001d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d36:	2300      	movs	r3, #0
 8001d38:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d42:	2300      	movs	r3, #0
 8001d44:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4814      	ldr	r0, [pc, #80]	; (8001da0 <MX_TIM1_Init+0x138>)
 8001d50:	f002 febe 	bl	8004ad0 <HAL_TIM_PWM_ConfigChannel>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001d5a:	f000 f955 	bl	8002008 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d76:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4807      	ldr	r0, [pc, #28]	; (8001da0 <MX_TIM1_Init+0x138>)
 8001d82:	f003 fbbb 	bl	80054fc <HAL_TIMEx_ConfigBreakDeadTime>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001d8c:	f000 f93c 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d90:	4803      	ldr	r0, [pc, #12]	; (8001da0 <MX_TIM1_Init+0x138>)
 8001d92:	f000 fa85 	bl	80022a0 <HAL_TIM_MspPostInit>

}
 8001d96:	bf00      	nop
 8001d98:	3758      	adds	r7, #88	; 0x58
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	200004b4 	.word	0x200004b4
 8001da4:	40010000 	.word	0x40010000

08001da8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001dac:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <MX_USART3_UART_Init+0x4c>)
 8001dae:	4a12      	ldr	r2, [pc, #72]	; (8001df8 <MX_USART3_UART_Init+0x50>)
 8001db0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001db2:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <MX_USART3_UART_Init+0x4c>)
 8001db4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001db8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001dba:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <MX_USART3_UART_Init+0x4c>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <MX_USART3_UART_Init+0x4c>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001dc6:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <MX_USART3_UART_Init+0x4c>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001dcc:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <MX_USART3_UART_Init+0x4c>)
 8001dce:	220c      	movs	r2, #12
 8001dd0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dd2:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <MX_USART3_UART_Init+0x4c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <MX_USART3_UART_Init+0x4c>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001dde:	4805      	ldr	r0, [pc, #20]	; (8001df4 <MX_USART3_UART_Init+0x4c>)
 8001de0:	f003 fbde 	bl	80055a0 <HAL_UART_Init>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001dea:	f000 f90d 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	200004fc 	.word	0x200004fc
 8001df8:	40004800 	.word	0x40004800

08001dfc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	607b      	str	r3, [r7, #4]
 8001e06:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <MX_DMA_Init+0x78>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a1a      	ldr	r2, [pc, #104]	; (8001e74 <MX_DMA_Init+0x78>)
 8001e0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <MX_DMA_Init+0x78>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e1a:	607b      	str	r3, [r7, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	603b      	str	r3, [r7, #0]
 8001e22:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <MX_DMA_Init+0x78>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a13      	ldr	r2, [pc, #76]	; (8001e74 <MX_DMA_Init+0x78>)
 8001e28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <MX_DMA_Init+0x78>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	200c      	movs	r0, #12
 8001e40:	f001 f93b 	bl	80030ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001e44:	200c      	movs	r0, #12
 8001e46:	f001 f954 	bl	80030f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	2038      	movs	r0, #56	; 0x38
 8001e50:	f001 f933 	bl	80030ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001e54:	2038      	movs	r0, #56	; 0x38
 8001e56:	f001 f94c 	bl	80030f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	2039      	movs	r0, #57	; 0x39
 8001e60:	f001 f92b 	bl	80030ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001e64:	2039      	movs	r0, #57	; 0x39
 8001e66:	f001 f944 	bl	80030f2 <HAL_NVIC_EnableIRQ>

}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40023800 	.word	0x40023800

08001e78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08c      	sub	sp, #48	; 0x30
 8001e7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7e:	f107 031c 	add.w	r3, r7, #28
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	609a      	str	r2, [r3, #8]
 8001e8a:	60da      	str	r2, [r3, #12]
 8001e8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61bb      	str	r3, [r7, #24]
 8001e92:	4b59      	ldr	r3, [pc, #356]	; (8001ff8 <MX_GPIO_Init+0x180>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	4a58      	ldr	r2, [pc, #352]	; (8001ff8 <MX_GPIO_Init+0x180>)
 8001e98:	f043 0310 	orr.w	r3, r3, #16
 8001e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9e:	4b56      	ldr	r3, [pc, #344]	; (8001ff8 <MX_GPIO_Init+0x180>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	f003 0310 	and.w	r3, r3, #16
 8001ea6:	61bb      	str	r3, [r7, #24]
 8001ea8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	4b52      	ldr	r3, [pc, #328]	; (8001ff8 <MX_GPIO_Init+0x180>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	4a51      	ldr	r2, [pc, #324]	; (8001ff8 <MX_GPIO_Init+0x180>)
 8001eb4:	f043 0304 	orr.w	r3, r3, #4
 8001eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eba:	4b4f      	ldr	r3, [pc, #316]	; (8001ff8 <MX_GPIO_Init+0x180>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	4b4b      	ldr	r3, [pc, #300]	; (8001ff8 <MX_GPIO_Init+0x180>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	4a4a      	ldr	r2, [pc, #296]	; (8001ff8 <MX_GPIO_Init+0x180>)
 8001ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed6:	4b48      	ldr	r3, [pc, #288]	; (8001ff8 <MX_GPIO_Init+0x180>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	4b44      	ldr	r3, [pc, #272]	; (8001ff8 <MX_GPIO_Init+0x180>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	4a43      	ldr	r2, [pc, #268]	; (8001ff8 <MX_GPIO_Init+0x180>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef2:	4b41      	ldr	r3, [pc, #260]	; (8001ff8 <MX_GPIO_Init+0x180>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	4b3d      	ldr	r3, [pc, #244]	; (8001ff8 <MX_GPIO_Init+0x180>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	4a3c      	ldr	r2, [pc, #240]	; (8001ff8 <MX_GPIO_Init+0x180>)
 8001f08:	f043 0302 	orr.w	r3, r3, #2
 8001f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0e:	4b3a      	ldr	r3, [pc, #232]	; (8001ff8 <MX_GPIO_Init+0x180>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	60bb      	str	r3, [r7, #8]
 8001f18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	607b      	str	r3, [r7, #4]
 8001f1e:	4b36      	ldr	r3, [pc, #216]	; (8001ff8 <MX_GPIO_Init+0x180>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	4a35      	ldr	r2, [pc, #212]	; (8001ff8 <MX_GPIO_Init+0x180>)
 8001f24:	f043 0308 	orr.w	r3, r3, #8
 8001f28:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2a:	4b33      	ldr	r3, [pc, #204]	; (8001ff8 <MX_GPIO_Init+0x180>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	f003 0308 	and.w	r3, r3, #8
 8001f32:	607b      	str	r3, [r7, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_11, GPIO_PIN_SET);
 8001f36:	2201      	movs	r2, #1
 8001f38:	f640 010c 	movw	r1, #2060	; 0x80c
 8001f3c:	482f      	ldr	r0, [pc, #188]	; (8001ffc <MX_GPIO_Init+0x184>)
 8001f3e:	f001 fe49 	bl	8003bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001f42:	2200      	movs	r2, #0
 8001f44:	2110      	movs	r1, #16
 8001f46:	482e      	ldr	r0, [pc, #184]	; (8002000 <MX_GPIO_Init+0x188>)
 8001f48:	f001 fe44 	bl	8003bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f44f 4168 	mov.w	r1, #59392	; 0xe800
 8001f52:	482c      	ldr	r0, [pc, #176]	; (8002004 <MX_GPIO_Init+0x18c>)
 8001f54:	f001 fe3e 	bl	8003bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8001f5e:	4827      	ldr	r0, [pc, #156]	; (8001ffc <MX_GPIO_Init+0x184>)
 8001f60:	f001 fe38 	bl	8003bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f72:	f107 031c 	add.w	r3, r7, #28
 8001f76:	4619      	mov	r1, r3
 8001f78:	4821      	ldr	r0, [pc, #132]	; (8002000 <MX_GPIO_Init+0x188>)
 8001f7a:	f001 fc67 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA11 PA12
                           PA13 PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_12
 8001f7e:	f647 030c 	movw	r3, #30732	; 0x780c
 8001f82:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f84:	2301      	movs	r3, #1
 8001f86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f90:	f107 031c 	add.w	r3, r7, #28
 8001f94:	4619      	mov	r1, r3
 8001f96:	4819      	ldr	r0, [pc, #100]	; (8001ffc <MX_GPIO_Init+0x184>)
 8001f98:	f001 fc58 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f9c:	2310      	movs	r3, #16
 8001f9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fac:	f107 031c 	add.w	r3, r7, #28
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4813      	ldr	r0, [pc, #76]	; (8002000 <MX_GPIO_Init+0x188>)
 8001fb4:	f001 fc4a 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001fb8:	f44f 4368 	mov.w	r3, #59392	; 0xe800
 8001fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fca:	f107 031c 	add.w	r3, r7, #28
 8001fce:	4619      	mov	r1, r3
 8001fd0:	480c      	ldr	r0, [pc, #48]	; (8002004 <MX_GPIO_Init+0x18c>)
 8001fd2:	f001 fc3b 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe4:	f107 031c 	add.w	r3, r7, #28
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4806      	ldr	r0, [pc, #24]	; (8002004 <MX_GPIO_Init+0x18c>)
 8001fec:	f001 fc2e 	bl	800384c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ff0:	bf00      	nop
 8001ff2:	3730      	adds	r7, #48	; 0x30
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40020000 	.word	0x40020000
 8002000:	40020800 	.word	0x40020800
 8002004:	40020400 	.word	0x40020400

08002008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800200c:	b672      	cpsid	i
}
 800200e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002010:	e7fe      	b.n	8002010 <Error_Handler+0x8>
	...

08002014 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	607b      	str	r3, [r7, #4]
 800201e:	4b10      	ldr	r3, [pc, #64]	; (8002060 <HAL_MspInit+0x4c>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	4a0f      	ldr	r2, [pc, #60]	; (8002060 <HAL_MspInit+0x4c>)
 8002024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002028:	6453      	str	r3, [r2, #68]	; 0x44
 800202a:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <HAL_MspInit+0x4c>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002032:	607b      	str	r3, [r7, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	603b      	str	r3, [r7, #0]
 800203a:	4b09      	ldr	r3, [pc, #36]	; (8002060 <HAL_MspInit+0x4c>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	4a08      	ldr	r2, [pc, #32]	; (8002060 <HAL_MspInit+0x4c>)
 8002040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002044:	6413      	str	r3, [r2, #64]	; 0x40
 8002046:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_MspInit+0x4c>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800

08002064 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08a      	sub	sp, #40	; 0x28
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 0314 	add.w	r3, r7, #20
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a2f      	ldr	r2, [pc, #188]	; (8002140 <HAL_ADC_MspInit+0xdc>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d157      	bne.n	8002136 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	4b2e      	ldr	r3, [pc, #184]	; (8002144 <HAL_ADC_MspInit+0xe0>)
 800208c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208e:	4a2d      	ldr	r2, [pc, #180]	; (8002144 <HAL_ADC_MspInit+0xe0>)
 8002090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002094:	6453      	str	r3, [r2, #68]	; 0x44
 8002096:	4b2b      	ldr	r3, [pc, #172]	; (8002144 <HAL_ADC_MspInit+0xe0>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209e:	613b      	str	r3, [r7, #16]
 80020a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	4b27      	ldr	r3, [pc, #156]	; (8002144 <HAL_ADC_MspInit+0xe0>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	4a26      	ldr	r2, [pc, #152]	; (8002144 <HAL_ADC_MspInit+0xe0>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6313      	str	r3, [r2, #48]	; 0x30
 80020b2:	4b24      	ldr	r3, [pc, #144]	; (8002144 <HAL_ADC_MspInit+0xe0>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020be:	2310      	movs	r3, #16
 80020c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020c2:	2303      	movs	r3, #3
 80020c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ca:	f107 0314 	add.w	r3, r7, #20
 80020ce:	4619      	mov	r1, r3
 80020d0:	481d      	ldr	r0, [pc, #116]	; (8002148 <HAL_ADC_MspInit+0xe4>)
 80020d2:	f001 fbbb 	bl	800384c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80020d6:	4b1d      	ldr	r3, [pc, #116]	; (800214c <HAL_ADC_MspInit+0xe8>)
 80020d8:	4a1d      	ldr	r2, [pc, #116]	; (8002150 <HAL_ADC_MspInit+0xec>)
 80020da:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80020dc:	4b1b      	ldr	r3, [pc, #108]	; (800214c <HAL_ADC_MspInit+0xe8>)
 80020de:	2200      	movs	r2, #0
 80020e0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020e2:	4b1a      	ldr	r3, [pc, #104]	; (800214c <HAL_ADC_MspInit+0xe8>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020e8:	4b18      	ldr	r3, [pc, #96]	; (800214c <HAL_ADC_MspInit+0xe8>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80020ee:	4b17      	ldr	r3, [pc, #92]	; (800214c <HAL_ADC_MspInit+0xe8>)
 80020f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020f4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020f6:	4b15      	ldr	r3, [pc, #84]	; (800214c <HAL_ADC_MspInit+0xe8>)
 80020f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020fc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020fe:	4b13      	ldr	r3, [pc, #76]	; (800214c <HAL_ADC_MspInit+0xe8>)
 8002100:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002104:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002106:	4b11      	ldr	r3, [pc, #68]	; (800214c <HAL_ADC_MspInit+0xe8>)
 8002108:	f44f 7280 	mov.w	r2, #256	; 0x100
 800210c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800210e:	4b0f      	ldr	r3, [pc, #60]	; (800214c <HAL_ADC_MspInit+0xe8>)
 8002110:	2200      	movs	r2, #0
 8002112:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002114:	4b0d      	ldr	r3, [pc, #52]	; (800214c <HAL_ADC_MspInit+0xe8>)
 8002116:	2200      	movs	r2, #0
 8002118:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800211a:	480c      	ldr	r0, [pc, #48]	; (800214c <HAL_ADC_MspInit+0xe8>)
 800211c:	f001 f804 	bl	8003128 <HAL_DMA_Init>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002126:	f7ff ff6f 	bl	8002008 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a07      	ldr	r2, [pc, #28]	; (800214c <HAL_ADC_MspInit+0xe8>)
 800212e:	639a      	str	r2, [r3, #56]	; 0x38
 8002130:	4a06      	ldr	r2, [pc, #24]	; (800214c <HAL_ADC_MspInit+0xe8>)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002136:	bf00      	nop
 8002138:	3728      	adds	r7, #40	; 0x28
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40012000 	.word	0x40012000
 8002144:	40023800 	.word	0x40023800
 8002148:	40020000 	.word	0x40020000
 800214c:	2000039c 	.word	0x2000039c
 8002150:	40026410 	.word	0x40026410

08002154 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08a      	sub	sp, #40	; 0x28
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215c:	f107 0314 	add.w	r3, r7, #20
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a35      	ldr	r2, [pc, #212]	; (8002248 <HAL_SPI_MspInit+0xf4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d163      	bne.n	800223e <HAL_SPI_MspInit+0xea>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	4b34      	ldr	r3, [pc, #208]	; (800224c <HAL_SPI_MspInit+0xf8>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	4a33      	ldr	r2, [pc, #204]	; (800224c <HAL_SPI_MspInit+0xf8>)
 8002180:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002184:	6453      	str	r3, [r2, #68]	; 0x44
 8002186:	4b31      	ldr	r3, [pc, #196]	; (800224c <HAL_SPI_MspInit+0xf8>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	4b2d      	ldr	r3, [pc, #180]	; (800224c <HAL_SPI_MspInit+0xf8>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	4a2c      	ldr	r2, [pc, #176]	; (800224c <HAL_SPI_MspInit+0xf8>)
 800219c:	f043 0310 	orr.w	r3, r3, #16
 80021a0:	6313      	str	r3, [r2, #48]	; 0x30
 80021a2:	4b2a      	ldr	r3, [pc, #168]	; (800224c <HAL_SPI_MspInit+0xf8>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	f003 0310 	and.w	r3, r3, #16
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80021ae:	2344      	movs	r3, #68	; 0x44
 80021b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b2:	2302      	movs	r3, #2
 80021b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ba:	2303      	movs	r3, #3
 80021bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80021be:	2305      	movs	r3, #5
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021c2:	f107 0314 	add.w	r3, r7, #20
 80021c6:	4619      	mov	r1, r3
 80021c8:	4821      	ldr	r0, [pc, #132]	; (8002250 <HAL_SPI_MspInit+0xfc>)
 80021ca:	f001 fb3f 	bl	800384c <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA2_Stream1;
 80021ce:	4b21      	ldr	r3, [pc, #132]	; (8002254 <HAL_SPI_MspInit+0x100>)
 80021d0:	4a21      	ldr	r2, [pc, #132]	; (8002258 <HAL_SPI_MspInit+0x104>)
 80021d2:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 80021d4:	4b1f      	ldr	r3, [pc, #124]	; (8002254 <HAL_SPI_MspInit+0x100>)
 80021d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021da:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021dc:	4b1d      	ldr	r3, [pc, #116]	; (8002254 <HAL_SPI_MspInit+0x100>)
 80021de:	2240      	movs	r2, #64	; 0x40
 80021e0:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021e2:	4b1c      	ldr	r3, [pc, #112]	; (8002254 <HAL_SPI_MspInit+0x100>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021e8:	4b1a      	ldr	r3, [pc, #104]	; (8002254 <HAL_SPI_MspInit+0x100>)
 80021ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021ee:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021f0:	4b18      	ldr	r3, [pc, #96]	; (8002254 <HAL_SPI_MspInit+0x100>)
 80021f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021f6:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021f8:	4b16      	ldr	r3, [pc, #88]	; (8002254 <HAL_SPI_MspInit+0x100>)
 80021fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021fe:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8002200:	4b14      	ldr	r3, [pc, #80]	; (8002254 <HAL_SPI_MspInit+0x100>)
 8002202:	2200      	movs	r2, #0
 8002204:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002206:	4b13      	ldr	r3, [pc, #76]	; (8002254 <HAL_SPI_MspInit+0x100>)
 8002208:	2200      	movs	r2, #0
 800220a:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800220c:	4b11      	ldr	r3, [pc, #68]	; (8002254 <HAL_SPI_MspInit+0x100>)
 800220e:	2200      	movs	r2, #0
 8002210:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8002212:	4810      	ldr	r0, [pc, #64]	; (8002254 <HAL_SPI_MspInit+0x100>)
 8002214:	f000 ff88 	bl	8003128 <HAL_DMA_Init>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 800221e:	f7ff fef3 	bl	8002008 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a0b      	ldr	r2, [pc, #44]	; (8002254 <HAL_SPI_MspInit+0x100>)
 8002226:	649a      	str	r2, [r3, #72]	; 0x48
 8002228:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <HAL_SPI_MspInit+0x100>)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800222e:	2200      	movs	r2, #0
 8002230:	2100      	movs	r1, #0
 8002232:	2054      	movs	r0, #84	; 0x54
 8002234:	f000 ff41 	bl	80030ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8002238:	2054      	movs	r0, #84	; 0x54
 800223a:	f000 ff5a 	bl	80030f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800223e:	bf00      	nop
 8002240:	3728      	adds	r7, #40	; 0x28
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40013400 	.word	0x40013400
 800224c:	40023800 	.word	0x40023800
 8002250:	40021000 	.word	0x40021000
 8002254:	20000454 	.word	0x20000454
 8002258:	40026428 	.word	0x40026428

0800225c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0b      	ldr	r2, [pc, #44]	; (8002298 <HAL_TIM_Base_MspInit+0x3c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d10d      	bne.n	800228a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	4b0a      	ldr	r3, [pc, #40]	; (800229c <HAL_TIM_Base_MspInit+0x40>)
 8002274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002276:	4a09      	ldr	r2, [pc, #36]	; (800229c <HAL_TIM_Base_MspInit+0x40>)
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	6453      	str	r3, [r2, #68]	; 0x44
 800227e:	4b07      	ldr	r3, [pc, #28]	; (800229c <HAL_TIM_Base_MspInit+0x40>)
 8002280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800228a:	bf00      	nop
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40010000 	.word	0x40010000
 800229c:	40023800 	.word	0x40023800

080022a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b088      	sub	sp, #32
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a8:	f107 030c 	add.w	r3, r7, #12
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	60da      	str	r2, [r3, #12]
 80022b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a12      	ldr	r2, [pc, #72]	; (8002308 <HAL_TIM_MspPostInit+0x68>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d11e      	bne.n	8002300 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	4b11      	ldr	r3, [pc, #68]	; (800230c <HAL_TIM_MspPostInit+0x6c>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	4a10      	ldr	r2, [pc, #64]	; (800230c <HAL_TIM_MspPostInit+0x6c>)
 80022cc:	f043 0310 	orr.w	r3, r3, #16
 80022d0:	6313      	str	r3, [r2, #48]	; 0x30
 80022d2:	4b0e      	ldr	r3, [pc, #56]	; (800230c <HAL_TIM_MspPostInit+0x6c>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	f003 0310 	and.w	r3, r3, #16
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e4:	2302      	movs	r3, #2
 80022e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ec:	2300      	movs	r3, #0
 80022ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022f0:	2301      	movs	r3, #1
 80022f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022f4:	f107 030c 	add.w	r3, r7, #12
 80022f8:	4619      	mov	r1, r3
 80022fa:	4805      	ldr	r0, [pc, #20]	; (8002310 <HAL_TIM_MspPostInit+0x70>)
 80022fc:	f001 faa6 	bl	800384c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002300:	bf00      	nop
 8002302:	3720      	adds	r7, #32
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40010000 	.word	0x40010000
 800230c:	40023800 	.word	0x40023800
 8002310:	40021000 	.word	0x40021000

08002314 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b08a      	sub	sp, #40	; 0x28
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231c:	f107 0314 	add.w	r3, r7, #20
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a31      	ldr	r2, [pc, #196]	; (80023f8 <HAL_UART_MspInit+0xe4>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d15b      	bne.n	80023ee <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	613b      	str	r3, [r7, #16]
 800233a:	4b30      	ldr	r3, [pc, #192]	; (80023fc <HAL_UART_MspInit+0xe8>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	4a2f      	ldr	r2, [pc, #188]	; (80023fc <HAL_UART_MspInit+0xe8>)
 8002340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002344:	6413      	str	r3, [r2, #64]	; 0x40
 8002346:	4b2d      	ldr	r3, [pc, #180]	; (80023fc <HAL_UART_MspInit+0xe8>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	4b29      	ldr	r3, [pc, #164]	; (80023fc <HAL_UART_MspInit+0xe8>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	4a28      	ldr	r2, [pc, #160]	; (80023fc <HAL_UART_MspInit+0xe8>)
 800235c:	f043 0308 	orr.w	r3, r3, #8
 8002360:	6313      	str	r3, [r2, #48]	; 0x30
 8002362:	4b26      	ldr	r3, [pc, #152]	; (80023fc <HAL_UART_MspInit+0xe8>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800236e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002374:	2302      	movs	r3, #2
 8002376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800237c:	2303      	movs	r3, #3
 800237e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002380:	2307      	movs	r3, #7
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002384:	f107 0314 	add.w	r3, r7, #20
 8002388:	4619      	mov	r1, r3
 800238a:	481d      	ldr	r0, [pc, #116]	; (8002400 <HAL_UART_MspInit+0xec>)
 800238c:	f001 fa5e 	bl	800384c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002390:	4b1c      	ldr	r3, [pc, #112]	; (8002404 <HAL_UART_MspInit+0xf0>)
 8002392:	4a1d      	ldr	r2, [pc, #116]	; (8002408 <HAL_UART_MspInit+0xf4>)
 8002394:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002396:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <HAL_UART_MspInit+0xf0>)
 8002398:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800239c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800239e:	4b19      	ldr	r3, [pc, #100]	; (8002404 <HAL_UART_MspInit+0xf0>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023a4:	4b17      	ldr	r3, [pc, #92]	; (8002404 <HAL_UART_MspInit+0xf0>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023aa:	4b16      	ldr	r3, [pc, #88]	; (8002404 <HAL_UART_MspInit+0xf0>)
 80023ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023b0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023b2:	4b14      	ldr	r3, [pc, #80]	; (8002404 <HAL_UART_MspInit+0xf0>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023b8:	4b12      	ldr	r3, [pc, #72]	; (8002404 <HAL_UART_MspInit+0xf0>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80023be:	4b11      	ldr	r3, [pc, #68]	; (8002404 <HAL_UART_MspInit+0xf0>)
 80023c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023c4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023c6:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <HAL_UART_MspInit+0xf0>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023cc:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <HAL_UART_MspInit+0xf0>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80023d2:	480c      	ldr	r0, [pc, #48]	; (8002404 <HAL_UART_MspInit+0xf0>)
 80023d4:	f000 fea8 	bl	8003128 <HAL_DMA_Init>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80023de:	f7ff fe13 	bl	8002008 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a07      	ldr	r2, [pc, #28]	; (8002404 <HAL_UART_MspInit+0xf0>)
 80023e6:	639a      	str	r2, [r3, #56]	; 0x38
 80023e8:	4a06      	ldr	r2, [pc, #24]	; (8002404 <HAL_UART_MspInit+0xf0>)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80023ee:	bf00      	nop
 80023f0:	3728      	adds	r7, #40	; 0x28
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40004800 	.word	0x40004800
 80023fc:	40023800 	.word	0x40023800
 8002400:	40020c00 	.word	0x40020c00
 8002404:	20000540 	.word	0x20000540
 8002408:	40026028 	.word	0x40026028

0800240c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002410:	e7fe      	b.n	8002410 <NMI_Handler+0x4>

08002412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002416:	e7fe      	b.n	8002416 <HardFault_Handler+0x4>

08002418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800241c:	e7fe      	b.n	800241c <MemManage_Handler+0x4>

0800241e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002422:	e7fe      	b.n	8002422 <BusFault_Handler+0x4>

08002424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002428:	e7fe      	b.n	8002428 <UsageFault_Handler+0x4>

0800242a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002458:	f000 f8ee 	bl	8002638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800245c:	bf00      	nop
 800245e:	bd80      	pop	{r7, pc}

08002460 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002464:	4802      	ldr	r0, [pc, #8]	; (8002470 <DMA1_Stream1_IRQHandler+0x10>)
 8002466:	f000 ff87 	bl	8003378 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000540 	.word	0x20000540

08002474 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002478:	4802      	ldr	r0, [pc, #8]	; (8002484 <DMA2_Stream0_IRQHandler+0x10>)
 800247a:	f000 ff7d 	bl	8003378 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	2000039c 	.word	0x2000039c

08002488 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 800248c:	4802      	ldr	r0, [pc, #8]	; (8002498 <DMA2_Stream1_IRQHandler+0x10>)
 800248e:	f000 ff73 	bl	8003378 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20000454 	.word	0x20000454

0800249c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80024a0:	4802      	ldr	r0, [pc, #8]	; (80024ac <SPI4_IRQHandler+0x10>)
 80024a2:	f002 f893 	bl	80045cc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	200003fc 	.word	0x200003fc

080024b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024b8:	4a14      	ldr	r2, [pc, #80]	; (800250c <_sbrk+0x5c>)
 80024ba:	4b15      	ldr	r3, [pc, #84]	; (8002510 <_sbrk+0x60>)
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024c4:	4b13      	ldr	r3, [pc, #76]	; (8002514 <_sbrk+0x64>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d102      	bne.n	80024d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024cc:	4b11      	ldr	r3, [pc, #68]	; (8002514 <_sbrk+0x64>)
 80024ce:	4a12      	ldr	r2, [pc, #72]	; (8002518 <_sbrk+0x68>)
 80024d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024d2:	4b10      	ldr	r3, [pc, #64]	; (8002514 <_sbrk+0x64>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4413      	add	r3, r2
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d207      	bcs.n	80024f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024e0:	f003 ffb8 	bl	8006454 <__errno>
 80024e4:	4603      	mov	r3, r0
 80024e6:	220c      	movs	r2, #12
 80024e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024ea:	f04f 33ff 	mov.w	r3, #4294967295
 80024ee:	e009      	b.n	8002504 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024f0:	4b08      	ldr	r3, [pc, #32]	; (8002514 <_sbrk+0x64>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024f6:	4b07      	ldr	r3, [pc, #28]	; (8002514 <_sbrk+0x64>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4413      	add	r3, r2
 80024fe:	4a05      	ldr	r2, [pc, #20]	; (8002514 <_sbrk+0x64>)
 8002500:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002502:	68fb      	ldr	r3, [r7, #12]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	20030000 	.word	0x20030000
 8002510:	00000400 	.word	0x00000400
 8002514:	200005a0 	.word	0x200005a0
 8002518:	200006f0 	.word	0x200006f0

0800251c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <SystemInit+0x20>)
 8002522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002526:	4a05      	ldr	r2, [pc, #20]	; (800253c <SystemInit+0x20>)
 8002528:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800252c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	e000ed00 	.word	0xe000ed00

08002540 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002578 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002544:	480d      	ldr	r0, [pc, #52]	; (800257c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002546:	490e      	ldr	r1, [pc, #56]	; (8002580 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002548:	4a0e      	ldr	r2, [pc, #56]	; (8002584 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800254a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800254c:	e002      	b.n	8002554 <LoopCopyDataInit>

0800254e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800254e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002552:	3304      	adds	r3, #4

08002554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002558:	d3f9      	bcc.n	800254e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800255a:	4a0b      	ldr	r2, [pc, #44]	; (8002588 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800255c:	4c0b      	ldr	r4, [pc, #44]	; (800258c <LoopFillZerobss+0x26>)
  movs r3, #0
 800255e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002560:	e001      	b.n	8002566 <LoopFillZerobss>

08002562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002564:	3204      	adds	r2, #4

08002566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002568:	d3fb      	bcc.n	8002562 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800256a:	f7ff ffd7 	bl	800251c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800256e:	f003 ff77 	bl	8006460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002572:	f7ff fa52 	bl	8001a1a <main>
  bx  lr    
 8002576:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002578:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800257c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002580:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8002584:	08007098 	.word	0x08007098
  ldr r2, =_sbss
 8002588:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 800258c:	200006f0 	.word	0x200006f0

08002590 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002590:	e7fe      	b.n	8002590 <ADC_IRQHandler>
	...

08002594 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002598:	4b0e      	ldr	r3, [pc, #56]	; (80025d4 <HAL_Init+0x40>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a0d      	ldr	r2, [pc, #52]	; (80025d4 <HAL_Init+0x40>)
 800259e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025a4:	4b0b      	ldr	r3, [pc, #44]	; (80025d4 <HAL_Init+0x40>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a0a      	ldr	r2, [pc, #40]	; (80025d4 <HAL_Init+0x40>)
 80025aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025b0:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <HAL_Init+0x40>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a07      	ldr	r2, [pc, #28]	; (80025d4 <HAL_Init+0x40>)
 80025b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025bc:	2003      	movs	r0, #3
 80025be:	f000 fd71 	bl	80030a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025c2:	2000      	movs	r0, #0
 80025c4:	f000 f808 	bl	80025d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025c8:	f7ff fd24 	bl	8002014 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40023c00 	.word	0x40023c00

080025d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025e0:	4b12      	ldr	r3, [pc, #72]	; (800262c <HAL_InitTick+0x54>)
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	4b12      	ldr	r3, [pc, #72]	; (8002630 <HAL_InitTick+0x58>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	4619      	mov	r1, r3
 80025ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80025f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 fd89 	bl	800310e <HAL_SYSTICK_Config>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e00e      	b.n	8002624 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b0f      	cmp	r3, #15
 800260a:	d80a      	bhi.n	8002622 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800260c:	2200      	movs	r2, #0
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	f04f 30ff 	mov.w	r0, #4294967295
 8002614:	f000 fd51 	bl	80030ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002618:	4a06      	ldr	r2, [pc, #24]	; (8002634 <HAL_InitTick+0x5c>)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800261e:	2300      	movs	r3, #0
 8002620:	e000      	b.n	8002624 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
}
 8002624:	4618      	mov	r0, r3
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	200000a4 	.word	0x200000a4
 8002630:	200000ac 	.word	0x200000ac
 8002634:	200000a8 	.word	0x200000a8

08002638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800263c:	4b06      	ldr	r3, [pc, #24]	; (8002658 <HAL_IncTick+0x20>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	461a      	mov	r2, r3
 8002642:	4b06      	ldr	r3, [pc, #24]	; (800265c <HAL_IncTick+0x24>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4413      	add	r3, r2
 8002648:	4a04      	ldr	r2, [pc, #16]	; (800265c <HAL_IncTick+0x24>)
 800264a:	6013      	str	r3, [r2, #0]
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	200000ac 	.word	0x200000ac
 800265c:	200005a4 	.word	0x200005a4

08002660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return uwTick;
 8002664:	4b03      	ldr	r3, [pc, #12]	; (8002674 <HAL_GetTick+0x14>)
 8002666:	681b      	ldr	r3, [r3, #0]
}
 8002668:	4618      	mov	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	200005a4 	.word	0x200005a4

08002678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002680:	f7ff ffee 	bl	8002660 <HAL_GetTick>
 8002684:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002690:	d005      	beq.n	800269e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002692:	4b0a      	ldr	r3, [pc, #40]	; (80026bc <HAL_Delay+0x44>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4413      	add	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800269e:	bf00      	nop
 80026a0:	f7ff ffde 	bl	8002660 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d8f7      	bhi.n	80026a0 <HAL_Delay+0x28>
  {
  }
}
 80026b0:	bf00      	nop
 80026b2:	bf00      	nop
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	200000ac 	.word	0x200000ac

080026c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e033      	b.n	800273e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d109      	bne.n	80026f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff fcc0 	bl	8002064 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f003 0310 	and.w	r3, r3, #16
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d118      	bne.n	8002730 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002706:	f023 0302 	bic.w	r3, r3, #2
 800270a:	f043 0202 	orr.w	r2, r3, #2
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 fa78 	bl	8002c08 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f023 0303 	bic.w	r3, r3, #3
 8002726:	f043 0201 	orr.w	r2, r3, #1
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	641a      	str	r2, [r3, #64]	; 0x40
 800272e:	e001      	b.n	8002734 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800273c:	7bfb      	ldrb	r3, [r7, #15]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800275e:	2b01      	cmp	r3, #1
 8002760:	d101      	bne.n	8002766 <HAL_ADC_Start_DMA+0x1e>
 8002762:	2302      	movs	r3, #2
 8002764:	e0e9      	b.n	800293a <HAL_ADC_Start_DMA+0x1f2>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b01      	cmp	r3, #1
 800277a:	d018      	beq.n	80027ae <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0201 	orr.w	r2, r2, #1
 800278a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800278c:	4b6d      	ldr	r3, [pc, #436]	; (8002944 <HAL_ADC_Start_DMA+0x1fc>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a6d      	ldr	r2, [pc, #436]	; (8002948 <HAL_ADC_Start_DMA+0x200>)
 8002792:	fba2 2303 	umull	r2, r3, r2, r3
 8002796:	0c9a      	lsrs	r2, r3, #18
 8002798:	4613      	mov	r3, r2
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	4413      	add	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80027a0:	e002      	b.n	80027a8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f9      	bne.n	80027a2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027bc:	d107      	bne.n	80027ce <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b01      	cmp	r3, #1
 80027da:	f040 80a1 	bne.w	8002920 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80027e6:	f023 0301 	bic.w	r3, r3, #1
 80027ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d007      	beq.n	8002810 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002808:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800281c:	d106      	bne.n	800282c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	f023 0206 	bic.w	r2, r3, #6
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	645a      	str	r2, [r3, #68]	; 0x44
 800282a:	e002      	b.n	8002832 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800283a:	4b44      	ldr	r3, [pc, #272]	; (800294c <HAL_ADC_Start_DMA+0x204>)
 800283c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002842:	4a43      	ldr	r2, [pc, #268]	; (8002950 <HAL_ADC_Start_DMA+0x208>)
 8002844:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284a:	4a42      	ldr	r2, [pc, #264]	; (8002954 <HAL_ADC_Start_DMA+0x20c>)
 800284c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002852:	4a41      	ldr	r2, [pc, #260]	; (8002958 <HAL_ADC_Start_DMA+0x210>)
 8002854:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800285e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800286e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800287e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	334c      	adds	r3, #76	; 0x4c
 800288a:	4619      	mov	r1, r3
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f000 fcf8 	bl	8003284 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f003 031f 	and.w	r3, r3, #31
 800289c:	2b00      	cmp	r3, #0
 800289e:	d12a      	bne.n	80028f6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a2d      	ldr	r2, [pc, #180]	; (800295c <HAL_ADC_Start_DMA+0x214>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d015      	beq.n	80028d6 <HAL_ADC_Start_DMA+0x18e>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a2c      	ldr	r2, [pc, #176]	; (8002960 <HAL_ADC_Start_DMA+0x218>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d105      	bne.n	80028c0 <HAL_ADC_Start_DMA+0x178>
 80028b4:	4b25      	ldr	r3, [pc, #148]	; (800294c <HAL_ADC_Start_DMA+0x204>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 031f 	and.w	r3, r3, #31
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00a      	beq.n	80028d6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a27      	ldr	r2, [pc, #156]	; (8002964 <HAL_ADC_Start_DMA+0x21c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d136      	bne.n	8002938 <HAL_ADC_Start_DMA+0x1f0>
 80028ca:	4b20      	ldr	r3, [pc, #128]	; (800294c <HAL_ADC_Start_DMA+0x204>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 0310 	and.w	r3, r3, #16
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d130      	bne.n	8002938 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d129      	bne.n	8002938 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028f2:	609a      	str	r2, [r3, #8]
 80028f4:	e020      	b.n	8002938 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a18      	ldr	r2, [pc, #96]	; (800295c <HAL_ADC_Start_DMA+0x214>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d11b      	bne.n	8002938 <HAL_ADC_Start_DMA+0x1f0>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d114      	bne.n	8002938 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800291c:	609a      	str	r2, [r3, #8]
 800291e:	e00b      	b.n	8002938 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	f043 0210 	orr.w	r2, r3, #16
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002930:	f043 0201 	orr.w	r2, r3, #1
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	200000a4 	.word	0x200000a4
 8002948:	431bde83 	.word	0x431bde83
 800294c:	40012300 	.word	0x40012300
 8002950:	08002e01 	.word	0x08002e01
 8002954:	08002ebb 	.word	0x08002ebb
 8002958:	08002ed7 	.word	0x08002ed7
 800295c:	40012000 	.word	0x40012000
 8002960:	40012100 	.word	0x40012100
 8002964:	40012200 	.word	0x40012200

08002968 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d101      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x1c>
 80029bc:	2302      	movs	r3, #2
 80029be:	e113      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x244>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b09      	cmp	r3, #9
 80029ce:	d925      	bls.n	8002a1c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68d9      	ldr	r1, [r3, #12]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	b29b      	uxth	r3, r3
 80029dc:	461a      	mov	r2, r3
 80029de:	4613      	mov	r3, r2
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	4413      	add	r3, r2
 80029e4:	3b1e      	subs	r3, #30
 80029e6:	2207      	movs	r2, #7
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	43da      	mvns	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	400a      	ands	r2, r1
 80029f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68d9      	ldr	r1, [r3, #12]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	4618      	mov	r0, r3
 8002a08:	4603      	mov	r3, r0
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	4403      	add	r3, r0
 8002a0e:	3b1e      	subs	r3, #30
 8002a10:	409a      	lsls	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	60da      	str	r2, [r3, #12]
 8002a1a:	e022      	b.n	8002a62 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6919      	ldr	r1, [r3, #16]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	4413      	add	r3, r2
 8002a30:	2207      	movs	r2, #7
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43da      	mvns	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	400a      	ands	r2, r1
 8002a3e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6919      	ldr	r1, [r3, #16]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	4618      	mov	r0, r3
 8002a52:	4603      	mov	r3, r0
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	4403      	add	r3, r0
 8002a58:	409a      	lsls	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b06      	cmp	r3, #6
 8002a68:	d824      	bhi.n	8002ab4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	3b05      	subs	r3, #5
 8002a7c:	221f      	movs	r2, #31
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43da      	mvns	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	400a      	ands	r2, r1
 8002a8a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	4618      	mov	r0, r3
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3b05      	subs	r3, #5
 8002aa6:	fa00 f203 	lsl.w	r2, r0, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ab2:	e04c      	b.n	8002b4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b0c      	cmp	r3, #12
 8002aba:	d824      	bhi.n	8002b06 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	3b23      	subs	r3, #35	; 0x23
 8002ace:	221f      	movs	r2, #31
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	43da      	mvns	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	400a      	ands	r2, r1
 8002adc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	4618      	mov	r0, r3
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	4613      	mov	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	3b23      	subs	r3, #35	; 0x23
 8002af8:	fa00 f203 	lsl.w	r2, r0, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	631a      	str	r2, [r3, #48]	; 0x30
 8002b04:	e023      	b.n	8002b4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	3b41      	subs	r3, #65	; 0x41
 8002b18:	221f      	movs	r2, #31
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	43da      	mvns	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	400a      	ands	r2, r1
 8002b26:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	4618      	mov	r0, r3
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	3b41      	subs	r3, #65	; 0x41
 8002b42:	fa00 f203 	lsl.w	r2, r0, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b4e:	4b29      	ldr	r3, [pc, #164]	; (8002bf4 <HAL_ADC_ConfigChannel+0x250>)
 8002b50:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a28      	ldr	r2, [pc, #160]	; (8002bf8 <HAL_ADC_ConfigChannel+0x254>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d10f      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x1d8>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b12      	cmp	r3, #18
 8002b62:	d10b      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a1d      	ldr	r2, [pc, #116]	; (8002bf8 <HAL_ADC_ConfigChannel+0x254>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d12b      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x23a>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a1c      	ldr	r2, [pc, #112]	; (8002bfc <HAL_ADC_ConfigChannel+0x258>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d003      	beq.n	8002b98 <HAL_ADC_ConfigChannel+0x1f4>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b11      	cmp	r3, #17
 8002b96:	d122      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a11      	ldr	r2, [pc, #68]	; (8002bfc <HAL_ADC_ConfigChannel+0x258>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d111      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bba:	4b11      	ldr	r3, [pc, #68]	; (8002c00 <HAL_ADC_ConfigChannel+0x25c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a11      	ldr	r2, [pc, #68]	; (8002c04 <HAL_ADC_ConfigChannel+0x260>)
 8002bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc4:	0c9a      	lsrs	r2, r3, #18
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bd0:	e002      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f9      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	40012300 	.word	0x40012300
 8002bf8:	40012000 	.word	0x40012000
 8002bfc:	10000012 	.word	0x10000012
 8002c00:	200000a4 	.word	0x200000a4
 8002c04:	431bde83 	.word	0x431bde83

08002c08 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c10:	4b79      	ldr	r3, [pc, #484]	; (8002df8 <ADC_Init+0x1f0>)
 8002c12:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6859      	ldr	r1, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	021a      	lsls	r2, r3, #8
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6859      	ldr	r1, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689a      	ldr	r2, [r3, #8]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6899      	ldr	r1, [r3, #8]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9a:	4a58      	ldr	r2, [pc, #352]	; (8002dfc <ADC_Init+0x1f4>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d022      	beq.n	8002ce6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6899      	ldr	r1, [r3, #8]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6899      	ldr	r1, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	609a      	str	r2, [r3, #8]
 8002ce4:	e00f      	b.n	8002d06 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cf4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d04:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0202 	bic.w	r2, r2, #2
 8002d14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6899      	ldr	r1, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	7e1b      	ldrb	r3, [r3, #24]
 8002d20:	005a      	lsls	r2, r3, #1
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d01b      	beq.n	8002d6c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d42:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d52:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6859      	ldr	r1, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	035a      	lsls	r2, r3, #13
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	605a      	str	r2, [r3, #4]
 8002d6a:	e007      	b.n	8002d7c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d7a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	051a      	lsls	r2, r3, #20
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002db0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6899      	ldr	r1, [r3, #8]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dbe:	025a      	lsls	r2, r3, #9
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6899      	ldr	r1, [r3, #8]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	029a      	lsls	r2, r3, #10
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	609a      	str	r2, [r3, #8]
}
 8002dec:	bf00      	nop
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	40012300 	.word	0x40012300
 8002dfc:	0f000001 	.word	0x0f000001

08002e00 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d13c      	bne.n	8002e94 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d12b      	bne.n	8002e8c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d127      	bne.n	8002e8c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e42:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d006      	beq.n	8002e58 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d119      	bne.n	8002e8c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0220 	bic.w	r2, r2, #32
 8002e66:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d105      	bne.n	8002e8c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	f043 0201 	orr.w	r2, r3, #1
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f7ff fd6b 	bl	8002968 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e92:	e00e      	b.n	8002eb2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	f003 0310 	and.w	r3, r3, #16
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f7ff fd75 	bl	8002990 <HAL_ADC_ErrorCallback>
}
 8002ea6:	e004      	b.n	8002eb2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	4798      	blx	r3
}
 8002eb2:	bf00      	nop
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b084      	sub	sp, #16
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f7ff fd57 	bl	800297c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ece:	bf00      	nop
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b084      	sub	sp, #16
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2240      	movs	r2, #64	; 0x40
 8002ee8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eee:	f043 0204 	orr.w	r2, r3, #4
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f7ff fd4a 	bl	8002990 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002efc:	bf00      	nop
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f14:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <__NVIC_SetPriorityGrouping+0x44>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f20:	4013      	ands	r3, r2
 8002f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f36:	4a04      	ldr	r2, [pc, #16]	; (8002f48 <__NVIC_SetPriorityGrouping+0x44>)
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	60d3      	str	r3, [r2, #12]
}
 8002f3c:	bf00      	nop
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	e000ed00 	.word	0xe000ed00

08002f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f50:	4b04      	ldr	r3, [pc, #16]	; (8002f64 <__NVIC_GetPriorityGrouping+0x18>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	0a1b      	lsrs	r3, r3, #8
 8002f56:	f003 0307 	and.w	r3, r3, #7
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	e000ed00 	.word	0xe000ed00

08002f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	db0b      	blt.n	8002f92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f7a:	79fb      	ldrb	r3, [r7, #7]
 8002f7c:	f003 021f 	and.w	r2, r3, #31
 8002f80:	4907      	ldr	r1, [pc, #28]	; (8002fa0 <__NVIC_EnableIRQ+0x38>)
 8002f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	2001      	movs	r0, #1
 8002f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	e000e100 	.word	0xe000e100

08002fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	4603      	mov	r3, r0
 8002fac:	6039      	str	r1, [r7, #0]
 8002fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	db0a      	blt.n	8002fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	490c      	ldr	r1, [pc, #48]	; (8002ff0 <__NVIC_SetPriority+0x4c>)
 8002fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc2:	0112      	lsls	r2, r2, #4
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fcc:	e00a      	b.n	8002fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	4908      	ldr	r1, [pc, #32]	; (8002ff4 <__NVIC_SetPriority+0x50>)
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	3b04      	subs	r3, #4
 8002fdc:	0112      	lsls	r2, r2, #4
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	761a      	strb	r2, [r3, #24]
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	e000e100 	.word	0xe000e100
 8002ff4:	e000ed00 	.word	0xe000ed00

08002ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b089      	sub	sp, #36	; 0x24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f1c3 0307 	rsb	r3, r3, #7
 8003012:	2b04      	cmp	r3, #4
 8003014:	bf28      	it	cs
 8003016:	2304      	movcs	r3, #4
 8003018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	3304      	adds	r3, #4
 800301e:	2b06      	cmp	r3, #6
 8003020:	d902      	bls.n	8003028 <NVIC_EncodePriority+0x30>
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	3b03      	subs	r3, #3
 8003026:	e000      	b.n	800302a <NVIC_EncodePriority+0x32>
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800302c:	f04f 32ff 	mov.w	r2, #4294967295
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	43da      	mvns	r2, r3
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	401a      	ands	r2, r3
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003040:	f04f 31ff 	mov.w	r1, #4294967295
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	fa01 f303 	lsl.w	r3, r1, r3
 800304a:	43d9      	mvns	r1, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003050:	4313      	orrs	r3, r2
         );
}
 8003052:	4618      	mov	r0, r3
 8003054:	3724      	adds	r7, #36	; 0x24
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
	...

08003060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3b01      	subs	r3, #1
 800306c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003070:	d301      	bcc.n	8003076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003072:	2301      	movs	r3, #1
 8003074:	e00f      	b.n	8003096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003076:	4a0a      	ldr	r2, [pc, #40]	; (80030a0 <SysTick_Config+0x40>)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3b01      	subs	r3, #1
 800307c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800307e:	210f      	movs	r1, #15
 8003080:	f04f 30ff 	mov.w	r0, #4294967295
 8003084:	f7ff ff8e 	bl	8002fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003088:	4b05      	ldr	r3, [pc, #20]	; (80030a0 <SysTick_Config+0x40>)
 800308a:	2200      	movs	r2, #0
 800308c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800308e:	4b04      	ldr	r3, [pc, #16]	; (80030a0 <SysTick_Config+0x40>)
 8003090:	2207      	movs	r2, #7
 8003092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	e000e010 	.word	0xe000e010

080030a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7ff ff29 	bl	8002f04 <__NVIC_SetPriorityGrouping>
}
 80030b2:	bf00      	nop
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b086      	sub	sp, #24
 80030be:	af00      	add	r7, sp, #0
 80030c0:	4603      	mov	r3, r0
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	607a      	str	r2, [r7, #4]
 80030c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030cc:	f7ff ff3e 	bl	8002f4c <__NVIC_GetPriorityGrouping>
 80030d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	68b9      	ldr	r1, [r7, #8]
 80030d6:	6978      	ldr	r0, [r7, #20]
 80030d8:	f7ff ff8e 	bl	8002ff8 <NVIC_EncodePriority>
 80030dc:	4602      	mov	r2, r0
 80030de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030e2:	4611      	mov	r1, r2
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff ff5d 	bl	8002fa4 <__NVIC_SetPriority>
}
 80030ea:	bf00      	nop
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	4603      	mov	r3, r0
 80030fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff ff31 	bl	8002f68 <__NVIC_EnableIRQ>
}
 8003106:	bf00      	nop
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b082      	sub	sp, #8
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7ff ffa2 	bl	8003060 <SysTick_Config>
 800311c:	4603      	mov	r3, r0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
	...

08003128 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003134:	f7ff fa94 	bl	8002660 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e099      	b.n	8003278 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0201 	bic.w	r2, r2, #1
 8003162:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003164:	e00f      	b.n	8003186 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003166:	f7ff fa7b 	bl	8002660 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b05      	cmp	r3, #5
 8003172:	d908      	bls.n	8003186 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2220      	movs	r2, #32
 8003178:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2203      	movs	r2, #3
 800317e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e078      	b.n	8003278 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1e8      	bne.n	8003166 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	4b38      	ldr	r3, [pc, #224]	; (8003280 <HAL_DMA_Init+0x158>)
 80031a0:	4013      	ands	r3, r2
 80031a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d107      	bne.n	80031f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e8:	4313      	orrs	r3, r2
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f023 0307 	bic.w	r3, r3, #7
 8003206:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	4313      	orrs	r3, r2
 8003210:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	2b04      	cmp	r3, #4
 8003218:	d117      	bne.n	800324a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	4313      	orrs	r3, r2
 8003222:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00e      	beq.n	800324a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 fa91 	bl	8003754 <DMA_CheckFifoParam>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d008      	beq.n	800324a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2240      	movs	r2, #64	; 0x40
 800323c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003246:	2301      	movs	r3, #1
 8003248:	e016      	b.n	8003278 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 fa48 	bl	80036e8 <DMA_CalcBaseAndBitshift>
 8003258:	4603      	mov	r3, r0
 800325a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003260:	223f      	movs	r2, #63	; 0x3f
 8003262:	409a      	lsls	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	f010803f 	.word	0xf010803f

08003284 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
 8003290:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003292:	2300      	movs	r3, #0
 8003294:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d101      	bne.n	80032aa <HAL_DMA_Start_IT+0x26>
 80032a6:	2302      	movs	r3, #2
 80032a8:	e040      	b.n	800332c <HAL_DMA_Start_IT+0xa8>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d12f      	bne.n	800331e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2202      	movs	r2, #2
 80032c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	68b9      	ldr	r1, [r7, #8]
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 f9da 	bl	800368c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032dc:	223f      	movs	r2, #63	; 0x3f
 80032de:	409a      	lsls	r2, r3
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0216 	orr.w	r2, r2, #22
 80032f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d007      	beq.n	800330c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0208 	orr.w	r2, r2, #8
 800330a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0201 	orr.w	r2, r2, #1
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	e005      	b.n	800332a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003326:	2302      	movs	r3, #2
 8003328:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800332a:	7dfb      	ldrb	r3, [r7, #23]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d004      	beq.n	8003352 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2280      	movs	r2, #128	; 0x80
 800334c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e00c      	b.n	800336c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2205      	movs	r2, #5
 8003356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0201 	bic.w	r2, r2, #1
 8003368:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003384:	4b8e      	ldr	r3, [pc, #568]	; (80035c0 <HAL_DMA_IRQHandler+0x248>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a8e      	ldr	r2, [pc, #568]	; (80035c4 <HAL_DMA_IRQHandler+0x24c>)
 800338a:	fba2 2303 	umull	r2, r3, r2, r3
 800338e:	0a9b      	lsrs	r3, r3, #10
 8003390:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003396:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a2:	2208      	movs	r2, #8
 80033a4:	409a      	lsls	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	4013      	ands	r3, r2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d01a      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d013      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0204 	bic.w	r2, r2, #4
 80033ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d0:	2208      	movs	r2, #8
 80033d2:	409a      	lsls	r2, r3
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033dc:	f043 0201 	orr.w	r2, r3, #1
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e8:	2201      	movs	r2, #1
 80033ea:	409a      	lsls	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d012      	beq.n	800341a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00b      	beq.n	800341a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003406:	2201      	movs	r2, #1
 8003408:	409a      	lsls	r2, r3
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003412:	f043 0202 	orr.w	r2, r3, #2
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341e:	2204      	movs	r2, #4
 8003420:	409a      	lsls	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	4013      	ands	r3, r2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d012      	beq.n	8003450 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00b      	beq.n	8003450 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343c:	2204      	movs	r2, #4
 800343e:	409a      	lsls	r2, r3
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003448:	f043 0204 	orr.w	r2, r3, #4
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003454:	2210      	movs	r2, #16
 8003456:	409a      	lsls	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4013      	ands	r3, r2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d043      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b00      	cmp	r3, #0
 800346c:	d03c      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003472:	2210      	movs	r2, #16
 8003474:	409a      	lsls	r2, r3
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d018      	beq.n	80034ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d108      	bne.n	80034a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	2b00      	cmp	r3, #0
 800349c:	d024      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	4798      	blx	r3
 80034a6:	e01f      	b.n	80034e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d01b      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	4798      	blx	r3
 80034b8:	e016      	b.n	80034e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d107      	bne.n	80034d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0208 	bic.w	r2, r2, #8
 80034d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d003      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ec:	2220      	movs	r2, #32
 80034ee:	409a      	lsls	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4013      	ands	r3, r2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 808f 	beq.w	8003618 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0310 	and.w	r3, r3, #16
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 8087 	beq.w	8003618 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350e:	2220      	movs	r2, #32
 8003510:	409a      	lsls	r2, r3
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b05      	cmp	r3, #5
 8003520:	d136      	bne.n	8003590 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0216 	bic.w	r2, r2, #22
 8003530:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695a      	ldr	r2, [r3, #20]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003540:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	2b00      	cmp	r3, #0
 8003548:	d103      	bne.n	8003552 <HAL_DMA_IRQHandler+0x1da>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800354e:	2b00      	cmp	r3, #0
 8003550:	d007      	beq.n	8003562 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0208 	bic.w	r2, r2, #8
 8003560:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003566:	223f      	movs	r2, #63	; 0x3f
 8003568:	409a      	lsls	r2, r3
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003582:	2b00      	cmp	r3, #0
 8003584:	d07e      	beq.n	8003684 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	4798      	blx	r3
        }
        return;
 800358e:	e079      	b.n	8003684 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d01d      	beq.n	80035da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10d      	bne.n	80035c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d031      	beq.n	8003618 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	4798      	blx	r3
 80035bc:	e02c      	b.n	8003618 <HAL_DMA_IRQHandler+0x2a0>
 80035be:	bf00      	nop
 80035c0:	200000a4 	.word	0x200000a4
 80035c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d023      	beq.n	8003618 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	4798      	blx	r3
 80035d8:	e01e      	b.n	8003618 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10f      	bne.n	8003608 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0210 	bic.w	r2, r2, #16
 80035f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361c:	2b00      	cmp	r3, #0
 800361e:	d032      	beq.n	8003686 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b00      	cmp	r3, #0
 800362a:	d022      	beq.n	8003672 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2205      	movs	r2, #5
 8003630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0201 	bic.w	r2, r2, #1
 8003642:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	3301      	adds	r3, #1
 8003648:	60bb      	str	r3, [r7, #8]
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	429a      	cmp	r2, r3
 800364e:	d307      	bcc.n	8003660 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f2      	bne.n	8003644 <HAL_DMA_IRQHandler+0x2cc>
 800365e:	e000      	b.n	8003662 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003660:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003676:	2b00      	cmp	r3, #0
 8003678:	d005      	beq.n	8003686 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	4798      	blx	r3
 8003682:	e000      	b.n	8003686 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003684:	bf00      	nop
    }
  }
}
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
 8003698:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	2b40      	cmp	r3, #64	; 0x40
 80036b8:	d108      	bne.n	80036cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036ca:	e007      	b.n	80036dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	60da      	str	r2, [r3, #12]
}
 80036dc:	bf00      	nop
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	3b10      	subs	r3, #16
 80036f8:	4a14      	ldr	r2, [pc, #80]	; (800374c <DMA_CalcBaseAndBitshift+0x64>)
 80036fa:	fba2 2303 	umull	r2, r3, r2, r3
 80036fe:	091b      	lsrs	r3, r3, #4
 8003700:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003702:	4a13      	ldr	r2, [pc, #76]	; (8003750 <DMA_CalcBaseAndBitshift+0x68>)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4413      	add	r3, r2
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	461a      	mov	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2b03      	cmp	r3, #3
 8003714:	d909      	bls.n	800372a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800371e:	f023 0303 	bic.w	r3, r3, #3
 8003722:	1d1a      	adds	r2, r3, #4
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	659a      	str	r2, [r3, #88]	; 0x58
 8003728:	e007      	b.n	800373a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003732:	f023 0303 	bic.w	r3, r3, #3
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800373e:	4618      	mov	r0, r3
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	aaaaaaab 	.word	0xaaaaaaab
 8003750:	08006f4c 	.word	0x08006f4c

08003754 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800375c:	2300      	movs	r3, #0
 800375e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003764:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d11f      	bne.n	80037ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2b03      	cmp	r3, #3
 8003772:	d856      	bhi.n	8003822 <DMA_CheckFifoParam+0xce>
 8003774:	a201      	add	r2, pc, #4	; (adr r2, 800377c <DMA_CheckFifoParam+0x28>)
 8003776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377a:	bf00      	nop
 800377c:	0800378d 	.word	0x0800378d
 8003780:	0800379f 	.word	0x0800379f
 8003784:	0800378d 	.word	0x0800378d
 8003788:	08003823 	.word	0x08003823
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003790:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d046      	beq.n	8003826 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800379c:	e043      	b.n	8003826 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037a6:	d140      	bne.n	800382a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ac:	e03d      	b.n	800382a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037b6:	d121      	bne.n	80037fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b03      	cmp	r3, #3
 80037bc:	d837      	bhi.n	800382e <DMA_CheckFifoParam+0xda>
 80037be:	a201      	add	r2, pc, #4	; (adr r2, 80037c4 <DMA_CheckFifoParam+0x70>)
 80037c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c4:	080037d5 	.word	0x080037d5
 80037c8:	080037db 	.word	0x080037db
 80037cc:	080037d5 	.word	0x080037d5
 80037d0:	080037ed 	.word	0x080037ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	73fb      	strb	r3, [r7, #15]
      break;
 80037d8:	e030      	b.n	800383c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d025      	beq.n	8003832 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ea:	e022      	b.n	8003832 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037f4:	d11f      	bne.n	8003836 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037fa:	e01c      	b.n	8003836 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d903      	bls.n	800380a <DMA_CheckFifoParam+0xb6>
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2b03      	cmp	r3, #3
 8003806:	d003      	beq.n	8003810 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003808:	e018      	b.n	800383c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	73fb      	strb	r3, [r7, #15]
      break;
 800380e:	e015      	b.n	800383c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00e      	beq.n	800383a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	73fb      	strb	r3, [r7, #15]
      break;
 8003820:	e00b      	b.n	800383a <DMA_CheckFifoParam+0xe6>
      break;
 8003822:	bf00      	nop
 8003824:	e00a      	b.n	800383c <DMA_CheckFifoParam+0xe8>
      break;
 8003826:	bf00      	nop
 8003828:	e008      	b.n	800383c <DMA_CheckFifoParam+0xe8>
      break;
 800382a:	bf00      	nop
 800382c:	e006      	b.n	800383c <DMA_CheckFifoParam+0xe8>
      break;
 800382e:	bf00      	nop
 8003830:	e004      	b.n	800383c <DMA_CheckFifoParam+0xe8>
      break;
 8003832:	bf00      	nop
 8003834:	e002      	b.n	800383c <DMA_CheckFifoParam+0xe8>
      break;   
 8003836:	bf00      	nop
 8003838:	e000      	b.n	800383c <DMA_CheckFifoParam+0xe8>
      break;
 800383a:	bf00      	nop
    }
  } 
  
  return status; 
 800383c:	7bfb      	ldrb	r3, [r7, #15]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop

0800384c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800384c:	b480      	push	{r7}
 800384e:	b089      	sub	sp, #36	; 0x24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800385a:	2300      	movs	r3, #0
 800385c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800385e:	2300      	movs	r3, #0
 8003860:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003862:	2300      	movs	r3, #0
 8003864:	61fb      	str	r3, [r7, #28]
 8003866:	e177      	b.n	8003b58 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003868:	2201      	movs	r2, #1
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	4013      	ands	r3, r2
 800387a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	429a      	cmp	r2, r3
 8003882:	f040 8166 	bne.w	8003b52 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	2b01      	cmp	r3, #1
 8003890:	d005      	beq.n	800389e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800389a:	2b02      	cmp	r3, #2
 800389c:	d130      	bne.n	8003900 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	2203      	movs	r2, #3
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	43db      	mvns	r3, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4013      	ands	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038d4:	2201      	movs	r2, #1
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	43db      	mvns	r3, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4013      	ands	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	091b      	lsrs	r3, r3, #4
 80038ea:	f003 0201 	and.w	r2, r3, #1
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f003 0303 	and.w	r3, r3, #3
 8003908:	2b03      	cmp	r3, #3
 800390a:	d017      	beq.n	800393c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	2203      	movs	r2, #3
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	43db      	mvns	r3, r3
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	4013      	ands	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4313      	orrs	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f003 0303 	and.w	r3, r3, #3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d123      	bne.n	8003990 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	08da      	lsrs	r2, r3, #3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3208      	adds	r2, #8
 8003950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003954:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	220f      	movs	r2, #15
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	43db      	mvns	r3, r3
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	4013      	ands	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4313      	orrs	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	08da      	lsrs	r2, r3, #3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	3208      	adds	r2, #8
 800398a:	69b9      	ldr	r1, [r7, #24]
 800398c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	2203      	movs	r2, #3
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	43db      	mvns	r3, r3
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	4013      	ands	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f003 0203 	and.w	r2, r3, #3
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 80c0 	beq.w	8003b52 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039d2:	2300      	movs	r3, #0
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	4b66      	ldr	r3, [pc, #408]	; (8003b70 <HAL_GPIO_Init+0x324>)
 80039d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039da:	4a65      	ldr	r2, [pc, #404]	; (8003b70 <HAL_GPIO_Init+0x324>)
 80039dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039e0:	6453      	str	r3, [r2, #68]	; 0x44
 80039e2:	4b63      	ldr	r3, [pc, #396]	; (8003b70 <HAL_GPIO_Init+0x324>)
 80039e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039ee:	4a61      	ldr	r2, [pc, #388]	; (8003b74 <HAL_GPIO_Init+0x328>)
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	089b      	lsrs	r3, r3, #2
 80039f4:	3302      	adds	r3, #2
 80039f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	220f      	movs	r2, #15
 8003a06:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0a:	43db      	mvns	r3, r3
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a58      	ldr	r2, [pc, #352]	; (8003b78 <HAL_GPIO_Init+0x32c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d037      	beq.n	8003a8a <HAL_GPIO_Init+0x23e>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a57      	ldr	r2, [pc, #348]	; (8003b7c <HAL_GPIO_Init+0x330>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d031      	beq.n	8003a86 <HAL_GPIO_Init+0x23a>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a56      	ldr	r2, [pc, #344]	; (8003b80 <HAL_GPIO_Init+0x334>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d02b      	beq.n	8003a82 <HAL_GPIO_Init+0x236>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a55      	ldr	r2, [pc, #340]	; (8003b84 <HAL_GPIO_Init+0x338>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d025      	beq.n	8003a7e <HAL_GPIO_Init+0x232>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a54      	ldr	r2, [pc, #336]	; (8003b88 <HAL_GPIO_Init+0x33c>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d01f      	beq.n	8003a7a <HAL_GPIO_Init+0x22e>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a53      	ldr	r2, [pc, #332]	; (8003b8c <HAL_GPIO_Init+0x340>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d019      	beq.n	8003a76 <HAL_GPIO_Init+0x22a>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a52      	ldr	r2, [pc, #328]	; (8003b90 <HAL_GPIO_Init+0x344>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d013      	beq.n	8003a72 <HAL_GPIO_Init+0x226>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a51      	ldr	r2, [pc, #324]	; (8003b94 <HAL_GPIO_Init+0x348>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d00d      	beq.n	8003a6e <HAL_GPIO_Init+0x222>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a50      	ldr	r2, [pc, #320]	; (8003b98 <HAL_GPIO_Init+0x34c>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d007      	beq.n	8003a6a <HAL_GPIO_Init+0x21e>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a4f      	ldr	r2, [pc, #316]	; (8003b9c <HAL_GPIO_Init+0x350>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d101      	bne.n	8003a66 <HAL_GPIO_Init+0x21a>
 8003a62:	2309      	movs	r3, #9
 8003a64:	e012      	b.n	8003a8c <HAL_GPIO_Init+0x240>
 8003a66:	230a      	movs	r3, #10
 8003a68:	e010      	b.n	8003a8c <HAL_GPIO_Init+0x240>
 8003a6a:	2308      	movs	r3, #8
 8003a6c:	e00e      	b.n	8003a8c <HAL_GPIO_Init+0x240>
 8003a6e:	2307      	movs	r3, #7
 8003a70:	e00c      	b.n	8003a8c <HAL_GPIO_Init+0x240>
 8003a72:	2306      	movs	r3, #6
 8003a74:	e00a      	b.n	8003a8c <HAL_GPIO_Init+0x240>
 8003a76:	2305      	movs	r3, #5
 8003a78:	e008      	b.n	8003a8c <HAL_GPIO_Init+0x240>
 8003a7a:	2304      	movs	r3, #4
 8003a7c:	e006      	b.n	8003a8c <HAL_GPIO_Init+0x240>
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e004      	b.n	8003a8c <HAL_GPIO_Init+0x240>
 8003a82:	2302      	movs	r3, #2
 8003a84:	e002      	b.n	8003a8c <HAL_GPIO_Init+0x240>
 8003a86:	2301      	movs	r3, #1
 8003a88:	e000      	b.n	8003a8c <HAL_GPIO_Init+0x240>
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	69fa      	ldr	r2, [r7, #28]
 8003a8e:	f002 0203 	and.w	r2, r2, #3
 8003a92:	0092      	lsls	r2, r2, #2
 8003a94:	4093      	lsls	r3, r2
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a9c:	4935      	ldr	r1, [pc, #212]	; (8003b74 <HAL_GPIO_Init+0x328>)
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	089b      	lsrs	r3, r3, #2
 8003aa2:	3302      	adds	r3, #2
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003aaa:	4b3d      	ldr	r3, [pc, #244]	; (8003ba0 <HAL_GPIO_Init+0x354>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	43db      	mvns	r3, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ace:	4a34      	ldr	r2, [pc, #208]	; (8003ba0 <HAL_GPIO_Init+0x354>)
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ad4:	4b32      	ldr	r3, [pc, #200]	; (8003ba0 <HAL_GPIO_Init+0x354>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	43db      	mvns	r3, r3
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003af8:	4a29      	ldr	r2, [pc, #164]	; (8003ba0 <HAL_GPIO_Init+0x354>)
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003afe:	4b28      	ldr	r3, [pc, #160]	; (8003ba0 <HAL_GPIO_Init+0x354>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	43db      	mvns	r3, r3
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b22:	4a1f      	ldr	r2, [pc, #124]	; (8003ba0 <HAL_GPIO_Init+0x354>)
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b28:	4b1d      	ldr	r3, [pc, #116]	; (8003ba0 <HAL_GPIO_Init+0x354>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	43db      	mvns	r3, r3
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	4013      	ands	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b4c:	4a14      	ldr	r2, [pc, #80]	; (8003ba0 <HAL_GPIO_Init+0x354>)
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	3301      	adds	r3, #1
 8003b56:	61fb      	str	r3, [r7, #28]
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	2b0f      	cmp	r3, #15
 8003b5c:	f67f ae84 	bls.w	8003868 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b60:	bf00      	nop
 8003b62:	bf00      	nop
 8003b64:	3724      	adds	r7, #36	; 0x24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	40023800 	.word	0x40023800
 8003b74:	40013800 	.word	0x40013800
 8003b78:	40020000 	.word	0x40020000
 8003b7c:	40020400 	.word	0x40020400
 8003b80:	40020800 	.word	0x40020800
 8003b84:	40020c00 	.word	0x40020c00
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	40021400 	.word	0x40021400
 8003b90:	40021800 	.word	0x40021800
 8003b94:	40021c00 	.word	0x40021c00
 8003b98:	40022000 	.word	0x40022000
 8003b9c:	40022400 	.word	0x40022400
 8003ba0:	40013c00 	.word	0x40013c00

08003ba4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	460b      	mov	r3, r1
 8003bae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691a      	ldr	r2, [r3, #16]
 8003bb4:	887b      	ldrh	r3, [r7, #2]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d002      	beq.n	8003bc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	73fb      	strb	r3, [r7, #15]
 8003bc0:	e001      	b.n	8003bc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	807b      	strh	r3, [r7, #2]
 8003be0:	4613      	mov	r3, r2
 8003be2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003be4:	787b      	ldrb	r3, [r7, #1]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bea:	887a      	ldrh	r2, [r7, #2]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bf0:	e003      	b.n	8003bfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bf2:	887b      	ldrh	r3, [r7, #2]
 8003bf4:	041a      	lsls	r2, r3, #16
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	619a      	str	r2, [r3, #24]
}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
	...

08003c08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e267      	b.n	80040ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d075      	beq.n	8003d12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c26:	4b88      	ldr	r3, [pc, #544]	; (8003e48 <HAL_RCC_OscConfig+0x240>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 030c 	and.w	r3, r3, #12
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d00c      	beq.n	8003c4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c32:	4b85      	ldr	r3, [pc, #532]	; (8003e48 <HAL_RCC_OscConfig+0x240>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c3a:	2b08      	cmp	r3, #8
 8003c3c:	d112      	bne.n	8003c64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c3e:	4b82      	ldr	r3, [pc, #520]	; (8003e48 <HAL_RCC_OscConfig+0x240>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c4a:	d10b      	bne.n	8003c64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c4c:	4b7e      	ldr	r3, [pc, #504]	; (8003e48 <HAL_RCC_OscConfig+0x240>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d05b      	beq.n	8003d10 <HAL_RCC_OscConfig+0x108>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d157      	bne.n	8003d10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e242      	b.n	80040ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c6c:	d106      	bne.n	8003c7c <HAL_RCC_OscConfig+0x74>
 8003c6e:	4b76      	ldr	r3, [pc, #472]	; (8003e48 <HAL_RCC_OscConfig+0x240>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a75      	ldr	r2, [pc, #468]	; (8003e48 <HAL_RCC_OscConfig+0x240>)
 8003c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c78:	6013      	str	r3, [r2, #0]
 8003c7a:	e01d      	b.n	8003cb8 <HAL_RCC_OscConfig+0xb0>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c84:	d10c      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x98>
 8003c86:	4b70      	ldr	r3, [pc, #448]	; (8003e48 <HAL_RCC_OscConfig+0x240>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a6f      	ldr	r2, [pc, #444]	; (8003e48 <HAL_RCC_OscConfig+0x240>)
 8003c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c90:	6013      	str	r3, [r2, #0]
 8003c92:	4b6d      	ldr	r3, [pc, #436]	; (8003e48 <HAL_RCC_OscConfig+0x240>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a6c      	ldr	r2, [pc, #432]	; (8003e48 <HAL_RCC_OscConfig+0x240>)
 8003c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	e00b      	b.n	8003cb8 <HAL_RCC_OscConfig+0xb0>
 8003ca0:	4b69      	ldr	r3, [pc, #420]	; (8003e48 <HAL_RCC_OscConfig+0x240>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a68      	ldr	r2, [pc, #416]	; (8003e48 <HAL_RCC_OscConfig+0x240>)
 8003ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003caa:	6013      	str	r3, [r2, #0]
 8003cac:	4b66      	ldr	r3, [pc, #408]	; (8003e48 <HAL_RCC_OscConfig+0x240>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a65      	ldr	r2, [pc, #404]	; (8003e48 <HAL_RCC_OscConfig+0x240>)
 8003cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d013      	beq.n	8003ce8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc0:	f7fe fcce 	bl	8002660 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cc8:	f7fe fcca 	bl	8002660 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b64      	cmp	r3, #100	; 0x64
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e207      	b.n	80040ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cda:	4b5b      	ldr	r3, [pc, #364]	; (8003e48 <HAL_RCC_OscConfig+0x240>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0f0      	beq.n	8003cc8 <HAL_RCC_OscConfig+0xc0>
 8003ce6:	e014      	b.n	8003d12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce8:	f7fe fcba 	bl	8002660 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cf0:	f7fe fcb6 	bl	8002660 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b64      	cmp	r3, #100	; 0x64
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e1f3      	b.n	80040ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d02:	4b51      	ldr	r3, [pc, #324]	; (8003e48 <HAL_RCC_OscConfig+0x240>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1f0      	bne.n	8003cf0 <HAL_RCC_OscConfig+0xe8>
 8003d0e:	e000      	b.n	8003d12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d063      	beq.n	8003de6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d1e:	4b4a      	ldr	r3, [pc, #296]	; (8003e48 <HAL_RCC_OscConfig+0x240>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 030c 	and.w	r3, r3, #12
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00b      	beq.n	8003d42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d2a:	4b47      	ldr	r3, [pc, #284]	; (8003e48 <HAL_RCC_OscConfig+0x240>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d32:	2b08      	cmp	r3, #8
 8003d34:	d11c      	bne.n	8003d70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d36:	4b44      	ldr	r3, [pc, #272]	; (8003e48 <HAL_RCC_OscConfig+0x240>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d116      	bne.n	8003d70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d42:	4b41      	ldr	r3, [pc, #260]	; (8003e48 <HAL_RCC_OscConfig+0x240>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d005      	beq.n	8003d5a <HAL_RCC_OscConfig+0x152>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d001      	beq.n	8003d5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e1c7      	b.n	80040ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d5a:	4b3b      	ldr	r3, [pc, #236]	; (8003e48 <HAL_RCC_OscConfig+0x240>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	4937      	ldr	r1, [pc, #220]	; (8003e48 <HAL_RCC_OscConfig+0x240>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d6e:	e03a      	b.n	8003de6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d020      	beq.n	8003dba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d78:	4b34      	ldr	r3, [pc, #208]	; (8003e4c <HAL_RCC_OscConfig+0x244>)
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7e:	f7fe fc6f 	bl	8002660 <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d84:	e008      	b.n	8003d98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d86:	f7fe fc6b 	bl	8002660 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e1a8      	b.n	80040ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d98:	4b2b      	ldr	r3, [pc, #172]	; (8003e48 <HAL_RCC_OscConfig+0x240>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0f0      	beq.n	8003d86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003da4:	4b28      	ldr	r3, [pc, #160]	; (8003e48 <HAL_RCC_OscConfig+0x240>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	4925      	ldr	r1, [pc, #148]	; (8003e48 <HAL_RCC_OscConfig+0x240>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	600b      	str	r3, [r1, #0]
 8003db8:	e015      	b.n	8003de6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dba:	4b24      	ldr	r3, [pc, #144]	; (8003e4c <HAL_RCC_OscConfig+0x244>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc0:	f7fe fc4e 	bl	8002660 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dc8:	f7fe fc4a 	bl	8002660 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e187      	b.n	80040ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dda:	4b1b      	ldr	r3, [pc, #108]	; (8003e48 <HAL_RCC_OscConfig+0x240>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f0      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0308 	and.w	r3, r3, #8
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d036      	beq.n	8003e60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d016      	beq.n	8003e28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dfa:	4b15      	ldr	r3, [pc, #84]	; (8003e50 <HAL_RCC_OscConfig+0x248>)
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e00:	f7fe fc2e 	bl	8002660 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e08:	f7fe fc2a 	bl	8002660 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e167      	b.n	80040ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e1a:	4b0b      	ldr	r3, [pc, #44]	; (8003e48 <HAL_RCC_OscConfig+0x240>)
 8003e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0f0      	beq.n	8003e08 <HAL_RCC_OscConfig+0x200>
 8003e26:	e01b      	b.n	8003e60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e28:	4b09      	ldr	r3, [pc, #36]	; (8003e50 <HAL_RCC_OscConfig+0x248>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e2e:	f7fe fc17 	bl	8002660 <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e34:	e00e      	b.n	8003e54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e36:	f7fe fc13 	bl	8002660 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d907      	bls.n	8003e54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e150      	b.n	80040ea <HAL_RCC_OscConfig+0x4e2>
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	42470000 	.word	0x42470000
 8003e50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e54:	4b88      	ldr	r3, [pc, #544]	; (8004078 <HAL_RCC_OscConfig+0x470>)
 8003e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1ea      	bne.n	8003e36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 8097 	beq.w	8003f9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e72:	4b81      	ldr	r3, [pc, #516]	; (8004078 <HAL_RCC_OscConfig+0x470>)
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10f      	bne.n	8003e9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60bb      	str	r3, [r7, #8]
 8003e82:	4b7d      	ldr	r3, [pc, #500]	; (8004078 <HAL_RCC_OscConfig+0x470>)
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	4a7c      	ldr	r2, [pc, #496]	; (8004078 <HAL_RCC_OscConfig+0x470>)
 8003e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e8e:	4b7a      	ldr	r3, [pc, #488]	; (8004078 <HAL_RCC_OscConfig+0x470>)
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e96:	60bb      	str	r3, [r7, #8]
 8003e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e9e:	4b77      	ldr	r3, [pc, #476]	; (800407c <HAL_RCC_OscConfig+0x474>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d118      	bne.n	8003edc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eaa:	4b74      	ldr	r3, [pc, #464]	; (800407c <HAL_RCC_OscConfig+0x474>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a73      	ldr	r2, [pc, #460]	; (800407c <HAL_RCC_OscConfig+0x474>)
 8003eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eb6:	f7fe fbd3 	bl	8002660 <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ebc:	e008      	b.n	8003ed0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ebe:	f7fe fbcf 	bl	8002660 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e10c      	b.n	80040ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed0:	4b6a      	ldr	r3, [pc, #424]	; (800407c <HAL_RCC_OscConfig+0x474>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d0f0      	beq.n	8003ebe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d106      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x2ea>
 8003ee4:	4b64      	ldr	r3, [pc, #400]	; (8004078 <HAL_RCC_OscConfig+0x470>)
 8003ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee8:	4a63      	ldr	r2, [pc, #396]	; (8004078 <HAL_RCC_OscConfig+0x470>)
 8003eea:	f043 0301 	orr.w	r3, r3, #1
 8003eee:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef0:	e01c      	b.n	8003f2c <HAL_RCC_OscConfig+0x324>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	2b05      	cmp	r3, #5
 8003ef8:	d10c      	bne.n	8003f14 <HAL_RCC_OscConfig+0x30c>
 8003efa:	4b5f      	ldr	r3, [pc, #380]	; (8004078 <HAL_RCC_OscConfig+0x470>)
 8003efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efe:	4a5e      	ldr	r2, [pc, #376]	; (8004078 <HAL_RCC_OscConfig+0x470>)
 8003f00:	f043 0304 	orr.w	r3, r3, #4
 8003f04:	6713      	str	r3, [r2, #112]	; 0x70
 8003f06:	4b5c      	ldr	r3, [pc, #368]	; (8004078 <HAL_RCC_OscConfig+0x470>)
 8003f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0a:	4a5b      	ldr	r2, [pc, #364]	; (8004078 <HAL_RCC_OscConfig+0x470>)
 8003f0c:	f043 0301 	orr.w	r3, r3, #1
 8003f10:	6713      	str	r3, [r2, #112]	; 0x70
 8003f12:	e00b      	b.n	8003f2c <HAL_RCC_OscConfig+0x324>
 8003f14:	4b58      	ldr	r3, [pc, #352]	; (8004078 <HAL_RCC_OscConfig+0x470>)
 8003f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f18:	4a57      	ldr	r2, [pc, #348]	; (8004078 <HAL_RCC_OscConfig+0x470>)
 8003f1a:	f023 0301 	bic.w	r3, r3, #1
 8003f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f20:	4b55      	ldr	r3, [pc, #340]	; (8004078 <HAL_RCC_OscConfig+0x470>)
 8003f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f24:	4a54      	ldr	r2, [pc, #336]	; (8004078 <HAL_RCC_OscConfig+0x470>)
 8003f26:	f023 0304 	bic.w	r3, r3, #4
 8003f2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d015      	beq.n	8003f60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f34:	f7fe fb94 	bl	8002660 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f3a:	e00a      	b.n	8003f52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f3c:	f7fe fb90 	bl	8002660 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e0cb      	b.n	80040ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f52:	4b49      	ldr	r3, [pc, #292]	; (8004078 <HAL_RCC_OscConfig+0x470>)
 8003f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0ee      	beq.n	8003f3c <HAL_RCC_OscConfig+0x334>
 8003f5e:	e014      	b.n	8003f8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f60:	f7fe fb7e 	bl	8002660 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f66:	e00a      	b.n	8003f7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f68:	f7fe fb7a 	bl	8002660 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e0b5      	b.n	80040ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f7e:	4b3e      	ldr	r3, [pc, #248]	; (8004078 <HAL_RCC_OscConfig+0x470>)
 8003f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1ee      	bne.n	8003f68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f8a:	7dfb      	ldrb	r3, [r7, #23]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d105      	bne.n	8003f9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f90:	4b39      	ldr	r3, [pc, #228]	; (8004078 <HAL_RCC_OscConfig+0x470>)
 8003f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f94:	4a38      	ldr	r2, [pc, #224]	; (8004078 <HAL_RCC_OscConfig+0x470>)
 8003f96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 80a1 	beq.w	80040e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fa6:	4b34      	ldr	r3, [pc, #208]	; (8004078 <HAL_RCC_OscConfig+0x470>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 030c 	and.w	r3, r3, #12
 8003fae:	2b08      	cmp	r3, #8
 8003fb0:	d05c      	beq.n	800406c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d141      	bne.n	800403e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fba:	4b31      	ldr	r3, [pc, #196]	; (8004080 <HAL_RCC_OscConfig+0x478>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc0:	f7fe fb4e 	bl	8002660 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fc8:	f7fe fb4a 	bl	8002660 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e087      	b.n	80040ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fda:	4b27      	ldr	r3, [pc, #156]	; (8004078 <HAL_RCC_OscConfig+0x470>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1f0      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	69da      	ldr	r2, [r3, #28]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	019b      	lsls	r3, r3, #6
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffc:	085b      	lsrs	r3, r3, #1
 8003ffe:	3b01      	subs	r3, #1
 8004000:	041b      	lsls	r3, r3, #16
 8004002:	431a      	orrs	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004008:	061b      	lsls	r3, r3, #24
 800400a:	491b      	ldr	r1, [pc, #108]	; (8004078 <HAL_RCC_OscConfig+0x470>)
 800400c:	4313      	orrs	r3, r2
 800400e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004010:	4b1b      	ldr	r3, [pc, #108]	; (8004080 <HAL_RCC_OscConfig+0x478>)
 8004012:	2201      	movs	r2, #1
 8004014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004016:	f7fe fb23 	bl	8002660 <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800401e:	f7fe fb1f 	bl	8002660 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e05c      	b.n	80040ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004030:	4b11      	ldr	r3, [pc, #68]	; (8004078 <HAL_RCC_OscConfig+0x470>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d0f0      	beq.n	800401e <HAL_RCC_OscConfig+0x416>
 800403c:	e054      	b.n	80040e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800403e:	4b10      	ldr	r3, [pc, #64]	; (8004080 <HAL_RCC_OscConfig+0x478>)
 8004040:	2200      	movs	r2, #0
 8004042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004044:	f7fe fb0c 	bl	8002660 <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800404c:	f7fe fb08 	bl	8002660 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e045      	b.n	80040ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800405e:	4b06      	ldr	r3, [pc, #24]	; (8004078 <HAL_RCC_OscConfig+0x470>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1f0      	bne.n	800404c <HAL_RCC_OscConfig+0x444>
 800406a:	e03d      	b.n	80040e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d107      	bne.n	8004084 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e038      	b.n	80040ea <HAL_RCC_OscConfig+0x4e2>
 8004078:	40023800 	.word	0x40023800
 800407c:	40007000 	.word	0x40007000
 8004080:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004084:	4b1b      	ldr	r3, [pc, #108]	; (80040f4 <HAL_RCC_OscConfig+0x4ec>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d028      	beq.n	80040e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800409c:	429a      	cmp	r2, r3
 800409e:	d121      	bne.n	80040e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d11a      	bne.n	80040e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040b4:	4013      	ands	r3, r2
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040bc:	4293      	cmp	r3, r2
 80040be:	d111      	bne.n	80040e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ca:	085b      	lsrs	r3, r3, #1
 80040cc:	3b01      	subs	r3, #1
 80040ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d107      	bne.n	80040e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d001      	beq.n	80040e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e000      	b.n	80040ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3718      	adds	r7, #24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	40023800 	.word	0x40023800

080040f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e0cc      	b.n	80042a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800410c:	4b68      	ldr	r3, [pc, #416]	; (80042b0 <HAL_RCC_ClockConfig+0x1b8>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 030f 	and.w	r3, r3, #15
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	429a      	cmp	r2, r3
 8004118:	d90c      	bls.n	8004134 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800411a:	4b65      	ldr	r3, [pc, #404]	; (80042b0 <HAL_RCC_ClockConfig+0x1b8>)
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	b2d2      	uxtb	r2, r2
 8004120:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004122:	4b63      	ldr	r3, [pc, #396]	; (80042b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	429a      	cmp	r2, r3
 800412e:	d001      	beq.n	8004134 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e0b8      	b.n	80042a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d020      	beq.n	8004182 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b00      	cmp	r3, #0
 800414a:	d005      	beq.n	8004158 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800414c:	4b59      	ldr	r3, [pc, #356]	; (80042b4 <HAL_RCC_ClockConfig+0x1bc>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	4a58      	ldr	r2, [pc, #352]	; (80042b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004152:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004156:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0308 	and.w	r3, r3, #8
 8004160:	2b00      	cmp	r3, #0
 8004162:	d005      	beq.n	8004170 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004164:	4b53      	ldr	r3, [pc, #332]	; (80042b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	4a52      	ldr	r2, [pc, #328]	; (80042b4 <HAL_RCC_ClockConfig+0x1bc>)
 800416a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800416e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004170:	4b50      	ldr	r3, [pc, #320]	; (80042b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	494d      	ldr	r1, [pc, #308]	; (80042b4 <HAL_RCC_ClockConfig+0x1bc>)
 800417e:	4313      	orrs	r3, r2
 8004180:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d044      	beq.n	8004218 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d107      	bne.n	80041a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004196:	4b47      	ldr	r3, [pc, #284]	; (80042b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d119      	bne.n	80041d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e07f      	b.n	80042a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d003      	beq.n	80041b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041b2:	2b03      	cmp	r3, #3
 80041b4:	d107      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b6:	4b3f      	ldr	r3, [pc, #252]	; (80042b4 <HAL_RCC_ClockConfig+0x1bc>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d109      	bne.n	80041d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e06f      	b.n	80042a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c6:	4b3b      	ldr	r3, [pc, #236]	; (80042b4 <HAL_RCC_ClockConfig+0x1bc>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e067      	b.n	80042a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041d6:	4b37      	ldr	r3, [pc, #220]	; (80042b4 <HAL_RCC_ClockConfig+0x1bc>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f023 0203 	bic.w	r2, r3, #3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	4934      	ldr	r1, [pc, #208]	; (80042b4 <HAL_RCC_ClockConfig+0x1bc>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041e8:	f7fe fa3a 	bl	8002660 <HAL_GetTick>
 80041ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ee:	e00a      	b.n	8004206 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041f0:	f7fe fa36 	bl	8002660 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fe:	4293      	cmp	r3, r2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e04f      	b.n	80042a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004206:	4b2b      	ldr	r3, [pc, #172]	; (80042b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f003 020c 	and.w	r2, r3, #12
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	429a      	cmp	r2, r3
 8004216:	d1eb      	bne.n	80041f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004218:	4b25      	ldr	r3, [pc, #148]	; (80042b0 <HAL_RCC_ClockConfig+0x1b8>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 030f 	and.w	r3, r3, #15
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	429a      	cmp	r2, r3
 8004224:	d20c      	bcs.n	8004240 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004226:	4b22      	ldr	r3, [pc, #136]	; (80042b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800422e:	4b20      	ldr	r3, [pc, #128]	; (80042b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 030f 	and.w	r3, r3, #15
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	429a      	cmp	r2, r3
 800423a:	d001      	beq.n	8004240 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e032      	b.n	80042a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b00      	cmp	r3, #0
 800424a:	d008      	beq.n	800425e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800424c:	4b19      	ldr	r3, [pc, #100]	; (80042b4 <HAL_RCC_ClockConfig+0x1bc>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	4916      	ldr	r1, [pc, #88]	; (80042b4 <HAL_RCC_ClockConfig+0x1bc>)
 800425a:	4313      	orrs	r3, r2
 800425c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0308 	and.w	r3, r3, #8
 8004266:	2b00      	cmp	r3, #0
 8004268:	d009      	beq.n	800427e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800426a:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <HAL_RCC_ClockConfig+0x1bc>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	490e      	ldr	r1, [pc, #56]	; (80042b4 <HAL_RCC_ClockConfig+0x1bc>)
 800427a:	4313      	orrs	r3, r2
 800427c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800427e:	f000 f821 	bl	80042c4 <HAL_RCC_GetSysClockFreq>
 8004282:	4602      	mov	r2, r0
 8004284:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	091b      	lsrs	r3, r3, #4
 800428a:	f003 030f 	and.w	r3, r3, #15
 800428e:	490a      	ldr	r1, [pc, #40]	; (80042b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004290:	5ccb      	ldrb	r3, [r1, r3]
 8004292:	fa22 f303 	lsr.w	r3, r2, r3
 8004296:	4a09      	ldr	r2, [pc, #36]	; (80042bc <HAL_RCC_ClockConfig+0x1c4>)
 8004298:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800429a:	4b09      	ldr	r3, [pc, #36]	; (80042c0 <HAL_RCC_ClockConfig+0x1c8>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4618      	mov	r0, r3
 80042a0:	f7fe f99a 	bl	80025d8 <HAL_InitTick>

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	40023c00 	.word	0x40023c00
 80042b4:	40023800 	.word	0x40023800
 80042b8:	08006f34 	.word	0x08006f34
 80042bc:	200000a4 	.word	0x200000a4
 80042c0:	200000a8 	.word	0x200000a8

080042c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042c8:	b090      	sub	sp, #64	; 0x40
 80042ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	637b      	str	r3, [r7, #52]	; 0x34
 80042d0:	2300      	movs	r3, #0
 80042d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042d4:	2300      	movs	r3, #0
 80042d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042dc:	4b59      	ldr	r3, [pc, #356]	; (8004444 <HAL_RCC_GetSysClockFreq+0x180>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f003 030c 	and.w	r3, r3, #12
 80042e4:	2b08      	cmp	r3, #8
 80042e6:	d00d      	beq.n	8004304 <HAL_RCC_GetSysClockFreq+0x40>
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	f200 80a1 	bhi.w	8004430 <HAL_RCC_GetSysClockFreq+0x16c>
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d002      	beq.n	80042f8 <HAL_RCC_GetSysClockFreq+0x34>
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d003      	beq.n	80042fe <HAL_RCC_GetSysClockFreq+0x3a>
 80042f6:	e09b      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042f8:	4b53      	ldr	r3, [pc, #332]	; (8004448 <HAL_RCC_GetSysClockFreq+0x184>)
 80042fa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80042fc:	e09b      	b.n	8004436 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042fe:	4b53      	ldr	r3, [pc, #332]	; (800444c <HAL_RCC_GetSysClockFreq+0x188>)
 8004300:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004302:	e098      	b.n	8004436 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004304:	4b4f      	ldr	r3, [pc, #316]	; (8004444 <HAL_RCC_GetSysClockFreq+0x180>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800430c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800430e:	4b4d      	ldr	r3, [pc, #308]	; (8004444 <HAL_RCC_GetSysClockFreq+0x180>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d028      	beq.n	800436c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800431a:	4b4a      	ldr	r3, [pc, #296]	; (8004444 <HAL_RCC_GetSysClockFreq+0x180>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	099b      	lsrs	r3, r3, #6
 8004320:	2200      	movs	r2, #0
 8004322:	623b      	str	r3, [r7, #32]
 8004324:	627a      	str	r2, [r7, #36]	; 0x24
 8004326:	6a3b      	ldr	r3, [r7, #32]
 8004328:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800432c:	2100      	movs	r1, #0
 800432e:	4b47      	ldr	r3, [pc, #284]	; (800444c <HAL_RCC_GetSysClockFreq+0x188>)
 8004330:	fb03 f201 	mul.w	r2, r3, r1
 8004334:	2300      	movs	r3, #0
 8004336:	fb00 f303 	mul.w	r3, r0, r3
 800433a:	4413      	add	r3, r2
 800433c:	4a43      	ldr	r2, [pc, #268]	; (800444c <HAL_RCC_GetSysClockFreq+0x188>)
 800433e:	fba0 1202 	umull	r1, r2, r0, r2
 8004342:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004344:	460a      	mov	r2, r1
 8004346:	62ba      	str	r2, [r7, #40]	; 0x28
 8004348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800434a:	4413      	add	r3, r2
 800434c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800434e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004350:	2200      	movs	r2, #0
 8004352:	61bb      	str	r3, [r7, #24]
 8004354:	61fa      	str	r2, [r7, #28]
 8004356:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800435a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800435e:	f7fb ffa7 	bl	80002b0 <__aeabi_uldivmod>
 8004362:	4602      	mov	r2, r0
 8004364:	460b      	mov	r3, r1
 8004366:	4613      	mov	r3, r2
 8004368:	63fb      	str	r3, [r7, #60]	; 0x3c
 800436a:	e053      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800436c:	4b35      	ldr	r3, [pc, #212]	; (8004444 <HAL_RCC_GetSysClockFreq+0x180>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	099b      	lsrs	r3, r3, #6
 8004372:	2200      	movs	r2, #0
 8004374:	613b      	str	r3, [r7, #16]
 8004376:	617a      	str	r2, [r7, #20]
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800437e:	f04f 0b00 	mov.w	fp, #0
 8004382:	4652      	mov	r2, sl
 8004384:	465b      	mov	r3, fp
 8004386:	f04f 0000 	mov.w	r0, #0
 800438a:	f04f 0100 	mov.w	r1, #0
 800438e:	0159      	lsls	r1, r3, #5
 8004390:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004394:	0150      	lsls	r0, r2, #5
 8004396:	4602      	mov	r2, r0
 8004398:	460b      	mov	r3, r1
 800439a:	ebb2 080a 	subs.w	r8, r2, sl
 800439e:	eb63 090b 	sbc.w	r9, r3, fp
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	f04f 0300 	mov.w	r3, #0
 80043aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80043ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80043b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80043b6:	ebb2 0408 	subs.w	r4, r2, r8
 80043ba:	eb63 0509 	sbc.w	r5, r3, r9
 80043be:	f04f 0200 	mov.w	r2, #0
 80043c2:	f04f 0300 	mov.w	r3, #0
 80043c6:	00eb      	lsls	r3, r5, #3
 80043c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043cc:	00e2      	lsls	r2, r4, #3
 80043ce:	4614      	mov	r4, r2
 80043d0:	461d      	mov	r5, r3
 80043d2:	eb14 030a 	adds.w	r3, r4, sl
 80043d6:	603b      	str	r3, [r7, #0]
 80043d8:	eb45 030b 	adc.w	r3, r5, fp
 80043dc:	607b      	str	r3, [r7, #4]
 80043de:	f04f 0200 	mov.w	r2, #0
 80043e2:	f04f 0300 	mov.w	r3, #0
 80043e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043ea:	4629      	mov	r1, r5
 80043ec:	028b      	lsls	r3, r1, #10
 80043ee:	4621      	mov	r1, r4
 80043f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043f4:	4621      	mov	r1, r4
 80043f6:	028a      	lsls	r2, r1, #10
 80043f8:	4610      	mov	r0, r2
 80043fa:	4619      	mov	r1, r3
 80043fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043fe:	2200      	movs	r2, #0
 8004400:	60bb      	str	r3, [r7, #8]
 8004402:	60fa      	str	r2, [r7, #12]
 8004404:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004408:	f7fb ff52 	bl	80002b0 <__aeabi_uldivmod>
 800440c:	4602      	mov	r2, r0
 800440e:	460b      	mov	r3, r1
 8004410:	4613      	mov	r3, r2
 8004412:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004414:	4b0b      	ldr	r3, [pc, #44]	; (8004444 <HAL_RCC_GetSysClockFreq+0x180>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	0c1b      	lsrs	r3, r3, #16
 800441a:	f003 0303 	and.w	r3, r3, #3
 800441e:	3301      	adds	r3, #1
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004424:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004428:	fbb2 f3f3 	udiv	r3, r2, r3
 800442c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800442e:	e002      	b.n	8004436 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004430:	4b05      	ldr	r3, [pc, #20]	; (8004448 <HAL_RCC_GetSysClockFreq+0x184>)
 8004432:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004434:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004438:	4618      	mov	r0, r3
 800443a:	3740      	adds	r7, #64	; 0x40
 800443c:	46bd      	mov	sp, r7
 800443e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004442:	bf00      	nop
 8004444:	40023800 	.word	0x40023800
 8004448:	00f42400 	.word	0x00f42400
 800444c:	017d7840 	.word	0x017d7840

08004450 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004450:	b480      	push	{r7}
 8004452:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004454:	4b03      	ldr	r3, [pc, #12]	; (8004464 <HAL_RCC_GetHCLKFreq+0x14>)
 8004456:	681b      	ldr	r3, [r3, #0]
}
 8004458:	4618      	mov	r0, r3
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	200000a4 	.word	0x200000a4

08004468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800446c:	f7ff fff0 	bl	8004450 <HAL_RCC_GetHCLKFreq>
 8004470:	4602      	mov	r2, r0
 8004472:	4b05      	ldr	r3, [pc, #20]	; (8004488 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	0a9b      	lsrs	r3, r3, #10
 8004478:	f003 0307 	and.w	r3, r3, #7
 800447c:	4903      	ldr	r1, [pc, #12]	; (800448c <HAL_RCC_GetPCLK1Freq+0x24>)
 800447e:	5ccb      	ldrb	r3, [r1, r3]
 8004480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004484:	4618      	mov	r0, r3
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40023800 	.word	0x40023800
 800448c:	08006f44 	.word	0x08006f44

08004490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004494:	f7ff ffdc 	bl	8004450 <HAL_RCC_GetHCLKFreq>
 8004498:	4602      	mov	r2, r0
 800449a:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	0b5b      	lsrs	r3, r3, #13
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	4903      	ldr	r1, [pc, #12]	; (80044b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044a6:	5ccb      	ldrb	r3, [r1, r3]
 80044a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	40023800 	.word	0x40023800
 80044b4:	08006f44 	.word	0x08006f44

080044b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e07b      	b.n	80045c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d108      	bne.n	80044e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044da:	d009      	beq.n	80044f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	61da      	str	r2, [r3, #28]
 80044e2:	e005      	b.n	80044f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d106      	bne.n	8004510 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7fd fe22 	bl	8002154 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004526:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004538:	431a      	orrs	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	431a      	orrs	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004560:	431a      	orrs	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800456a:	431a      	orrs	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004574:	ea42 0103 	orr.w	r1, r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	0c1b      	lsrs	r3, r3, #16
 800458e:	f003 0104 	and.w	r1, r3, #4
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	f003 0210 	and.w	r2, r3, #16
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	69da      	ldr	r2, [r3, #28]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
	...

080045cc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b088      	sub	sp, #32
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10e      	bne.n	800460c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d009      	beq.n	800460c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d004      	beq.n	800460c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	4798      	blx	r3
    return;
 800460a:	e0ce      	b.n	80047aa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d009      	beq.n	800462a <HAL_SPI_IRQHandler+0x5e>
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461c:	2b00      	cmp	r3, #0
 800461e:	d004      	beq.n	800462a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	4798      	blx	r3
    return;
 8004628:	e0bf      	b.n	80047aa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	f003 0320 	and.w	r3, r3, #32
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10a      	bne.n	800464a <HAL_SPI_IRQHandler+0x7e>
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463a:	2b00      	cmp	r3, #0
 800463c:	d105      	bne.n	800464a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 80b0 	beq.w	80047aa <HAL_SPI_IRQHandler+0x1de>
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	f003 0320 	and.w	r3, r3, #32
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 80aa 	beq.w	80047aa <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465c:	2b00      	cmp	r3, #0
 800465e:	d023      	beq.n	80046a8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b03      	cmp	r3, #3
 800466a:	d011      	beq.n	8004690 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004670:	f043 0204 	orr.w	r2, r3, #4
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004678:	2300      	movs	r3, #0
 800467a:	617b      	str	r3, [r7, #20]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	617b      	str	r3, [r7, #20]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	617b      	str	r3, [r7, #20]
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	e00b      	b.n	80046a8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004690:	2300      	movs	r3, #0
 8004692:	613b      	str	r3, [r7, #16]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	613b      	str	r3, [r7, #16]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	613b      	str	r3, [r7, #16]
 80046a4:	693b      	ldr	r3, [r7, #16]
        return;
 80046a6:	e080      	b.n	80047aa <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	f003 0320 	and.w	r3, r3, #32
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d014      	beq.n	80046dc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b6:	f043 0201 	orr.w	r2, r3, #1
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80046be:	2300      	movs	r3, #0
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046d8:	601a      	str	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00c      	beq.n	8004700 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ea:	f043 0208 	orr.w	r2, r3, #8
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80046f2:	2300      	movs	r3, #0
 80046f4:	60bb      	str	r3, [r7, #8]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	60bb      	str	r3, [r7, #8]
 80046fe:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004704:	2b00      	cmp	r3, #0
 8004706:	d04f      	beq.n	80047a8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004716:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d104      	bne.n	8004734 <HAL_SPI_IRQHandler+0x168>
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b00      	cmp	r3, #0
 8004732:	d034      	beq.n	800479e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0203 	bic.w	r2, r2, #3
 8004742:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004748:	2b00      	cmp	r3, #0
 800474a:	d011      	beq.n	8004770 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004750:	4a17      	ldr	r2, [pc, #92]	; (80047b0 <HAL_SPI_IRQHandler+0x1e4>)
 8004752:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004758:	4618      	mov	r0, r3
 800475a:	f7fe fdeb 	bl	8003334 <HAL_DMA_Abort_IT>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d005      	beq.n	8004770 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004768:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004774:	2b00      	cmp	r3, #0
 8004776:	d016      	beq.n	80047a6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800477c:	4a0c      	ldr	r2, [pc, #48]	; (80047b0 <HAL_SPI_IRQHandler+0x1e4>)
 800477e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004784:	4618      	mov	r0, r3
 8004786:	f7fe fdd5 	bl	8003334 <HAL_DMA_Abort_IT>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00a      	beq.n	80047a6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004794:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800479c:	e003      	b.n	80047a6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f808 	bl	80047b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80047a4:	e000      	b.n	80047a8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80047a6:	bf00      	nop
    return;
 80047a8:	bf00      	nop
  }
}
 80047aa:	3720      	adds	r7, #32
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	080047c9 	.word	0x080047c9

080047b4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f7ff ffe6 	bl	80047b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80047e8:	bf00      	nop
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e041      	b.n	8004886 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d106      	bne.n	800481c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7fd fd20 	bl	800225c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	3304      	adds	r3, #4
 800482c:	4619      	mov	r1, r3
 800482e:	4610      	mov	r0, r2
 8004830:	f000 fad8 	bl	8004de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b082      	sub	sp, #8
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e041      	b.n	8004924 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d106      	bne.n	80048ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 f839 	bl	800492c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2202      	movs	r2, #2
 80048be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	3304      	adds	r3, #4
 80048ca:	4619      	mov	r1, r3
 80048cc:	4610      	mov	r0, r2
 80048ce:	f000 fa89 	bl	8004de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d109      	bne.n	8004964 <HAL_TIM_PWM_Start+0x24>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b01      	cmp	r3, #1
 800495a:	bf14      	ite	ne
 800495c:	2301      	movne	r3, #1
 800495e:	2300      	moveq	r3, #0
 8004960:	b2db      	uxtb	r3, r3
 8004962:	e022      	b.n	80049aa <HAL_TIM_PWM_Start+0x6a>
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	2b04      	cmp	r3, #4
 8004968:	d109      	bne.n	800497e <HAL_TIM_PWM_Start+0x3e>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b01      	cmp	r3, #1
 8004974:	bf14      	ite	ne
 8004976:	2301      	movne	r3, #1
 8004978:	2300      	moveq	r3, #0
 800497a:	b2db      	uxtb	r3, r3
 800497c:	e015      	b.n	80049aa <HAL_TIM_PWM_Start+0x6a>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2b08      	cmp	r3, #8
 8004982:	d109      	bne.n	8004998 <HAL_TIM_PWM_Start+0x58>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b01      	cmp	r3, #1
 800498e:	bf14      	ite	ne
 8004990:	2301      	movne	r3, #1
 8004992:	2300      	moveq	r3, #0
 8004994:	b2db      	uxtb	r3, r3
 8004996:	e008      	b.n	80049aa <HAL_TIM_PWM_Start+0x6a>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	bf14      	ite	ne
 80049a4:	2301      	movne	r3, #1
 80049a6:	2300      	moveq	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e07c      	b.n	8004aac <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d104      	bne.n	80049c2 <HAL_TIM_PWM_Start+0x82>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049c0:	e013      	b.n	80049ea <HAL_TIM_PWM_Start+0xaa>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b04      	cmp	r3, #4
 80049c6:	d104      	bne.n	80049d2 <HAL_TIM_PWM_Start+0x92>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2202      	movs	r2, #2
 80049cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049d0:	e00b      	b.n	80049ea <HAL_TIM_PWM_Start+0xaa>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2b08      	cmp	r3, #8
 80049d6:	d104      	bne.n	80049e2 <HAL_TIM_PWM_Start+0xa2>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2202      	movs	r2, #2
 80049dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049e0:	e003      	b.n	80049ea <HAL_TIM_PWM_Start+0xaa>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2202      	movs	r2, #2
 80049e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2201      	movs	r2, #1
 80049f0:	6839      	ldr	r1, [r7, #0]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fce0 	bl	80053b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a2d      	ldr	r2, [pc, #180]	; (8004ab4 <HAL_TIM_PWM_Start+0x174>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d004      	beq.n	8004a0c <HAL_TIM_PWM_Start+0xcc>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a2c      	ldr	r2, [pc, #176]	; (8004ab8 <HAL_TIM_PWM_Start+0x178>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d101      	bne.n	8004a10 <HAL_TIM_PWM_Start+0xd0>
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e000      	b.n	8004a12 <HAL_TIM_PWM_Start+0xd2>
 8004a10:	2300      	movs	r3, #0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d007      	beq.n	8004a26 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a22      	ldr	r2, [pc, #136]	; (8004ab4 <HAL_TIM_PWM_Start+0x174>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d022      	beq.n	8004a76 <HAL_TIM_PWM_Start+0x136>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a38:	d01d      	beq.n	8004a76 <HAL_TIM_PWM_Start+0x136>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a1f      	ldr	r2, [pc, #124]	; (8004abc <HAL_TIM_PWM_Start+0x17c>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d018      	beq.n	8004a76 <HAL_TIM_PWM_Start+0x136>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a1d      	ldr	r2, [pc, #116]	; (8004ac0 <HAL_TIM_PWM_Start+0x180>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d013      	beq.n	8004a76 <HAL_TIM_PWM_Start+0x136>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a1c      	ldr	r2, [pc, #112]	; (8004ac4 <HAL_TIM_PWM_Start+0x184>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d00e      	beq.n	8004a76 <HAL_TIM_PWM_Start+0x136>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a16      	ldr	r2, [pc, #88]	; (8004ab8 <HAL_TIM_PWM_Start+0x178>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d009      	beq.n	8004a76 <HAL_TIM_PWM_Start+0x136>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a18      	ldr	r2, [pc, #96]	; (8004ac8 <HAL_TIM_PWM_Start+0x188>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d004      	beq.n	8004a76 <HAL_TIM_PWM_Start+0x136>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a16      	ldr	r2, [pc, #88]	; (8004acc <HAL_TIM_PWM_Start+0x18c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d111      	bne.n	8004a9a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2b06      	cmp	r3, #6
 8004a86:	d010      	beq.n	8004aaa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0201 	orr.w	r2, r2, #1
 8004a96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a98:	e007      	b.n	8004aaa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f042 0201 	orr.w	r2, r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	40010000 	.word	0x40010000
 8004ab8:	40010400 	.word	0x40010400
 8004abc:	40000400 	.word	0x40000400
 8004ac0:	40000800 	.word	0x40000800
 8004ac4:	40000c00 	.word	0x40000c00
 8004ac8:	40014000 	.word	0x40014000
 8004acc:	40001800 	.word	0x40001800

08004ad0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004adc:	2300      	movs	r3, #0
 8004ade:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d101      	bne.n	8004aee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e0ae      	b.n	8004c4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b0c      	cmp	r3, #12
 8004afa:	f200 809f 	bhi.w	8004c3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004afe:	a201      	add	r2, pc, #4	; (adr r2, 8004b04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b04:	08004b39 	.word	0x08004b39
 8004b08:	08004c3d 	.word	0x08004c3d
 8004b0c:	08004c3d 	.word	0x08004c3d
 8004b10:	08004c3d 	.word	0x08004c3d
 8004b14:	08004b79 	.word	0x08004b79
 8004b18:	08004c3d 	.word	0x08004c3d
 8004b1c:	08004c3d 	.word	0x08004c3d
 8004b20:	08004c3d 	.word	0x08004c3d
 8004b24:	08004bbb 	.word	0x08004bbb
 8004b28:	08004c3d 	.word	0x08004c3d
 8004b2c:	08004c3d 	.word	0x08004c3d
 8004b30:	08004c3d 	.word	0x08004c3d
 8004b34:	08004bfb 	.word	0x08004bfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68b9      	ldr	r1, [r7, #8]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 f9f0 	bl	8004f24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	699a      	ldr	r2, [r3, #24]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 0208 	orr.w	r2, r2, #8
 8004b52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699a      	ldr	r2, [r3, #24]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0204 	bic.w	r2, r2, #4
 8004b62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6999      	ldr	r1, [r3, #24]
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	691a      	ldr	r2, [r3, #16]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	619a      	str	r2, [r3, #24]
      break;
 8004b76:	e064      	b.n	8004c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68b9      	ldr	r1, [r7, #8]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 fa40 	bl	8005004 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	699a      	ldr	r2, [r3, #24]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	699a      	ldr	r2, [r3, #24]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6999      	ldr	r1, [r3, #24]
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	021a      	lsls	r2, r3, #8
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	619a      	str	r2, [r3, #24]
      break;
 8004bb8:	e043      	b.n	8004c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68b9      	ldr	r1, [r7, #8]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 fa95 	bl	80050f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69da      	ldr	r2, [r3, #28]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f042 0208 	orr.w	r2, r2, #8
 8004bd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69da      	ldr	r2, [r3, #28]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0204 	bic.w	r2, r2, #4
 8004be4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69d9      	ldr	r1, [r3, #28]
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	691a      	ldr	r2, [r3, #16]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	61da      	str	r2, [r3, #28]
      break;
 8004bf8:	e023      	b.n	8004c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68b9      	ldr	r1, [r7, #8]
 8004c00:	4618      	mov	r0, r3
 8004c02:	f000 fae9 	bl	80051d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	69da      	ldr	r2, [r3, #28]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69da      	ldr	r2, [r3, #28]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	69d9      	ldr	r1, [r3, #28]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	021a      	lsls	r2, r3, #8
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	61da      	str	r2, [r3, #28]
      break;
 8004c3a:	e002      	b.n	8004c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3718      	adds	r7, #24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <HAL_TIM_ConfigClockSource+0x1c>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	e0b4      	b.n	8004dda <HAL_TIM_ConfigClockSource+0x186>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ca8:	d03e      	beq.n	8004d28 <HAL_TIM_ConfigClockSource+0xd4>
 8004caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cae:	f200 8087 	bhi.w	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb6:	f000 8086 	beq.w	8004dc6 <HAL_TIM_ConfigClockSource+0x172>
 8004cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cbe:	d87f      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc0:	2b70      	cmp	r3, #112	; 0x70
 8004cc2:	d01a      	beq.n	8004cfa <HAL_TIM_ConfigClockSource+0xa6>
 8004cc4:	2b70      	cmp	r3, #112	; 0x70
 8004cc6:	d87b      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc8:	2b60      	cmp	r3, #96	; 0x60
 8004cca:	d050      	beq.n	8004d6e <HAL_TIM_ConfigClockSource+0x11a>
 8004ccc:	2b60      	cmp	r3, #96	; 0x60
 8004cce:	d877      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd0:	2b50      	cmp	r3, #80	; 0x50
 8004cd2:	d03c      	beq.n	8004d4e <HAL_TIM_ConfigClockSource+0xfa>
 8004cd4:	2b50      	cmp	r3, #80	; 0x50
 8004cd6:	d873      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd8:	2b40      	cmp	r3, #64	; 0x40
 8004cda:	d058      	beq.n	8004d8e <HAL_TIM_ConfigClockSource+0x13a>
 8004cdc:	2b40      	cmp	r3, #64	; 0x40
 8004cde:	d86f      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce0:	2b30      	cmp	r3, #48	; 0x30
 8004ce2:	d064      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0x15a>
 8004ce4:	2b30      	cmp	r3, #48	; 0x30
 8004ce6:	d86b      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce8:	2b20      	cmp	r3, #32
 8004cea:	d060      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0x15a>
 8004cec:	2b20      	cmp	r3, #32
 8004cee:	d867      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d05c      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0x15a>
 8004cf4:	2b10      	cmp	r3, #16
 8004cf6:	d05a      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0x15a>
 8004cf8:	e062      	b.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6818      	ldr	r0, [r3, #0]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	6899      	ldr	r1, [r3, #8]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	f000 fb35 	bl	8005378 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	609a      	str	r2, [r3, #8]
      break;
 8004d26:	e04f      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6818      	ldr	r0, [r3, #0]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	6899      	ldr	r1, [r3, #8]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f000 fb1e 	bl	8005378 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d4a:	609a      	str	r2, [r3, #8]
      break;
 8004d4c:	e03c      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6818      	ldr	r0, [r3, #0]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	6859      	ldr	r1, [r3, #4]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	f000 fa92 	bl	8005284 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2150      	movs	r1, #80	; 0x50
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 faeb 	bl	8005342 <TIM_ITRx_SetConfig>
      break;
 8004d6c:	e02c      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6818      	ldr	r0, [r3, #0]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	6859      	ldr	r1, [r3, #4]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	f000 fab1 	bl	80052e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2160      	movs	r1, #96	; 0x60
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 fadb 	bl	8005342 <TIM_ITRx_SetConfig>
      break;
 8004d8c:	e01c      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6818      	ldr	r0, [r3, #0]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	6859      	ldr	r1, [r3, #4]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f000 fa72 	bl	8005284 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2140      	movs	r1, #64	; 0x40
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 facb 	bl	8005342 <TIM_ITRx_SetConfig>
      break;
 8004dac:	e00c      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4619      	mov	r1, r3
 8004db8:	4610      	mov	r0, r2
 8004dba:	f000 fac2 	bl	8005342 <TIM_ITRx_SetConfig>
      break;
 8004dbe:	e003      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8004dc4:	e000      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004dc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a40      	ldr	r2, [pc, #256]	; (8004ef8 <TIM_Base_SetConfig+0x114>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d013      	beq.n	8004e24 <TIM_Base_SetConfig+0x40>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e02:	d00f      	beq.n	8004e24 <TIM_Base_SetConfig+0x40>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a3d      	ldr	r2, [pc, #244]	; (8004efc <TIM_Base_SetConfig+0x118>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d00b      	beq.n	8004e24 <TIM_Base_SetConfig+0x40>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a3c      	ldr	r2, [pc, #240]	; (8004f00 <TIM_Base_SetConfig+0x11c>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d007      	beq.n	8004e24 <TIM_Base_SetConfig+0x40>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a3b      	ldr	r2, [pc, #236]	; (8004f04 <TIM_Base_SetConfig+0x120>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d003      	beq.n	8004e24 <TIM_Base_SetConfig+0x40>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a3a      	ldr	r2, [pc, #232]	; (8004f08 <TIM_Base_SetConfig+0x124>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d108      	bne.n	8004e36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a2f      	ldr	r2, [pc, #188]	; (8004ef8 <TIM_Base_SetConfig+0x114>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d02b      	beq.n	8004e96 <TIM_Base_SetConfig+0xb2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e44:	d027      	beq.n	8004e96 <TIM_Base_SetConfig+0xb2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a2c      	ldr	r2, [pc, #176]	; (8004efc <TIM_Base_SetConfig+0x118>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d023      	beq.n	8004e96 <TIM_Base_SetConfig+0xb2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a2b      	ldr	r2, [pc, #172]	; (8004f00 <TIM_Base_SetConfig+0x11c>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d01f      	beq.n	8004e96 <TIM_Base_SetConfig+0xb2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a2a      	ldr	r2, [pc, #168]	; (8004f04 <TIM_Base_SetConfig+0x120>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d01b      	beq.n	8004e96 <TIM_Base_SetConfig+0xb2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a29      	ldr	r2, [pc, #164]	; (8004f08 <TIM_Base_SetConfig+0x124>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d017      	beq.n	8004e96 <TIM_Base_SetConfig+0xb2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a28      	ldr	r2, [pc, #160]	; (8004f0c <TIM_Base_SetConfig+0x128>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d013      	beq.n	8004e96 <TIM_Base_SetConfig+0xb2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a27      	ldr	r2, [pc, #156]	; (8004f10 <TIM_Base_SetConfig+0x12c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d00f      	beq.n	8004e96 <TIM_Base_SetConfig+0xb2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a26      	ldr	r2, [pc, #152]	; (8004f14 <TIM_Base_SetConfig+0x130>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d00b      	beq.n	8004e96 <TIM_Base_SetConfig+0xb2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a25      	ldr	r2, [pc, #148]	; (8004f18 <TIM_Base_SetConfig+0x134>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d007      	beq.n	8004e96 <TIM_Base_SetConfig+0xb2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a24      	ldr	r2, [pc, #144]	; (8004f1c <TIM_Base_SetConfig+0x138>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d003      	beq.n	8004e96 <TIM_Base_SetConfig+0xb2>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a23      	ldr	r2, [pc, #140]	; (8004f20 <TIM_Base_SetConfig+0x13c>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d108      	bne.n	8004ea8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a0a      	ldr	r2, [pc, #40]	; (8004ef8 <TIM_Base_SetConfig+0x114>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d003      	beq.n	8004edc <TIM_Base_SetConfig+0xf8>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a0c      	ldr	r2, [pc, #48]	; (8004f08 <TIM_Base_SetConfig+0x124>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d103      	bne.n	8004ee4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	691a      	ldr	r2, [r3, #16]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	615a      	str	r2, [r3, #20]
}
 8004eea:	bf00      	nop
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	40010000 	.word	0x40010000
 8004efc:	40000400 	.word	0x40000400
 8004f00:	40000800 	.word	0x40000800
 8004f04:	40000c00 	.word	0x40000c00
 8004f08:	40010400 	.word	0x40010400
 8004f0c:	40014000 	.word	0x40014000
 8004f10:	40014400 	.word	0x40014400
 8004f14:	40014800 	.word	0x40014800
 8004f18:	40001800 	.word	0x40001800
 8004f1c:	40001c00 	.word	0x40001c00
 8004f20:	40002000 	.word	0x40002000

08004f24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	f023 0201 	bic.w	r2, r3, #1
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f023 0303 	bic.w	r3, r3, #3
 8004f5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f023 0302 	bic.w	r3, r3, #2
 8004f6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a20      	ldr	r2, [pc, #128]	; (8004ffc <TIM_OC1_SetConfig+0xd8>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d003      	beq.n	8004f88 <TIM_OC1_SetConfig+0x64>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a1f      	ldr	r2, [pc, #124]	; (8005000 <TIM_OC1_SetConfig+0xdc>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d10c      	bne.n	8004fa2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f023 0308 	bic.w	r3, r3, #8
 8004f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f023 0304 	bic.w	r3, r3, #4
 8004fa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a15      	ldr	r2, [pc, #84]	; (8004ffc <TIM_OC1_SetConfig+0xd8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d003      	beq.n	8004fb2 <TIM_OC1_SetConfig+0x8e>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a14      	ldr	r2, [pc, #80]	; (8005000 <TIM_OC1_SetConfig+0xdc>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d111      	bne.n	8004fd6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685a      	ldr	r2, [r3, #4]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	621a      	str	r2, [r3, #32]
}
 8004ff0:	bf00      	nop
 8004ff2:	371c      	adds	r7, #28
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	40010000 	.word	0x40010000
 8005000:	40010400 	.word	0x40010400

08005004 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005004:	b480      	push	{r7}
 8005006:	b087      	sub	sp, #28
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	f023 0210 	bic.w	r2, r3, #16
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800503a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	021b      	lsls	r3, r3, #8
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	4313      	orrs	r3, r2
 8005046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	f023 0320 	bic.w	r3, r3, #32
 800504e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	011b      	lsls	r3, r3, #4
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	4313      	orrs	r3, r2
 800505a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a22      	ldr	r2, [pc, #136]	; (80050e8 <TIM_OC2_SetConfig+0xe4>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d003      	beq.n	800506c <TIM_OC2_SetConfig+0x68>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a21      	ldr	r2, [pc, #132]	; (80050ec <TIM_OC2_SetConfig+0xe8>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d10d      	bne.n	8005088 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005072:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	011b      	lsls	r3, r3, #4
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	4313      	orrs	r3, r2
 800507e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005086:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a17      	ldr	r2, [pc, #92]	; (80050e8 <TIM_OC2_SetConfig+0xe4>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d003      	beq.n	8005098 <TIM_OC2_SetConfig+0x94>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a16      	ldr	r2, [pc, #88]	; (80050ec <TIM_OC2_SetConfig+0xe8>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d113      	bne.n	80050c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800509e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	4313      	orrs	r3, r2
 80050be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	621a      	str	r2, [r3, #32]
}
 80050da:	bf00      	nop
 80050dc:	371c      	adds	r7, #28
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	40010000 	.word	0x40010000
 80050ec:	40010400 	.word	0x40010400

080050f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f023 0303 	bic.w	r3, r3, #3
 8005126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005138:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	021b      	lsls	r3, r3, #8
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	4313      	orrs	r3, r2
 8005144:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a21      	ldr	r2, [pc, #132]	; (80051d0 <TIM_OC3_SetConfig+0xe0>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d003      	beq.n	8005156 <TIM_OC3_SetConfig+0x66>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a20      	ldr	r2, [pc, #128]	; (80051d4 <TIM_OC3_SetConfig+0xe4>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d10d      	bne.n	8005172 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800515c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	021b      	lsls	r3, r3, #8
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	4313      	orrs	r3, r2
 8005168:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005170:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a16      	ldr	r2, [pc, #88]	; (80051d0 <TIM_OC3_SetConfig+0xe0>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d003      	beq.n	8005182 <TIM_OC3_SetConfig+0x92>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a15      	ldr	r2, [pc, #84]	; (80051d4 <TIM_OC3_SetConfig+0xe4>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d113      	bne.n	80051aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005188:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005190:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	011b      	lsls	r3, r3, #4
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	4313      	orrs	r3, r2
 800519c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	011b      	lsls	r3, r3, #4
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	621a      	str	r2, [r3, #32]
}
 80051c4:	bf00      	nop
 80051c6:	371c      	adds	r7, #28
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr
 80051d0:	40010000 	.word	0x40010000
 80051d4:	40010400 	.word	0x40010400

080051d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800520e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	021b      	lsls	r3, r3, #8
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	4313      	orrs	r3, r2
 800521a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005222:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	031b      	lsls	r3, r3, #12
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	4313      	orrs	r3, r2
 800522e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a12      	ldr	r2, [pc, #72]	; (800527c <TIM_OC4_SetConfig+0xa4>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d003      	beq.n	8005240 <TIM_OC4_SetConfig+0x68>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a11      	ldr	r2, [pc, #68]	; (8005280 <TIM_OC4_SetConfig+0xa8>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d109      	bne.n	8005254 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005246:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	019b      	lsls	r3, r3, #6
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	621a      	str	r2, [r3, #32]
}
 800526e:	bf00      	nop
 8005270:	371c      	adds	r7, #28
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	40010000 	.word	0x40010000
 8005280:	40010400 	.word	0x40010400

08005284 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005284:	b480      	push	{r7}
 8005286:	b087      	sub	sp, #28
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	f023 0201 	bic.w	r2, r3, #1
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	011b      	lsls	r3, r3, #4
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f023 030a 	bic.w	r3, r3, #10
 80052c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	621a      	str	r2, [r3, #32]
}
 80052d6:	bf00      	nop
 80052d8:	371c      	adds	r7, #28
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b087      	sub	sp, #28
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	60f8      	str	r0, [r7, #12]
 80052ea:	60b9      	str	r1, [r7, #8]
 80052ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	f023 0210 	bic.w	r2, r3, #16
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800530c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	031b      	lsls	r3, r3, #12
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	4313      	orrs	r3, r2
 8005316:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800531e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	011b      	lsls	r3, r3, #4
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	4313      	orrs	r3, r2
 8005328:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	621a      	str	r2, [r3, #32]
}
 8005336:	bf00      	nop
 8005338:	371c      	adds	r7, #28
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005342:	b480      	push	{r7}
 8005344:	b085      	sub	sp, #20
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
 800534a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005358:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800535a:	683a      	ldr	r2, [r7, #0]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	4313      	orrs	r3, r2
 8005360:	f043 0307 	orr.w	r3, r3, #7
 8005364:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	609a      	str	r2, [r3, #8]
}
 800536c:	bf00      	nop
 800536e:	3714      	adds	r7, #20
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005378:	b480      	push	{r7}
 800537a:	b087      	sub	sp, #28
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
 8005384:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005392:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	021a      	lsls	r2, r3, #8
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	431a      	orrs	r2, r3
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	4313      	orrs	r3, r2
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	609a      	str	r2, [r3, #8]
}
 80053ac:	bf00      	nop
 80053ae:	371c      	adds	r7, #28
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f003 031f 	and.w	r3, r3, #31
 80053ca:	2201      	movs	r2, #1
 80053cc:	fa02 f303 	lsl.w	r3, r2, r3
 80053d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6a1a      	ldr	r2, [r3, #32]
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	43db      	mvns	r3, r3
 80053da:	401a      	ands	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6a1a      	ldr	r2, [r3, #32]
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f003 031f 	and.w	r3, r3, #31
 80053ea:	6879      	ldr	r1, [r7, #4]
 80053ec:	fa01 f303 	lsl.w	r3, r1, r3
 80053f0:	431a      	orrs	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	621a      	str	r2, [r3, #32]
}
 80053f6:	bf00      	nop
 80053f8:	371c      	adds	r7, #28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
	...

08005404 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005414:	2b01      	cmp	r3, #1
 8005416:	d101      	bne.n	800541c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005418:	2302      	movs	r3, #2
 800541a:	e05a      	b.n	80054d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005442:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	4313      	orrs	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a21      	ldr	r2, [pc, #132]	; (80054e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d022      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005468:	d01d      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a1d      	ldr	r2, [pc, #116]	; (80054e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d018      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a1b      	ldr	r2, [pc, #108]	; (80054e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d013      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a1a      	ldr	r2, [pc, #104]	; (80054ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d00e      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a18      	ldr	r2, [pc, #96]	; (80054f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d009      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a17      	ldr	r2, [pc, #92]	; (80054f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d004      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a15      	ldr	r2, [pc, #84]	; (80054f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d10c      	bne.n	80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3714      	adds	r7, #20
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	40010000 	.word	0x40010000
 80054e4:	40000400 	.word	0x40000400
 80054e8:	40000800 	.word	0x40000800
 80054ec:	40000c00 	.word	0x40000c00
 80054f0:	40010400 	.word	0x40010400
 80054f4:	40014000 	.word	0x40014000
 80054f8:	40001800 	.word	0x40001800

080054fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005510:	2b01      	cmp	r3, #1
 8005512:	d101      	bne.n	8005518 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005514:	2302      	movs	r3, #2
 8005516:	e03d      	b.n	8005594 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	4313      	orrs	r3, r2
 800552c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	4313      	orrs	r3, r2
 800553a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	4313      	orrs	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4313      	orrs	r3, r2
 8005556:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	4313      	orrs	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	4313      	orrs	r3, r2
 8005572:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	4313      	orrs	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e03f      	b.n	8005632 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d106      	bne.n	80055cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7fc fea4 	bl	8002314 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2224      	movs	r2, #36	; 0x24
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68da      	ldr	r2, [r3, #12]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 fba5 	bl	8005d34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	691a      	ldr	r2, [r3, #16]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	695a      	ldr	r2, [r3, #20]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005608:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005618:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2220      	movs	r2, #32
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2220      	movs	r2, #32
 800562c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b08a      	sub	sp, #40	; 0x28
 800563e:	af02      	add	r7, sp, #8
 8005640:	60f8      	str	r0, [r7, #12]
 8005642:	60b9      	str	r1, [r7, #8]
 8005644:	603b      	str	r3, [r7, #0]
 8005646:	4613      	mov	r3, r2
 8005648:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800564a:	2300      	movs	r3, #0
 800564c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b20      	cmp	r3, #32
 8005658:	d17c      	bne.n	8005754 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d002      	beq.n	8005666 <HAL_UART_Transmit+0x2c>
 8005660:	88fb      	ldrh	r3, [r7, #6]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e075      	b.n	8005756 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005670:	2b01      	cmp	r3, #1
 8005672:	d101      	bne.n	8005678 <HAL_UART_Transmit+0x3e>
 8005674:	2302      	movs	r3, #2
 8005676:	e06e      	b.n	8005756 <HAL_UART_Transmit+0x11c>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2221      	movs	r2, #33	; 0x21
 800568a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800568e:	f7fc ffe7 	bl	8002660 <HAL_GetTick>
 8005692:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	88fa      	ldrh	r2, [r7, #6]
 8005698:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	88fa      	ldrh	r2, [r7, #6]
 800569e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a8:	d108      	bne.n	80056bc <HAL_UART_Transmit+0x82>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d104      	bne.n	80056bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80056b2:	2300      	movs	r3, #0
 80056b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	61bb      	str	r3, [r7, #24]
 80056ba:	e003      	b.n	80056c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056c0:	2300      	movs	r3, #0
 80056c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80056cc:	e02a      	b.n	8005724 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	2200      	movs	r2, #0
 80056d6:	2180      	movs	r1, #128	; 0x80
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f000 f992 	bl	8005a02 <UART_WaitOnFlagUntilTimeout>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e036      	b.n	8005756 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10b      	bne.n	8005706 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	881b      	ldrh	r3, [r3, #0]
 80056f2:	461a      	mov	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	3302      	adds	r3, #2
 8005702:	61bb      	str	r3, [r7, #24]
 8005704:	e007      	b.n	8005716 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	781a      	ldrb	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	3301      	adds	r3, #1
 8005714:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800571a:	b29b      	uxth	r3, r3
 800571c:	3b01      	subs	r3, #1
 800571e:	b29a      	uxth	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005728:	b29b      	uxth	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1cf      	bne.n	80056ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	9300      	str	r3, [sp, #0]
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2200      	movs	r2, #0
 8005736:	2140      	movs	r1, #64	; 0x40
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f000 f962 	bl	8005a02 <UART_WaitOnFlagUntilTimeout>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d001      	beq.n	8005748 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e006      	b.n	8005756 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2220      	movs	r2, #32
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005750:	2300      	movs	r3, #0
 8005752:	e000      	b.n	8005756 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005754:	2302      	movs	r3, #2
  }
}
 8005756:	4618      	mov	r0, r3
 8005758:	3720      	adds	r7, #32
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b084      	sub	sp, #16
 8005762:	af00      	add	r7, sp, #0
 8005764:	60f8      	str	r0, [r7, #12]
 8005766:	60b9      	str	r1, [r7, #8]
 8005768:	4613      	mov	r3, r2
 800576a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b20      	cmp	r3, #32
 8005776:	d11d      	bne.n	80057b4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d002      	beq.n	8005784 <HAL_UART_Receive_DMA+0x26>
 800577e:	88fb      	ldrh	r3, [r7, #6]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d101      	bne.n	8005788 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e016      	b.n	80057b6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800578e:	2b01      	cmp	r3, #1
 8005790:	d101      	bne.n	8005796 <HAL_UART_Receive_DMA+0x38>
 8005792:	2302      	movs	r3, #2
 8005794:	e00f      	b.n	80057b6 <HAL_UART_Receive_DMA+0x58>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80057a4:	88fb      	ldrh	r3, [r7, #6]
 80057a6:	461a      	mov	r2, r3
 80057a8:	68b9      	ldr	r1, [r7, #8]
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f000 f998 	bl	8005ae0 <UART_Start_Receive_DMA>
 80057b0:	4603      	mov	r3, r0
 80057b2:	e000      	b.n	80057b6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80057b4:	2302      	movs	r3, #2
  }
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80057be:	b480      	push	{r7}
 80057c0:	b083      	sub	sp, #12
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80057c6:	bf00      	nop
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b083      	sub	sp, #12
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80057da:	bf00      	nop
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b083      	sub	sp, #12
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80057ee:	bf00      	nop
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b083      	sub	sp, #12
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
 8005802:	460b      	mov	r3, r1
 8005804:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005806:	bf00      	nop
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b09c      	sub	sp, #112	; 0x70
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800582a:	2b00      	cmp	r3, #0
 800582c:	d172      	bne.n	8005914 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800582e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005830:	2200      	movs	r2, #0
 8005832:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	330c      	adds	r3, #12
 800583a:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800583e:	e853 3f00 	ldrex	r3, [r3]
 8005842:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005846:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800584a:	66bb      	str	r3, [r7, #104]	; 0x68
 800584c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	330c      	adds	r3, #12
 8005852:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005854:	65ba      	str	r2, [r7, #88]	; 0x58
 8005856:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005858:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800585a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800585c:	e841 2300 	strex	r3, r2, [r1]
 8005860:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1e5      	bne.n	8005834 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	3314      	adds	r3, #20
 800586e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005872:	e853 3f00 	ldrex	r3, [r3]
 8005876:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800587a:	f023 0301 	bic.w	r3, r3, #1
 800587e:	667b      	str	r3, [r7, #100]	; 0x64
 8005880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	3314      	adds	r3, #20
 8005886:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005888:	647a      	str	r2, [r7, #68]	; 0x44
 800588a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800588e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005890:	e841 2300 	strex	r3, r2, [r1]
 8005894:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1e5      	bne.n	8005868 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800589c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	3314      	adds	r3, #20
 80058a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a6:	e853 3f00 	ldrex	r3, [r3]
 80058aa:	623b      	str	r3, [r7, #32]
   return(result);
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058b2:	663b      	str	r3, [r7, #96]	; 0x60
 80058b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	3314      	adds	r3, #20
 80058ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80058bc:	633a      	str	r2, [r7, #48]	; 0x30
 80058be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058c4:	e841 2300 	strex	r3, r2, [r1]
 80058c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1e5      	bne.n	800589c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80058d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d2:	2220      	movs	r2, #32
 80058d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d119      	bne.n	8005914 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	330c      	adds	r3, #12
 80058e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	e853 3f00 	ldrex	r3, [r3]
 80058ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f023 0310 	bic.w	r3, r3, #16
 80058f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	330c      	adds	r3, #12
 80058fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005900:	61fa      	str	r2, [r7, #28]
 8005902:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005904:	69b9      	ldr	r1, [r7, #24]
 8005906:	69fa      	ldr	r2, [r7, #28]
 8005908:	e841 2300 	strex	r3, r2, [r1]
 800590c:	617b      	str	r3, [r7, #20]
   return(result);
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d1e5      	bne.n	80058e0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005918:	2b01      	cmp	r3, #1
 800591a:	d106      	bne.n	800592a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800591c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800591e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005920:	4619      	mov	r1, r3
 8005922:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005924:	f7ff ff69 	bl	80057fa <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005928:	e002      	b.n	8005930 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800592a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800592c:	f7ff ff47 	bl	80057be <HAL_UART_RxCpltCallback>
}
 8005930:	bf00      	nop
 8005932:	3770      	adds	r7, #112	; 0x70
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005944:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594a:	2b01      	cmp	r3, #1
 800594c:	d108      	bne.n	8005960 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005952:	085b      	lsrs	r3, r3, #1
 8005954:	b29b      	uxth	r3, r3
 8005956:	4619      	mov	r1, r3
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f7ff ff4e 	bl	80057fa <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800595e:	e002      	b.n	8005966 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f7ff ff36 	bl	80057d2 <HAL_UART_RxHalfCpltCallback>
}
 8005966:	bf00      	nop
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b084      	sub	sp, #16
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005976:	2300      	movs	r3, #0
 8005978:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800598a:	2b80      	cmp	r3, #128	; 0x80
 800598c:	bf0c      	ite	eq
 800598e:	2301      	moveq	r3, #1
 8005990:	2300      	movne	r3, #0
 8005992:	b2db      	uxtb	r3, r3
 8005994:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b21      	cmp	r3, #33	; 0x21
 80059a0:	d108      	bne.n	80059b4 <UART_DMAError+0x46>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d005      	beq.n	80059b4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	2200      	movs	r2, #0
 80059ac:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80059ae:	68b8      	ldr	r0, [r7, #8]
 80059b0:	f000 f934 	bl	8005c1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059be:	2b40      	cmp	r3, #64	; 0x40
 80059c0:	bf0c      	ite	eq
 80059c2:	2301      	moveq	r3, #1
 80059c4:	2300      	movne	r3, #0
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b22      	cmp	r3, #34	; 0x22
 80059d4:	d108      	bne.n	80059e8 <UART_DMAError+0x7a>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d005      	beq.n	80059e8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2200      	movs	r2, #0
 80059e0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80059e2:	68b8      	ldr	r0, [r7, #8]
 80059e4:	f000 f942 	bl	8005c6c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ec:	f043 0210 	orr.w	r2, r3, #16
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059f4:	68b8      	ldr	r0, [r7, #8]
 80059f6:	f7ff fef6 	bl	80057e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059fa:	bf00      	nop
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b090      	sub	sp, #64	; 0x40
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	60f8      	str	r0, [r7, #12]
 8005a0a:	60b9      	str	r1, [r7, #8]
 8005a0c:	603b      	str	r3, [r7, #0]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a12:	e050      	b.n	8005ab6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1a:	d04c      	beq.n	8005ab6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d007      	beq.n	8005a32 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a22:	f7fc fe1d 	bl	8002660 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d241      	bcs.n	8005ab6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	330c      	adds	r3, #12
 8005a38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3c:	e853 3f00 	ldrex	r3, [r3]
 8005a40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	330c      	adds	r3, #12
 8005a50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a52:	637a      	str	r2, [r7, #52]	; 0x34
 8005a54:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a5a:	e841 2300 	strex	r3, r2, [r1]
 8005a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1e5      	bne.n	8005a32 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	3314      	adds	r3, #20
 8005a6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	e853 3f00 	ldrex	r3, [r3]
 8005a74:	613b      	str	r3, [r7, #16]
   return(result);
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f023 0301 	bic.w	r3, r3, #1
 8005a7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	3314      	adds	r3, #20
 8005a84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a86:	623a      	str	r2, [r7, #32]
 8005a88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8a:	69f9      	ldr	r1, [r7, #28]
 8005a8c:	6a3a      	ldr	r2, [r7, #32]
 8005a8e:	e841 2300 	strex	r3, r2, [r1]
 8005a92:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1e5      	bne.n	8005a66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2220      	movs	r2, #32
 8005a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e00f      	b.n	8005ad6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	4013      	ands	r3, r2
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	bf0c      	ite	eq
 8005ac6:	2301      	moveq	r3, #1
 8005ac8:	2300      	movne	r3, #0
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	461a      	mov	r2, r3
 8005ace:	79fb      	ldrb	r3, [r7, #7]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d09f      	beq.n	8005a14 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3740      	adds	r7, #64	; 0x40
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
	...

08005ae0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b098      	sub	sp, #96	; 0x60
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	4613      	mov	r3, r2
 8005aec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	88fa      	ldrh	r2, [r7, #6]
 8005af8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2222      	movs	r2, #34	; 0x22
 8005b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0c:	4a40      	ldr	r2, [pc, #256]	; (8005c10 <UART_Start_Receive_DMA+0x130>)
 8005b0e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b14:	4a3f      	ldr	r2, [pc, #252]	; (8005c14 <UART_Start_Receive_DMA+0x134>)
 8005b16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1c:	4a3e      	ldr	r2, [pc, #248]	; (8005c18 <UART_Start_Receive_DMA+0x138>)
 8005b1e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b24:	2200      	movs	r2, #0
 8005b26:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005b28:	f107 0308 	add.w	r3, r7, #8
 8005b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3304      	adds	r3, #4
 8005b38:	4619      	mov	r1, r3
 8005b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	88fb      	ldrh	r3, [r7, #6]
 8005b40:	f7fd fba0 	bl	8003284 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005b44:	2300      	movs	r3, #0
 8005b46:	613b      	str	r3, [r7, #16]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	613b      	str	r3, [r7, #16]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	613b      	str	r3, [r7, #16]
 8005b58:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d019      	beq.n	8005b9e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	330c      	adds	r3, #12
 8005b70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b74:	e853 3f00 	ldrex	r3, [r3]
 8005b78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b80:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	330c      	adds	r3, #12
 8005b88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b8a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005b8c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005b90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b92:	e841 2300 	strex	r3, r2, [r1]
 8005b96:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1e5      	bne.n	8005b6a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	3314      	adds	r3, #20
 8005ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba8:	e853 3f00 	ldrex	r3, [r3]
 8005bac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb0:	f043 0301 	orr.w	r3, r3, #1
 8005bb4:	657b      	str	r3, [r7, #84]	; 0x54
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3314      	adds	r3, #20
 8005bbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005bbe:	63ba      	str	r2, [r7, #56]	; 0x38
 8005bc0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005bc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bc6:	e841 2300 	strex	r3, r2, [r1]
 8005bca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1e5      	bne.n	8005b9e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	3314      	adds	r3, #20
 8005bd8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	e853 3f00 	ldrex	r3, [r3]
 8005be0:	617b      	str	r3, [r7, #20]
   return(result);
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005be8:	653b      	str	r3, [r7, #80]	; 0x50
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	3314      	adds	r3, #20
 8005bf0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005bf2:	627a      	str	r2, [r7, #36]	; 0x24
 8005bf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf6:	6a39      	ldr	r1, [r7, #32]
 8005bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bfa:	e841 2300 	strex	r3, r2, [r1]
 8005bfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1e5      	bne.n	8005bd2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3760      	adds	r7, #96	; 0x60
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	08005813 	.word	0x08005813
 8005c14:	08005939 	.word	0x08005939
 8005c18:	0800596f 	.word	0x0800596f

08005c1c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b089      	sub	sp, #36	; 0x24
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	330c      	adds	r3, #12
 8005c2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	e853 3f00 	ldrex	r3, [r3]
 8005c32:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005c3a:	61fb      	str	r3, [r7, #28]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	330c      	adds	r3, #12
 8005c42:	69fa      	ldr	r2, [r7, #28]
 8005c44:	61ba      	str	r2, [r7, #24]
 8005c46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c48:	6979      	ldr	r1, [r7, #20]
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	e841 2300 	strex	r3, r2, [r1]
 8005c50:	613b      	str	r3, [r7, #16]
   return(result);
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1e5      	bne.n	8005c24 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005c60:	bf00      	nop
 8005c62:	3724      	adds	r7, #36	; 0x24
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b095      	sub	sp, #84	; 0x54
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	330c      	adds	r3, #12
 8005c7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c7e:	e853 3f00 	ldrex	r3, [r3]
 8005c82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	330c      	adds	r3, #12
 8005c92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c94:	643a      	str	r2, [r7, #64]	; 0x40
 8005c96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c9c:	e841 2300 	strex	r3, r2, [r1]
 8005ca0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1e5      	bne.n	8005c74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	3314      	adds	r3, #20
 8005cae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb0:	6a3b      	ldr	r3, [r7, #32]
 8005cb2:	e853 3f00 	ldrex	r3, [r3]
 8005cb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	f023 0301 	bic.w	r3, r3, #1
 8005cbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3314      	adds	r3, #20
 8005cc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ccc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cd0:	e841 2300 	strex	r3, r2, [r1]
 8005cd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1e5      	bne.n	8005ca8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d119      	bne.n	8005d18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	330c      	adds	r3, #12
 8005cea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	e853 3f00 	ldrex	r3, [r3]
 8005cf2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	f023 0310 	bic.w	r3, r3, #16
 8005cfa:	647b      	str	r3, [r7, #68]	; 0x44
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	330c      	adds	r3, #12
 8005d02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d04:	61ba      	str	r2, [r7, #24]
 8005d06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d08:	6979      	ldr	r1, [r7, #20]
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	e841 2300 	strex	r3, r2, [r1]
 8005d10:	613b      	str	r3, [r7, #16]
   return(result);
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1e5      	bne.n	8005ce4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d26:	bf00      	nop
 8005d28:	3754      	adds	r7, #84	; 0x54
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
	...

08005d34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d38:	b0c0      	sub	sp, #256	; 0x100
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d50:	68d9      	ldr	r1, [r3, #12]
 8005d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	ea40 0301 	orr.w	r3, r0, r1
 8005d5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d62:	689a      	ldr	r2, [r3, #8]
 8005d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	431a      	orrs	r2, r3
 8005d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d8c:	f021 010c 	bic.w	r1, r1, #12
 8005d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d9a:	430b      	orrs	r3, r1
 8005d9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dae:	6999      	ldr	r1, [r3, #24]
 8005db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	ea40 0301 	orr.w	r3, r0, r1
 8005dba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	4b8f      	ldr	r3, [pc, #572]	; (8006000 <UART_SetConfig+0x2cc>)
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d005      	beq.n	8005dd4 <UART_SetConfig+0xa0>
 8005dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	4b8d      	ldr	r3, [pc, #564]	; (8006004 <UART_SetConfig+0x2d0>)
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d104      	bne.n	8005dde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005dd4:	f7fe fb5c 	bl	8004490 <HAL_RCC_GetPCLK2Freq>
 8005dd8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005ddc:	e003      	b.n	8005de6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005dde:	f7fe fb43 	bl	8004468 <HAL_RCC_GetPCLK1Freq>
 8005de2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dea:	69db      	ldr	r3, [r3, #28]
 8005dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005df0:	f040 810c 	bne.w	800600c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005dfe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005e02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005e06:	4622      	mov	r2, r4
 8005e08:	462b      	mov	r3, r5
 8005e0a:	1891      	adds	r1, r2, r2
 8005e0c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e0e:	415b      	adcs	r3, r3
 8005e10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005e16:	4621      	mov	r1, r4
 8005e18:	eb12 0801 	adds.w	r8, r2, r1
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	eb43 0901 	adc.w	r9, r3, r1
 8005e22:	f04f 0200 	mov.w	r2, #0
 8005e26:	f04f 0300 	mov.w	r3, #0
 8005e2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e36:	4690      	mov	r8, r2
 8005e38:	4699      	mov	r9, r3
 8005e3a:	4623      	mov	r3, r4
 8005e3c:	eb18 0303 	adds.w	r3, r8, r3
 8005e40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e44:	462b      	mov	r3, r5
 8005e46:	eb49 0303 	adc.w	r3, r9, r3
 8005e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005e5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005e62:	460b      	mov	r3, r1
 8005e64:	18db      	adds	r3, r3, r3
 8005e66:	653b      	str	r3, [r7, #80]	; 0x50
 8005e68:	4613      	mov	r3, r2
 8005e6a:	eb42 0303 	adc.w	r3, r2, r3
 8005e6e:	657b      	str	r3, [r7, #84]	; 0x54
 8005e70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005e74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005e78:	f7fa fa1a 	bl	80002b0 <__aeabi_uldivmod>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	460b      	mov	r3, r1
 8005e80:	4b61      	ldr	r3, [pc, #388]	; (8006008 <UART_SetConfig+0x2d4>)
 8005e82:	fba3 2302 	umull	r2, r3, r3, r2
 8005e86:	095b      	lsrs	r3, r3, #5
 8005e88:	011c      	lsls	r4, r3, #4
 8005e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005e98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005e9c:	4642      	mov	r2, r8
 8005e9e:	464b      	mov	r3, r9
 8005ea0:	1891      	adds	r1, r2, r2
 8005ea2:	64b9      	str	r1, [r7, #72]	; 0x48
 8005ea4:	415b      	adcs	r3, r3
 8005ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ea8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005eac:	4641      	mov	r1, r8
 8005eae:	eb12 0a01 	adds.w	sl, r2, r1
 8005eb2:	4649      	mov	r1, r9
 8005eb4:	eb43 0b01 	adc.w	fp, r3, r1
 8005eb8:	f04f 0200 	mov.w	r2, #0
 8005ebc:	f04f 0300 	mov.w	r3, #0
 8005ec0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ec4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ec8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ecc:	4692      	mov	sl, r2
 8005ece:	469b      	mov	fp, r3
 8005ed0:	4643      	mov	r3, r8
 8005ed2:	eb1a 0303 	adds.w	r3, sl, r3
 8005ed6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005eda:	464b      	mov	r3, r9
 8005edc:	eb4b 0303 	adc.w	r3, fp, r3
 8005ee0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ef0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005ef4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ef8:	460b      	mov	r3, r1
 8005efa:	18db      	adds	r3, r3, r3
 8005efc:	643b      	str	r3, [r7, #64]	; 0x40
 8005efe:	4613      	mov	r3, r2
 8005f00:	eb42 0303 	adc.w	r3, r2, r3
 8005f04:	647b      	str	r3, [r7, #68]	; 0x44
 8005f06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005f0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005f0e:	f7fa f9cf 	bl	80002b0 <__aeabi_uldivmod>
 8005f12:	4602      	mov	r2, r0
 8005f14:	460b      	mov	r3, r1
 8005f16:	4611      	mov	r1, r2
 8005f18:	4b3b      	ldr	r3, [pc, #236]	; (8006008 <UART_SetConfig+0x2d4>)
 8005f1a:	fba3 2301 	umull	r2, r3, r3, r1
 8005f1e:	095b      	lsrs	r3, r3, #5
 8005f20:	2264      	movs	r2, #100	; 0x64
 8005f22:	fb02 f303 	mul.w	r3, r2, r3
 8005f26:	1acb      	subs	r3, r1, r3
 8005f28:	00db      	lsls	r3, r3, #3
 8005f2a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005f2e:	4b36      	ldr	r3, [pc, #216]	; (8006008 <UART_SetConfig+0x2d4>)
 8005f30:	fba3 2302 	umull	r2, r3, r3, r2
 8005f34:	095b      	lsrs	r3, r3, #5
 8005f36:	005b      	lsls	r3, r3, #1
 8005f38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f3c:	441c      	add	r4, r3
 8005f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f42:	2200      	movs	r2, #0
 8005f44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f48:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005f4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005f50:	4642      	mov	r2, r8
 8005f52:	464b      	mov	r3, r9
 8005f54:	1891      	adds	r1, r2, r2
 8005f56:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f58:	415b      	adcs	r3, r3
 8005f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f60:	4641      	mov	r1, r8
 8005f62:	1851      	adds	r1, r2, r1
 8005f64:	6339      	str	r1, [r7, #48]	; 0x30
 8005f66:	4649      	mov	r1, r9
 8005f68:	414b      	adcs	r3, r1
 8005f6a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	f04f 0300 	mov.w	r3, #0
 8005f74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005f78:	4659      	mov	r1, fp
 8005f7a:	00cb      	lsls	r3, r1, #3
 8005f7c:	4651      	mov	r1, sl
 8005f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f82:	4651      	mov	r1, sl
 8005f84:	00ca      	lsls	r2, r1, #3
 8005f86:	4610      	mov	r0, r2
 8005f88:	4619      	mov	r1, r3
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	4642      	mov	r2, r8
 8005f8e:	189b      	adds	r3, r3, r2
 8005f90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f94:	464b      	mov	r3, r9
 8005f96:	460a      	mov	r2, r1
 8005f98:	eb42 0303 	adc.w	r3, r2, r3
 8005f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005fac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005fb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	18db      	adds	r3, r3, r3
 8005fb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fba:	4613      	mov	r3, r2
 8005fbc:	eb42 0303 	adc.w	r3, r2, r3
 8005fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005fc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005fca:	f7fa f971 	bl	80002b0 <__aeabi_uldivmod>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	4b0d      	ldr	r3, [pc, #52]	; (8006008 <UART_SetConfig+0x2d4>)
 8005fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8005fd8:	095b      	lsrs	r3, r3, #5
 8005fda:	2164      	movs	r1, #100	; 0x64
 8005fdc:	fb01 f303 	mul.w	r3, r1, r3
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	00db      	lsls	r3, r3, #3
 8005fe4:	3332      	adds	r3, #50	; 0x32
 8005fe6:	4a08      	ldr	r2, [pc, #32]	; (8006008 <UART_SetConfig+0x2d4>)
 8005fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fec:	095b      	lsrs	r3, r3, #5
 8005fee:	f003 0207 	and.w	r2, r3, #7
 8005ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4422      	add	r2, r4
 8005ffa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ffc:	e106      	b.n	800620c <UART_SetConfig+0x4d8>
 8005ffe:	bf00      	nop
 8006000:	40011000 	.word	0x40011000
 8006004:	40011400 	.word	0x40011400
 8006008:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800600c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006010:	2200      	movs	r2, #0
 8006012:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006016:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800601a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800601e:	4642      	mov	r2, r8
 8006020:	464b      	mov	r3, r9
 8006022:	1891      	adds	r1, r2, r2
 8006024:	6239      	str	r1, [r7, #32]
 8006026:	415b      	adcs	r3, r3
 8006028:	627b      	str	r3, [r7, #36]	; 0x24
 800602a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800602e:	4641      	mov	r1, r8
 8006030:	1854      	adds	r4, r2, r1
 8006032:	4649      	mov	r1, r9
 8006034:	eb43 0501 	adc.w	r5, r3, r1
 8006038:	f04f 0200 	mov.w	r2, #0
 800603c:	f04f 0300 	mov.w	r3, #0
 8006040:	00eb      	lsls	r3, r5, #3
 8006042:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006046:	00e2      	lsls	r2, r4, #3
 8006048:	4614      	mov	r4, r2
 800604a:	461d      	mov	r5, r3
 800604c:	4643      	mov	r3, r8
 800604e:	18e3      	adds	r3, r4, r3
 8006050:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006054:	464b      	mov	r3, r9
 8006056:	eb45 0303 	adc.w	r3, r5, r3
 800605a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800605e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800606a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800606e:	f04f 0200 	mov.w	r2, #0
 8006072:	f04f 0300 	mov.w	r3, #0
 8006076:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800607a:	4629      	mov	r1, r5
 800607c:	008b      	lsls	r3, r1, #2
 800607e:	4621      	mov	r1, r4
 8006080:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006084:	4621      	mov	r1, r4
 8006086:	008a      	lsls	r2, r1, #2
 8006088:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800608c:	f7fa f910 	bl	80002b0 <__aeabi_uldivmod>
 8006090:	4602      	mov	r2, r0
 8006092:	460b      	mov	r3, r1
 8006094:	4b60      	ldr	r3, [pc, #384]	; (8006218 <UART_SetConfig+0x4e4>)
 8006096:	fba3 2302 	umull	r2, r3, r3, r2
 800609a:	095b      	lsrs	r3, r3, #5
 800609c:	011c      	lsls	r4, r3, #4
 800609e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060a2:	2200      	movs	r2, #0
 80060a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80060ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80060b0:	4642      	mov	r2, r8
 80060b2:	464b      	mov	r3, r9
 80060b4:	1891      	adds	r1, r2, r2
 80060b6:	61b9      	str	r1, [r7, #24]
 80060b8:	415b      	adcs	r3, r3
 80060ba:	61fb      	str	r3, [r7, #28]
 80060bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060c0:	4641      	mov	r1, r8
 80060c2:	1851      	adds	r1, r2, r1
 80060c4:	6139      	str	r1, [r7, #16]
 80060c6:	4649      	mov	r1, r9
 80060c8:	414b      	adcs	r3, r1
 80060ca:	617b      	str	r3, [r7, #20]
 80060cc:	f04f 0200 	mov.w	r2, #0
 80060d0:	f04f 0300 	mov.w	r3, #0
 80060d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060d8:	4659      	mov	r1, fp
 80060da:	00cb      	lsls	r3, r1, #3
 80060dc:	4651      	mov	r1, sl
 80060de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060e2:	4651      	mov	r1, sl
 80060e4:	00ca      	lsls	r2, r1, #3
 80060e6:	4610      	mov	r0, r2
 80060e8:	4619      	mov	r1, r3
 80060ea:	4603      	mov	r3, r0
 80060ec:	4642      	mov	r2, r8
 80060ee:	189b      	adds	r3, r3, r2
 80060f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060f4:	464b      	mov	r3, r9
 80060f6:	460a      	mov	r2, r1
 80060f8:	eb42 0303 	adc.w	r3, r2, r3
 80060fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	67bb      	str	r3, [r7, #120]	; 0x78
 800610a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800610c:	f04f 0200 	mov.w	r2, #0
 8006110:	f04f 0300 	mov.w	r3, #0
 8006114:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006118:	4649      	mov	r1, r9
 800611a:	008b      	lsls	r3, r1, #2
 800611c:	4641      	mov	r1, r8
 800611e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006122:	4641      	mov	r1, r8
 8006124:	008a      	lsls	r2, r1, #2
 8006126:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800612a:	f7fa f8c1 	bl	80002b0 <__aeabi_uldivmod>
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	4611      	mov	r1, r2
 8006134:	4b38      	ldr	r3, [pc, #224]	; (8006218 <UART_SetConfig+0x4e4>)
 8006136:	fba3 2301 	umull	r2, r3, r3, r1
 800613a:	095b      	lsrs	r3, r3, #5
 800613c:	2264      	movs	r2, #100	; 0x64
 800613e:	fb02 f303 	mul.w	r3, r2, r3
 8006142:	1acb      	subs	r3, r1, r3
 8006144:	011b      	lsls	r3, r3, #4
 8006146:	3332      	adds	r3, #50	; 0x32
 8006148:	4a33      	ldr	r2, [pc, #204]	; (8006218 <UART_SetConfig+0x4e4>)
 800614a:	fba2 2303 	umull	r2, r3, r2, r3
 800614e:	095b      	lsrs	r3, r3, #5
 8006150:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006154:	441c      	add	r4, r3
 8006156:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800615a:	2200      	movs	r2, #0
 800615c:	673b      	str	r3, [r7, #112]	; 0x70
 800615e:	677a      	str	r2, [r7, #116]	; 0x74
 8006160:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006164:	4642      	mov	r2, r8
 8006166:	464b      	mov	r3, r9
 8006168:	1891      	adds	r1, r2, r2
 800616a:	60b9      	str	r1, [r7, #8]
 800616c:	415b      	adcs	r3, r3
 800616e:	60fb      	str	r3, [r7, #12]
 8006170:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006174:	4641      	mov	r1, r8
 8006176:	1851      	adds	r1, r2, r1
 8006178:	6039      	str	r1, [r7, #0]
 800617a:	4649      	mov	r1, r9
 800617c:	414b      	adcs	r3, r1
 800617e:	607b      	str	r3, [r7, #4]
 8006180:	f04f 0200 	mov.w	r2, #0
 8006184:	f04f 0300 	mov.w	r3, #0
 8006188:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800618c:	4659      	mov	r1, fp
 800618e:	00cb      	lsls	r3, r1, #3
 8006190:	4651      	mov	r1, sl
 8006192:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006196:	4651      	mov	r1, sl
 8006198:	00ca      	lsls	r2, r1, #3
 800619a:	4610      	mov	r0, r2
 800619c:	4619      	mov	r1, r3
 800619e:	4603      	mov	r3, r0
 80061a0:	4642      	mov	r2, r8
 80061a2:	189b      	adds	r3, r3, r2
 80061a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80061a6:	464b      	mov	r3, r9
 80061a8:	460a      	mov	r2, r1
 80061aa:	eb42 0303 	adc.w	r3, r2, r3
 80061ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	663b      	str	r3, [r7, #96]	; 0x60
 80061ba:	667a      	str	r2, [r7, #100]	; 0x64
 80061bc:	f04f 0200 	mov.w	r2, #0
 80061c0:	f04f 0300 	mov.w	r3, #0
 80061c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80061c8:	4649      	mov	r1, r9
 80061ca:	008b      	lsls	r3, r1, #2
 80061cc:	4641      	mov	r1, r8
 80061ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061d2:	4641      	mov	r1, r8
 80061d4:	008a      	lsls	r2, r1, #2
 80061d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80061da:	f7fa f869 	bl	80002b0 <__aeabi_uldivmod>
 80061de:	4602      	mov	r2, r0
 80061e0:	460b      	mov	r3, r1
 80061e2:	4b0d      	ldr	r3, [pc, #52]	; (8006218 <UART_SetConfig+0x4e4>)
 80061e4:	fba3 1302 	umull	r1, r3, r3, r2
 80061e8:	095b      	lsrs	r3, r3, #5
 80061ea:	2164      	movs	r1, #100	; 0x64
 80061ec:	fb01 f303 	mul.w	r3, r1, r3
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	011b      	lsls	r3, r3, #4
 80061f4:	3332      	adds	r3, #50	; 0x32
 80061f6:	4a08      	ldr	r2, [pc, #32]	; (8006218 <UART_SetConfig+0x4e4>)
 80061f8:	fba2 2303 	umull	r2, r3, r2, r3
 80061fc:	095b      	lsrs	r3, r3, #5
 80061fe:	f003 020f 	and.w	r2, r3, #15
 8006202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4422      	add	r2, r4
 800620a:	609a      	str	r2, [r3, #8]
}
 800620c:	bf00      	nop
 800620e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006212:	46bd      	mov	sp, r7
 8006214:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006218:	51eb851f 	.word	0x51eb851f

0800621c <_strtoul_l.constprop.0>:
 800621c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006220:	4f36      	ldr	r7, [pc, #216]	; (80062fc <_strtoul_l.constprop.0+0xe0>)
 8006222:	4686      	mov	lr, r0
 8006224:	460d      	mov	r5, r1
 8006226:	4628      	mov	r0, r5
 8006228:	f815 4b01 	ldrb.w	r4, [r5], #1
 800622c:	5d3e      	ldrb	r6, [r7, r4]
 800622e:	f016 0608 	ands.w	r6, r6, #8
 8006232:	d1f8      	bne.n	8006226 <_strtoul_l.constprop.0+0xa>
 8006234:	2c2d      	cmp	r4, #45	; 0x2d
 8006236:	d130      	bne.n	800629a <_strtoul_l.constprop.0+0x7e>
 8006238:	782c      	ldrb	r4, [r5, #0]
 800623a:	2601      	movs	r6, #1
 800623c:	1c85      	adds	r5, r0, #2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d057      	beq.n	80062f2 <_strtoul_l.constprop.0+0xd6>
 8006242:	2b10      	cmp	r3, #16
 8006244:	d109      	bne.n	800625a <_strtoul_l.constprop.0+0x3e>
 8006246:	2c30      	cmp	r4, #48	; 0x30
 8006248:	d107      	bne.n	800625a <_strtoul_l.constprop.0+0x3e>
 800624a:	7828      	ldrb	r0, [r5, #0]
 800624c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006250:	2858      	cmp	r0, #88	; 0x58
 8006252:	d149      	bne.n	80062e8 <_strtoul_l.constprop.0+0xcc>
 8006254:	786c      	ldrb	r4, [r5, #1]
 8006256:	2310      	movs	r3, #16
 8006258:	3502      	adds	r5, #2
 800625a:	f04f 38ff 	mov.w	r8, #4294967295
 800625e:	2700      	movs	r7, #0
 8006260:	fbb8 f8f3 	udiv	r8, r8, r3
 8006264:	fb03 f908 	mul.w	r9, r3, r8
 8006268:	ea6f 0909 	mvn.w	r9, r9
 800626c:	4638      	mov	r0, r7
 800626e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006272:	f1bc 0f09 	cmp.w	ip, #9
 8006276:	d815      	bhi.n	80062a4 <_strtoul_l.constprop.0+0x88>
 8006278:	4664      	mov	r4, ip
 800627a:	42a3      	cmp	r3, r4
 800627c:	dd23      	ble.n	80062c6 <_strtoul_l.constprop.0+0xaa>
 800627e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8006282:	d007      	beq.n	8006294 <_strtoul_l.constprop.0+0x78>
 8006284:	4580      	cmp	r8, r0
 8006286:	d31b      	bcc.n	80062c0 <_strtoul_l.constprop.0+0xa4>
 8006288:	d101      	bne.n	800628e <_strtoul_l.constprop.0+0x72>
 800628a:	45a1      	cmp	r9, r4
 800628c:	db18      	blt.n	80062c0 <_strtoul_l.constprop.0+0xa4>
 800628e:	fb00 4003 	mla	r0, r0, r3, r4
 8006292:	2701      	movs	r7, #1
 8006294:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006298:	e7e9      	b.n	800626e <_strtoul_l.constprop.0+0x52>
 800629a:	2c2b      	cmp	r4, #43	; 0x2b
 800629c:	bf04      	itt	eq
 800629e:	782c      	ldrbeq	r4, [r5, #0]
 80062a0:	1c85      	addeq	r5, r0, #2
 80062a2:	e7cc      	b.n	800623e <_strtoul_l.constprop.0+0x22>
 80062a4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80062a8:	f1bc 0f19 	cmp.w	ip, #25
 80062ac:	d801      	bhi.n	80062b2 <_strtoul_l.constprop.0+0x96>
 80062ae:	3c37      	subs	r4, #55	; 0x37
 80062b0:	e7e3      	b.n	800627a <_strtoul_l.constprop.0+0x5e>
 80062b2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80062b6:	f1bc 0f19 	cmp.w	ip, #25
 80062ba:	d804      	bhi.n	80062c6 <_strtoul_l.constprop.0+0xaa>
 80062bc:	3c57      	subs	r4, #87	; 0x57
 80062be:	e7dc      	b.n	800627a <_strtoul_l.constprop.0+0x5e>
 80062c0:	f04f 37ff 	mov.w	r7, #4294967295
 80062c4:	e7e6      	b.n	8006294 <_strtoul_l.constprop.0+0x78>
 80062c6:	1c7b      	adds	r3, r7, #1
 80062c8:	d106      	bne.n	80062d8 <_strtoul_l.constprop.0+0xbc>
 80062ca:	2322      	movs	r3, #34	; 0x22
 80062cc:	f8ce 3000 	str.w	r3, [lr]
 80062d0:	4638      	mov	r0, r7
 80062d2:	b932      	cbnz	r2, 80062e2 <_strtoul_l.constprop.0+0xc6>
 80062d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062d8:	b106      	cbz	r6, 80062dc <_strtoul_l.constprop.0+0xc0>
 80062da:	4240      	negs	r0, r0
 80062dc:	2a00      	cmp	r2, #0
 80062de:	d0f9      	beq.n	80062d4 <_strtoul_l.constprop.0+0xb8>
 80062e0:	b107      	cbz	r7, 80062e4 <_strtoul_l.constprop.0+0xc8>
 80062e2:	1e69      	subs	r1, r5, #1
 80062e4:	6011      	str	r1, [r2, #0]
 80062e6:	e7f5      	b.n	80062d4 <_strtoul_l.constprop.0+0xb8>
 80062e8:	2430      	movs	r4, #48	; 0x30
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1b5      	bne.n	800625a <_strtoul_l.constprop.0+0x3e>
 80062ee:	2308      	movs	r3, #8
 80062f0:	e7b3      	b.n	800625a <_strtoul_l.constprop.0+0x3e>
 80062f2:	2c30      	cmp	r4, #48	; 0x30
 80062f4:	d0a9      	beq.n	800624a <_strtoul_l.constprop.0+0x2e>
 80062f6:	230a      	movs	r3, #10
 80062f8:	e7af      	b.n	800625a <_strtoul_l.constprop.0+0x3e>
 80062fa:	bf00      	nop
 80062fc:	08006f55 	.word	0x08006f55

08006300 <strtoul>:
 8006300:	4613      	mov	r3, r2
 8006302:	460a      	mov	r2, r1
 8006304:	4601      	mov	r1, r0
 8006306:	4802      	ldr	r0, [pc, #8]	; (8006310 <strtoul+0x10>)
 8006308:	6800      	ldr	r0, [r0, #0]
 800630a:	f7ff bf87 	b.w	800621c <_strtoul_l.constprop.0>
 800630e:	bf00      	nop
 8006310:	200000fc 	.word	0x200000fc

08006314 <siprintf>:
 8006314:	b40e      	push	{r1, r2, r3}
 8006316:	b500      	push	{lr}
 8006318:	b09c      	sub	sp, #112	; 0x70
 800631a:	ab1d      	add	r3, sp, #116	; 0x74
 800631c:	9002      	str	r0, [sp, #8]
 800631e:	9006      	str	r0, [sp, #24]
 8006320:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006324:	4809      	ldr	r0, [pc, #36]	; (800634c <siprintf+0x38>)
 8006326:	9107      	str	r1, [sp, #28]
 8006328:	9104      	str	r1, [sp, #16]
 800632a:	4909      	ldr	r1, [pc, #36]	; (8006350 <siprintf+0x3c>)
 800632c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006330:	9105      	str	r1, [sp, #20]
 8006332:	6800      	ldr	r0, [r0, #0]
 8006334:	9301      	str	r3, [sp, #4]
 8006336:	a902      	add	r1, sp, #8
 8006338:	f000 fa0a 	bl	8006750 <_svfiprintf_r>
 800633c:	9b02      	ldr	r3, [sp, #8]
 800633e:	2200      	movs	r2, #0
 8006340:	701a      	strb	r2, [r3, #0]
 8006342:	b01c      	add	sp, #112	; 0x70
 8006344:	f85d eb04 	ldr.w	lr, [sp], #4
 8006348:	b003      	add	sp, #12
 800634a:	4770      	bx	lr
 800634c:	200000fc 	.word	0x200000fc
 8006350:	ffff0208 	.word	0xffff0208

08006354 <_vsniprintf_r>:
 8006354:	b530      	push	{r4, r5, lr}
 8006356:	4614      	mov	r4, r2
 8006358:	2c00      	cmp	r4, #0
 800635a:	b09b      	sub	sp, #108	; 0x6c
 800635c:	4605      	mov	r5, r0
 800635e:	461a      	mov	r2, r3
 8006360:	da05      	bge.n	800636e <_vsniprintf_r+0x1a>
 8006362:	238b      	movs	r3, #139	; 0x8b
 8006364:	6003      	str	r3, [r0, #0]
 8006366:	f04f 30ff 	mov.w	r0, #4294967295
 800636a:	b01b      	add	sp, #108	; 0x6c
 800636c:	bd30      	pop	{r4, r5, pc}
 800636e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006372:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006376:	bf14      	ite	ne
 8006378:	f104 33ff 	addne.w	r3, r4, #4294967295
 800637c:	4623      	moveq	r3, r4
 800637e:	9302      	str	r3, [sp, #8]
 8006380:	9305      	str	r3, [sp, #20]
 8006382:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006386:	9100      	str	r1, [sp, #0]
 8006388:	9104      	str	r1, [sp, #16]
 800638a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800638e:	4669      	mov	r1, sp
 8006390:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006392:	f000 f9dd 	bl	8006750 <_svfiprintf_r>
 8006396:	1c43      	adds	r3, r0, #1
 8006398:	bfbc      	itt	lt
 800639a:	238b      	movlt	r3, #139	; 0x8b
 800639c:	602b      	strlt	r3, [r5, #0]
 800639e:	2c00      	cmp	r4, #0
 80063a0:	d0e3      	beq.n	800636a <_vsniprintf_r+0x16>
 80063a2:	9b00      	ldr	r3, [sp, #0]
 80063a4:	2200      	movs	r2, #0
 80063a6:	701a      	strb	r2, [r3, #0]
 80063a8:	e7df      	b.n	800636a <_vsniprintf_r+0x16>
	...

080063ac <vsniprintf>:
 80063ac:	b507      	push	{r0, r1, r2, lr}
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	4613      	mov	r3, r2
 80063b2:	460a      	mov	r2, r1
 80063b4:	4601      	mov	r1, r0
 80063b6:	4803      	ldr	r0, [pc, #12]	; (80063c4 <vsniprintf+0x18>)
 80063b8:	6800      	ldr	r0, [r0, #0]
 80063ba:	f7ff ffcb 	bl	8006354 <_vsniprintf_r>
 80063be:	b003      	add	sp, #12
 80063c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80063c4:	200000fc 	.word	0x200000fc

080063c8 <memset>:
 80063c8:	4402      	add	r2, r0
 80063ca:	4603      	mov	r3, r0
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d100      	bne.n	80063d2 <memset+0xa>
 80063d0:	4770      	bx	lr
 80063d2:	f803 1b01 	strb.w	r1, [r3], #1
 80063d6:	e7f9      	b.n	80063cc <memset+0x4>

080063d8 <strncpy>:
 80063d8:	b510      	push	{r4, lr}
 80063da:	3901      	subs	r1, #1
 80063dc:	4603      	mov	r3, r0
 80063de:	b132      	cbz	r2, 80063ee <strncpy+0x16>
 80063e0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80063e4:	f803 4b01 	strb.w	r4, [r3], #1
 80063e8:	3a01      	subs	r2, #1
 80063ea:	2c00      	cmp	r4, #0
 80063ec:	d1f7      	bne.n	80063de <strncpy+0x6>
 80063ee:	441a      	add	r2, r3
 80063f0:	2100      	movs	r1, #0
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d100      	bne.n	80063f8 <strncpy+0x20>
 80063f6:	bd10      	pop	{r4, pc}
 80063f8:	f803 1b01 	strb.w	r1, [r3], #1
 80063fc:	e7f9      	b.n	80063f2 <strncpy+0x1a>

080063fe <__strtok_r>:
 80063fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006400:	b908      	cbnz	r0, 8006406 <__strtok_r+0x8>
 8006402:	6810      	ldr	r0, [r2, #0]
 8006404:	b188      	cbz	r0, 800642a <__strtok_r+0x2c>
 8006406:	4604      	mov	r4, r0
 8006408:	4620      	mov	r0, r4
 800640a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800640e:	460f      	mov	r7, r1
 8006410:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006414:	b91e      	cbnz	r6, 800641e <__strtok_r+0x20>
 8006416:	b965      	cbnz	r5, 8006432 <__strtok_r+0x34>
 8006418:	6015      	str	r5, [r2, #0]
 800641a:	4628      	mov	r0, r5
 800641c:	e005      	b.n	800642a <__strtok_r+0x2c>
 800641e:	42b5      	cmp	r5, r6
 8006420:	d1f6      	bne.n	8006410 <__strtok_r+0x12>
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1f0      	bne.n	8006408 <__strtok_r+0xa>
 8006426:	6014      	str	r4, [r2, #0]
 8006428:	7003      	strb	r3, [r0, #0]
 800642a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800642c:	461c      	mov	r4, r3
 800642e:	e00c      	b.n	800644a <__strtok_r+0x4c>
 8006430:	b915      	cbnz	r5, 8006438 <__strtok_r+0x3a>
 8006432:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006436:	460e      	mov	r6, r1
 8006438:	f816 5b01 	ldrb.w	r5, [r6], #1
 800643c:	42ab      	cmp	r3, r5
 800643e:	d1f7      	bne.n	8006430 <__strtok_r+0x32>
 8006440:	2b00      	cmp	r3, #0
 8006442:	d0f3      	beq.n	800642c <__strtok_r+0x2e>
 8006444:	2300      	movs	r3, #0
 8006446:	f804 3c01 	strb.w	r3, [r4, #-1]
 800644a:	6014      	str	r4, [r2, #0]
 800644c:	e7ed      	b.n	800642a <__strtok_r+0x2c>

0800644e <strtok_r>:
 800644e:	2301      	movs	r3, #1
 8006450:	f7ff bfd5 	b.w	80063fe <__strtok_r>

08006454 <__errno>:
 8006454:	4b01      	ldr	r3, [pc, #4]	; (800645c <__errno+0x8>)
 8006456:	6818      	ldr	r0, [r3, #0]
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	200000fc 	.word	0x200000fc

08006460 <__libc_init_array>:
 8006460:	b570      	push	{r4, r5, r6, lr}
 8006462:	4d0d      	ldr	r5, [pc, #52]	; (8006498 <__libc_init_array+0x38>)
 8006464:	4c0d      	ldr	r4, [pc, #52]	; (800649c <__libc_init_array+0x3c>)
 8006466:	1b64      	subs	r4, r4, r5
 8006468:	10a4      	asrs	r4, r4, #2
 800646a:	2600      	movs	r6, #0
 800646c:	42a6      	cmp	r6, r4
 800646e:	d109      	bne.n	8006484 <__libc_init_array+0x24>
 8006470:	4d0b      	ldr	r5, [pc, #44]	; (80064a0 <__libc_init_array+0x40>)
 8006472:	4c0c      	ldr	r4, [pc, #48]	; (80064a4 <__libc_init_array+0x44>)
 8006474:	f000 fc6a 	bl	8006d4c <_init>
 8006478:	1b64      	subs	r4, r4, r5
 800647a:	10a4      	asrs	r4, r4, #2
 800647c:	2600      	movs	r6, #0
 800647e:	42a6      	cmp	r6, r4
 8006480:	d105      	bne.n	800648e <__libc_init_array+0x2e>
 8006482:	bd70      	pop	{r4, r5, r6, pc}
 8006484:	f855 3b04 	ldr.w	r3, [r5], #4
 8006488:	4798      	blx	r3
 800648a:	3601      	adds	r6, #1
 800648c:	e7ee      	b.n	800646c <__libc_init_array+0xc>
 800648e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006492:	4798      	blx	r3
 8006494:	3601      	adds	r6, #1
 8006496:	e7f2      	b.n	800647e <__libc_init_array+0x1e>
 8006498:	08007090 	.word	0x08007090
 800649c:	08007090 	.word	0x08007090
 80064a0:	08007090 	.word	0x08007090
 80064a4:	08007094 	.word	0x08007094

080064a8 <__retarget_lock_acquire_recursive>:
 80064a8:	4770      	bx	lr

080064aa <__retarget_lock_release_recursive>:
 80064aa:	4770      	bx	lr

080064ac <_free_r>:
 80064ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80064ae:	2900      	cmp	r1, #0
 80064b0:	d044      	beq.n	800653c <_free_r+0x90>
 80064b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064b6:	9001      	str	r0, [sp, #4]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f1a1 0404 	sub.w	r4, r1, #4
 80064be:	bfb8      	it	lt
 80064c0:	18e4      	addlt	r4, r4, r3
 80064c2:	f000 f8df 	bl	8006684 <__malloc_lock>
 80064c6:	4a1e      	ldr	r2, [pc, #120]	; (8006540 <_free_r+0x94>)
 80064c8:	9801      	ldr	r0, [sp, #4]
 80064ca:	6813      	ldr	r3, [r2, #0]
 80064cc:	b933      	cbnz	r3, 80064dc <_free_r+0x30>
 80064ce:	6063      	str	r3, [r4, #4]
 80064d0:	6014      	str	r4, [r2, #0]
 80064d2:	b003      	add	sp, #12
 80064d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80064d8:	f000 b8da 	b.w	8006690 <__malloc_unlock>
 80064dc:	42a3      	cmp	r3, r4
 80064de:	d908      	bls.n	80064f2 <_free_r+0x46>
 80064e0:	6825      	ldr	r5, [r4, #0]
 80064e2:	1961      	adds	r1, r4, r5
 80064e4:	428b      	cmp	r3, r1
 80064e6:	bf01      	itttt	eq
 80064e8:	6819      	ldreq	r1, [r3, #0]
 80064ea:	685b      	ldreq	r3, [r3, #4]
 80064ec:	1949      	addeq	r1, r1, r5
 80064ee:	6021      	streq	r1, [r4, #0]
 80064f0:	e7ed      	b.n	80064ce <_free_r+0x22>
 80064f2:	461a      	mov	r2, r3
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	b10b      	cbz	r3, 80064fc <_free_r+0x50>
 80064f8:	42a3      	cmp	r3, r4
 80064fa:	d9fa      	bls.n	80064f2 <_free_r+0x46>
 80064fc:	6811      	ldr	r1, [r2, #0]
 80064fe:	1855      	adds	r5, r2, r1
 8006500:	42a5      	cmp	r5, r4
 8006502:	d10b      	bne.n	800651c <_free_r+0x70>
 8006504:	6824      	ldr	r4, [r4, #0]
 8006506:	4421      	add	r1, r4
 8006508:	1854      	adds	r4, r2, r1
 800650a:	42a3      	cmp	r3, r4
 800650c:	6011      	str	r1, [r2, #0]
 800650e:	d1e0      	bne.n	80064d2 <_free_r+0x26>
 8006510:	681c      	ldr	r4, [r3, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	6053      	str	r3, [r2, #4]
 8006516:	440c      	add	r4, r1
 8006518:	6014      	str	r4, [r2, #0]
 800651a:	e7da      	b.n	80064d2 <_free_r+0x26>
 800651c:	d902      	bls.n	8006524 <_free_r+0x78>
 800651e:	230c      	movs	r3, #12
 8006520:	6003      	str	r3, [r0, #0]
 8006522:	e7d6      	b.n	80064d2 <_free_r+0x26>
 8006524:	6825      	ldr	r5, [r4, #0]
 8006526:	1961      	adds	r1, r4, r5
 8006528:	428b      	cmp	r3, r1
 800652a:	bf04      	itt	eq
 800652c:	6819      	ldreq	r1, [r3, #0]
 800652e:	685b      	ldreq	r3, [r3, #4]
 8006530:	6063      	str	r3, [r4, #4]
 8006532:	bf04      	itt	eq
 8006534:	1949      	addeq	r1, r1, r5
 8006536:	6021      	streq	r1, [r4, #0]
 8006538:	6054      	str	r4, [r2, #4]
 800653a:	e7ca      	b.n	80064d2 <_free_r+0x26>
 800653c:	b003      	add	sp, #12
 800653e:	bd30      	pop	{r4, r5, pc}
 8006540:	200006e8 	.word	0x200006e8

08006544 <sbrk_aligned>:
 8006544:	b570      	push	{r4, r5, r6, lr}
 8006546:	4e0e      	ldr	r6, [pc, #56]	; (8006580 <sbrk_aligned+0x3c>)
 8006548:	460c      	mov	r4, r1
 800654a:	6831      	ldr	r1, [r6, #0]
 800654c:	4605      	mov	r5, r0
 800654e:	b911      	cbnz	r1, 8006556 <sbrk_aligned+0x12>
 8006550:	f000 fba6 	bl	8006ca0 <_sbrk_r>
 8006554:	6030      	str	r0, [r6, #0]
 8006556:	4621      	mov	r1, r4
 8006558:	4628      	mov	r0, r5
 800655a:	f000 fba1 	bl	8006ca0 <_sbrk_r>
 800655e:	1c43      	adds	r3, r0, #1
 8006560:	d00a      	beq.n	8006578 <sbrk_aligned+0x34>
 8006562:	1cc4      	adds	r4, r0, #3
 8006564:	f024 0403 	bic.w	r4, r4, #3
 8006568:	42a0      	cmp	r0, r4
 800656a:	d007      	beq.n	800657c <sbrk_aligned+0x38>
 800656c:	1a21      	subs	r1, r4, r0
 800656e:	4628      	mov	r0, r5
 8006570:	f000 fb96 	bl	8006ca0 <_sbrk_r>
 8006574:	3001      	adds	r0, #1
 8006576:	d101      	bne.n	800657c <sbrk_aligned+0x38>
 8006578:	f04f 34ff 	mov.w	r4, #4294967295
 800657c:	4620      	mov	r0, r4
 800657e:	bd70      	pop	{r4, r5, r6, pc}
 8006580:	200006ec 	.word	0x200006ec

08006584 <_malloc_r>:
 8006584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006588:	1ccd      	adds	r5, r1, #3
 800658a:	f025 0503 	bic.w	r5, r5, #3
 800658e:	3508      	adds	r5, #8
 8006590:	2d0c      	cmp	r5, #12
 8006592:	bf38      	it	cc
 8006594:	250c      	movcc	r5, #12
 8006596:	2d00      	cmp	r5, #0
 8006598:	4607      	mov	r7, r0
 800659a:	db01      	blt.n	80065a0 <_malloc_r+0x1c>
 800659c:	42a9      	cmp	r1, r5
 800659e:	d905      	bls.n	80065ac <_malloc_r+0x28>
 80065a0:	230c      	movs	r3, #12
 80065a2:	603b      	str	r3, [r7, #0]
 80065a4:	2600      	movs	r6, #0
 80065a6:	4630      	mov	r0, r6
 80065a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006680 <_malloc_r+0xfc>
 80065b0:	f000 f868 	bl	8006684 <__malloc_lock>
 80065b4:	f8d8 3000 	ldr.w	r3, [r8]
 80065b8:	461c      	mov	r4, r3
 80065ba:	bb5c      	cbnz	r4, 8006614 <_malloc_r+0x90>
 80065bc:	4629      	mov	r1, r5
 80065be:	4638      	mov	r0, r7
 80065c0:	f7ff ffc0 	bl	8006544 <sbrk_aligned>
 80065c4:	1c43      	adds	r3, r0, #1
 80065c6:	4604      	mov	r4, r0
 80065c8:	d155      	bne.n	8006676 <_malloc_r+0xf2>
 80065ca:	f8d8 4000 	ldr.w	r4, [r8]
 80065ce:	4626      	mov	r6, r4
 80065d0:	2e00      	cmp	r6, #0
 80065d2:	d145      	bne.n	8006660 <_malloc_r+0xdc>
 80065d4:	2c00      	cmp	r4, #0
 80065d6:	d048      	beq.n	800666a <_malloc_r+0xe6>
 80065d8:	6823      	ldr	r3, [r4, #0]
 80065da:	4631      	mov	r1, r6
 80065dc:	4638      	mov	r0, r7
 80065de:	eb04 0903 	add.w	r9, r4, r3
 80065e2:	f000 fb5d 	bl	8006ca0 <_sbrk_r>
 80065e6:	4581      	cmp	r9, r0
 80065e8:	d13f      	bne.n	800666a <_malloc_r+0xe6>
 80065ea:	6821      	ldr	r1, [r4, #0]
 80065ec:	1a6d      	subs	r5, r5, r1
 80065ee:	4629      	mov	r1, r5
 80065f0:	4638      	mov	r0, r7
 80065f2:	f7ff ffa7 	bl	8006544 <sbrk_aligned>
 80065f6:	3001      	adds	r0, #1
 80065f8:	d037      	beq.n	800666a <_malloc_r+0xe6>
 80065fa:	6823      	ldr	r3, [r4, #0]
 80065fc:	442b      	add	r3, r5
 80065fe:	6023      	str	r3, [r4, #0]
 8006600:	f8d8 3000 	ldr.w	r3, [r8]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d038      	beq.n	800667a <_malloc_r+0xf6>
 8006608:	685a      	ldr	r2, [r3, #4]
 800660a:	42a2      	cmp	r2, r4
 800660c:	d12b      	bne.n	8006666 <_malloc_r+0xe2>
 800660e:	2200      	movs	r2, #0
 8006610:	605a      	str	r2, [r3, #4]
 8006612:	e00f      	b.n	8006634 <_malloc_r+0xb0>
 8006614:	6822      	ldr	r2, [r4, #0]
 8006616:	1b52      	subs	r2, r2, r5
 8006618:	d41f      	bmi.n	800665a <_malloc_r+0xd6>
 800661a:	2a0b      	cmp	r2, #11
 800661c:	d917      	bls.n	800664e <_malloc_r+0xca>
 800661e:	1961      	adds	r1, r4, r5
 8006620:	42a3      	cmp	r3, r4
 8006622:	6025      	str	r5, [r4, #0]
 8006624:	bf18      	it	ne
 8006626:	6059      	strne	r1, [r3, #4]
 8006628:	6863      	ldr	r3, [r4, #4]
 800662a:	bf08      	it	eq
 800662c:	f8c8 1000 	streq.w	r1, [r8]
 8006630:	5162      	str	r2, [r4, r5]
 8006632:	604b      	str	r3, [r1, #4]
 8006634:	4638      	mov	r0, r7
 8006636:	f104 060b 	add.w	r6, r4, #11
 800663a:	f000 f829 	bl	8006690 <__malloc_unlock>
 800663e:	f026 0607 	bic.w	r6, r6, #7
 8006642:	1d23      	adds	r3, r4, #4
 8006644:	1af2      	subs	r2, r6, r3
 8006646:	d0ae      	beq.n	80065a6 <_malloc_r+0x22>
 8006648:	1b9b      	subs	r3, r3, r6
 800664a:	50a3      	str	r3, [r4, r2]
 800664c:	e7ab      	b.n	80065a6 <_malloc_r+0x22>
 800664e:	42a3      	cmp	r3, r4
 8006650:	6862      	ldr	r2, [r4, #4]
 8006652:	d1dd      	bne.n	8006610 <_malloc_r+0x8c>
 8006654:	f8c8 2000 	str.w	r2, [r8]
 8006658:	e7ec      	b.n	8006634 <_malloc_r+0xb0>
 800665a:	4623      	mov	r3, r4
 800665c:	6864      	ldr	r4, [r4, #4]
 800665e:	e7ac      	b.n	80065ba <_malloc_r+0x36>
 8006660:	4634      	mov	r4, r6
 8006662:	6876      	ldr	r6, [r6, #4]
 8006664:	e7b4      	b.n	80065d0 <_malloc_r+0x4c>
 8006666:	4613      	mov	r3, r2
 8006668:	e7cc      	b.n	8006604 <_malloc_r+0x80>
 800666a:	230c      	movs	r3, #12
 800666c:	603b      	str	r3, [r7, #0]
 800666e:	4638      	mov	r0, r7
 8006670:	f000 f80e 	bl	8006690 <__malloc_unlock>
 8006674:	e797      	b.n	80065a6 <_malloc_r+0x22>
 8006676:	6025      	str	r5, [r4, #0]
 8006678:	e7dc      	b.n	8006634 <_malloc_r+0xb0>
 800667a:	605b      	str	r3, [r3, #4]
 800667c:	deff      	udf	#255	; 0xff
 800667e:	bf00      	nop
 8006680:	200006e8 	.word	0x200006e8

08006684 <__malloc_lock>:
 8006684:	4801      	ldr	r0, [pc, #4]	; (800668c <__malloc_lock+0x8>)
 8006686:	f7ff bf0f 	b.w	80064a8 <__retarget_lock_acquire_recursive>
 800668a:	bf00      	nop
 800668c:	200006e4 	.word	0x200006e4

08006690 <__malloc_unlock>:
 8006690:	4801      	ldr	r0, [pc, #4]	; (8006698 <__malloc_unlock+0x8>)
 8006692:	f7ff bf0a 	b.w	80064aa <__retarget_lock_release_recursive>
 8006696:	bf00      	nop
 8006698:	200006e4 	.word	0x200006e4

0800669c <__ssputs_r>:
 800669c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066a0:	688e      	ldr	r6, [r1, #8]
 80066a2:	461f      	mov	r7, r3
 80066a4:	42be      	cmp	r6, r7
 80066a6:	680b      	ldr	r3, [r1, #0]
 80066a8:	4682      	mov	sl, r0
 80066aa:	460c      	mov	r4, r1
 80066ac:	4690      	mov	r8, r2
 80066ae:	d82c      	bhi.n	800670a <__ssputs_r+0x6e>
 80066b0:	898a      	ldrh	r2, [r1, #12]
 80066b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80066b6:	d026      	beq.n	8006706 <__ssputs_r+0x6a>
 80066b8:	6965      	ldr	r5, [r4, #20]
 80066ba:	6909      	ldr	r1, [r1, #16]
 80066bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80066c0:	eba3 0901 	sub.w	r9, r3, r1
 80066c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80066c8:	1c7b      	adds	r3, r7, #1
 80066ca:	444b      	add	r3, r9
 80066cc:	106d      	asrs	r5, r5, #1
 80066ce:	429d      	cmp	r5, r3
 80066d0:	bf38      	it	cc
 80066d2:	461d      	movcc	r5, r3
 80066d4:	0553      	lsls	r3, r2, #21
 80066d6:	d527      	bpl.n	8006728 <__ssputs_r+0x8c>
 80066d8:	4629      	mov	r1, r5
 80066da:	f7ff ff53 	bl	8006584 <_malloc_r>
 80066de:	4606      	mov	r6, r0
 80066e0:	b360      	cbz	r0, 800673c <__ssputs_r+0xa0>
 80066e2:	6921      	ldr	r1, [r4, #16]
 80066e4:	464a      	mov	r2, r9
 80066e6:	f000 faeb 	bl	8006cc0 <memcpy>
 80066ea:	89a3      	ldrh	r3, [r4, #12]
 80066ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80066f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066f4:	81a3      	strh	r3, [r4, #12]
 80066f6:	6126      	str	r6, [r4, #16]
 80066f8:	6165      	str	r5, [r4, #20]
 80066fa:	444e      	add	r6, r9
 80066fc:	eba5 0509 	sub.w	r5, r5, r9
 8006700:	6026      	str	r6, [r4, #0]
 8006702:	60a5      	str	r5, [r4, #8]
 8006704:	463e      	mov	r6, r7
 8006706:	42be      	cmp	r6, r7
 8006708:	d900      	bls.n	800670c <__ssputs_r+0x70>
 800670a:	463e      	mov	r6, r7
 800670c:	6820      	ldr	r0, [r4, #0]
 800670e:	4632      	mov	r2, r6
 8006710:	4641      	mov	r1, r8
 8006712:	f000 faab 	bl	8006c6c <memmove>
 8006716:	68a3      	ldr	r3, [r4, #8]
 8006718:	1b9b      	subs	r3, r3, r6
 800671a:	60a3      	str	r3, [r4, #8]
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	4433      	add	r3, r6
 8006720:	6023      	str	r3, [r4, #0]
 8006722:	2000      	movs	r0, #0
 8006724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006728:	462a      	mov	r2, r5
 800672a:	f000 fad7 	bl	8006cdc <_realloc_r>
 800672e:	4606      	mov	r6, r0
 8006730:	2800      	cmp	r0, #0
 8006732:	d1e0      	bne.n	80066f6 <__ssputs_r+0x5a>
 8006734:	6921      	ldr	r1, [r4, #16]
 8006736:	4650      	mov	r0, sl
 8006738:	f7ff feb8 	bl	80064ac <_free_r>
 800673c:	230c      	movs	r3, #12
 800673e:	f8ca 3000 	str.w	r3, [sl]
 8006742:	89a3      	ldrh	r3, [r4, #12]
 8006744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006748:	81a3      	strh	r3, [r4, #12]
 800674a:	f04f 30ff 	mov.w	r0, #4294967295
 800674e:	e7e9      	b.n	8006724 <__ssputs_r+0x88>

08006750 <_svfiprintf_r>:
 8006750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006754:	4698      	mov	r8, r3
 8006756:	898b      	ldrh	r3, [r1, #12]
 8006758:	061b      	lsls	r3, r3, #24
 800675a:	b09d      	sub	sp, #116	; 0x74
 800675c:	4607      	mov	r7, r0
 800675e:	460d      	mov	r5, r1
 8006760:	4614      	mov	r4, r2
 8006762:	d50e      	bpl.n	8006782 <_svfiprintf_r+0x32>
 8006764:	690b      	ldr	r3, [r1, #16]
 8006766:	b963      	cbnz	r3, 8006782 <_svfiprintf_r+0x32>
 8006768:	2140      	movs	r1, #64	; 0x40
 800676a:	f7ff ff0b 	bl	8006584 <_malloc_r>
 800676e:	6028      	str	r0, [r5, #0]
 8006770:	6128      	str	r0, [r5, #16]
 8006772:	b920      	cbnz	r0, 800677e <_svfiprintf_r+0x2e>
 8006774:	230c      	movs	r3, #12
 8006776:	603b      	str	r3, [r7, #0]
 8006778:	f04f 30ff 	mov.w	r0, #4294967295
 800677c:	e0d0      	b.n	8006920 <_svfiprintf_r+0x1d0>
 800677e:	2340      	movs	r3, #64	; 0x40
 8006780:	616b      	str	r3, [r5, #20]
 8006782:	2300      	movs	r3, #0
 8006784:	9309      	str	r3, [sp, #36]	; 0x24
 8006786:	2320      	movs	r3, #32
 8006788:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800678c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006790:	2330      	movs	r3, #48	; 0x30
 8006792:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006938 <_svfiprintf_r+0x1e8>
 8006796:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800679a:	f04f 0901 	mov.w	r9, #1
 800679e:	4623      	mov	r3, r4
 80067a0:	469a      	mov	sl, r3
 80067a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067a6:	b10a      	cbz	r2, 80067ac <_svfiprintf_r+0x5c>
 80067a8:	2a25      	cmp	r2, #37	; 0x25
 80067aa:	d1f9      	bne.n	80067a0 <_svfiprintf_r+0x50>
 80067ac:	ebba 0b04 	subs.w	fp, sl, r4
 80067b0:	d00b      	beq.n	80067ca <_svfiprintf_r+0x7a>
 80067b2:	465b      	mov	r3, fp
 80067b4:	4622      	mov	r2, r4
 80067b6:	4629      	mov	r1, r5
 80067b8:	4638      	mov	r0, r7
 80067ba:	f7ff ff6f 	bl	800669c <__ssputs_r>
 80067be:	3001      	adds	r0, #1
 80067c0:	f000 80a9 	beq.w	8006916 <_svfiprintf_r+0x1c6>
 80067c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067c6:	445a      	add	r2, fp
 80067c8:	9209      	str	r2, [sp, #36]	; 0x24
 80067ca:	f89a 3000 	ldrb.w	r3, [sl]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f000 80a1 	beq.w	8006916 <_svfiprintf_r+0x1c6>
 80067d4:	2300      	movs	r3, #0
 80067d6:	f04f 32ff 	mov.w	r2, #4294967295
 80067da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067de:	f10a 0a01 	add.w	sl, sl, #1
 80067e2:	9304      	str	r3, [sp, #16]
 80067e4:	9307      	str	r3, [sp, #28]
 80067e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067ea:	931a      	str	r3, [sp, #104]	; 0x68
 80067ec:	4654      	mov	r4, sl
 80067ee:	2205      	movs	r2, #5
 80067f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067f4:	4850      	ldr	r0, [pc, #320]	; (8006938 <_svfiprintf_r+0x1e8>)
 80067f6:	f7f9 fd0b 	bl	8000210 <memchr>
 80067fa:	9a04      	ldr	r2, [sp, #16]
 80067fc:	b9d8      	cbnz	r0, 8006836 <_svfiprintf_r+0xe6>
 80067fe:	06d0      	lsls	r0, r2, #27
 8006800:	bf44      	itt	mi
 8006802:	2320      	movmi	r3, #32
 8006804:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006808:	0711      	lsls	r1, r2, #28
 800680a:	bf44      	itt	mi
 800680c:	232b      	movmi	r3, #43	; 0x2b
 800680e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006812:	f89a 3000 	ldrb.w	r3, [sl]
 8006816:	2b2a      	cmp	r3, #42	; 0x2a
 8006818:	d015      	beq.n	8006846 <_svfiprintf_r+0xf6>
 800681a:	9a07      	ldr	r2, [sp, #28]
 800681c:	4654      	mov	r4, sl
 800681e:	2000      	movs	r0, #0
 8006820:	f04f 0c0a 	mov.w	ip, #10
 8006824:	4621      	mov	r1, r4
 8006826:	f811 3b01 	ldrb.w	r3, [r1], #1
 800682a:	3b30      	subs	r3, #48	; 0x30
 800682c:	2b09      	cmp	r3, #9
 800682e:	d94d      	bls.n	80068cc <_svfiprintf_r+0x17c>
 8006830:	b1b0      	cbz	r0, 8006860 <_svfiprintf_r+0x110>
 8006832:	9207      	str	r2, [sp, #28]
 8006834:	e014      	b.n	8006860 <_svfiprintf_r+0x110>
 8006836:	eba0 0308 	sub.w	r3, r0, r8
 800683a:	fa09 f303 	lsl.w	r3, r9, r3
 800683e:	4313      	orrs	r3, r2
 8006840:	9304      	str	r3, [sp, #16]
 8006842:	46a2      	mov	sl, r4
 8006844:	e7d2      	b.n	80067ec <_svfiprintf_r+0x9c>
 8006846:	9b03      	ldr	r3, [sp, #12]
 8006848:	1d19      	adds	r1, r3, #4
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	9103      	str	r1, [sp, #12]
 800684e:	2b00      	cmp	r3, #0
 8006850:	bfbb      	ittet	lt
 8006852:	425b      	neglt	r3, r3
 8006854:	f042 0202 	orrlt.w	r2, r2, #2
 8006858:	9307      	strge	r3, [sp, #28]
 800685a:	9307      	strlt	r3, [sp, #28]
 800685c:	bfb8      	it	lt
 800685e:	9204      	strlt	r2, [sp, #16]
 8006860:	7823      	ldrb	r3, [r4, #0]
 8006862:	2b2e      	cmp	r3, #46	; 0x2e
 8006864:	d10c      	bne.n	8006880 <_svfiprintf_r+0x130>
 8006866:	7863      	ldrb	r3, [r4, #1]
 8006868:	2b2a      	cmp	r3, #42	; 0x2a
 800686a:	d134      	bne.n	80068d6 <_svfiprintf_r+0x186>
 800686c:	9b03      	ldr	r3, [sp, #12]
 800686e:	1d1a      	adds	r2, r3, #4
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	9203      	str	r2, [sp, #12]
 8006874:	2b00      	cmp	r3, #0
 8006876:	bfb8      	it	lt
 8006878:	f04f 33ff 	movlt.w	r3, #4294967295
 800687c:	3402      	adds	r4, #2
 800687e:	9305      	str	r3, [sp, #20]
 8006880:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006948 <_svfiprintf_r+0x1f8>
 8006884:	7821      	ldrb	r1, [r4, #0]
 8006886:	2203      	movs	r2, #3
 8006888:	4650      	mov	r0, sl
 800688a:	f7f9 fcc1 	bl	8000210 <memchr>
 800688e:	b138      	cbz	r0, 80068a0 <_svfiprintf_r+0x150>
 8006890:	9b04      	ldr	r3, [sp, #16]
 8006892:	eba0 000a 	sub.w	r0, r0, sl
 8006896:	2240      	movs	r2, #64	; 0x40
 8006898:	4082      	lsls	r2, r0
 800689a:	4313      	orrs	r3, r2
 800689c:	3401      	adds	r4, #1
 800689e:	9304      	str	r3, [sp, #16]
 80068a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068a4:	4825      	ldr	r0, [pc, #148]	; (800693c <_svfiprintf_r+0x1ec>)
 80068a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068aa:	2206      	movs	r2, #6
 80068ac:	f7f9 fcb0 	bl	8000210 <memchr>
 80068b0:	2800      	cmp	r0, #0
 80068b2:	d038      	beq.n	8006926 <_svfiprintf_r+0x1d6>
 80068b4:	4b22      	ldr	r3, [pc, #136]	; (8006940 <_svfiprintf_r+0x1f0>)
 80068b6:	bb1b      	cbnz	r3, 8006900 <_svfiprintf_r+0x1b0>
 80068b8:	9b03      	ldr	r3, [sp, #12]
 80068ba:	3307      	adds	r3, #7
 80068bc:	f023 0307 	bic.w	r3, r3, #7
 80068c0:	3308      	adds	r3, #8
 80068c2:	9303      	str	r3, [sp, #12]
 80068c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068c6:	4433      	add	r3, r6
 80068c8:	9309      	str	r3, [sp, #36]	; 0x24
 80068ca:	e768      	b.n	800679e <_svfiprintf_r+0x4e>
 80068cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80068d0:	460c      	mov	r4, r1
 80068d2:	2001      	movs	r0, #1
 80068d4:	e7a6      	b.n	8006824 <_svfiprintf_r+0xd4>
 80068d6:	2300      	movs	r3, #0
 80068d8:	3401      	adds	r4, #1
 80068da:	9305      	str	r3, [sp, #20]
 80068dc:	4619      	mov	r1, r3
 80068de:	f04f 0c0a 	mov.w	ip, #10
 80068e2:	4620      	mov	r0, r4
 80068e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068e8:	3a30      	subs	r2, #48	; 0x30
 80068ea:	2a09      	cmp	r2, #9
 80068ec:	d903      	bls.n	80068f6 <_svfiprintf_r+0x1a6>
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d0c6      	beq.n	8006880 <_svfiprintf_r+0x130>
 80068f2:	9105      	str	r1, [sp, #20]
 80068f4:	e7c4      	b.n	8006880 <_svfiprintf_r+0x130>
 80068f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80068fa:	4604      	mov	r4, r0
 80068fc:	2301      	movs	r3, #1
 80068fe:	e7f0      	b.n	80068e2 <_svfiprintf_r+0x192>
 8006900:	ab03      	add	r3, sp, #12
 8006902:	9300      	str	r3, [sp, #0]
 8006904:	462a      	mov	r2, r5
 8006906:	4b0f      	ldr	r3, [pc, #60]	; (8006944 <_svfiprintf_r+0x1f4>)
 8006908:	a904      	add	r1, sp, #16
 800690a:	4638      	mov	r0, r7
 800690c:	f3af 8000 	nop.w
 8006910:	1c42      	adds	r2, r0, #1
 8006912:	4606      	mov	r6, r0
 8006914:	d1d6      	bne.n	80068c4 <_svfiprintf_r+0x174>
 8006916:	89ab      	ldrh	r3, [r5, #12]
 8006918:	065b      	lsls	r3, r3, #25
 800691a:	f53f af2d 	bmi.w	8006778 <_svfiprintf_r+0x28>
 800691e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006920:	b01d      	add	sp, #116	; 0x74
 8006922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006926:	ab03      	add	r3, sp, #12
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	462a      	mov	r2, r5
 800692c:	4b05      	ldr	r3, [pc, #20]	; (8006944 <_svfiprintf_r+0x1f4>)
 800692e:	a904      	add	r1, sp, #16
 8006930:	4638      	mov	r0, r7
 8006932:	f000 f879 	bl	8006a28 <_printf_i>
 8006936:	e7eb      	b.n	8006910 <_svfiprintf_r+0x1c0>
 8006938:	08007055 	.word	0x08007055
 800693c:	0800705f 	.word	0x0800705f
 8006940:	00000000 	.word	0x00000000
 8006944:	0800669d 	.word	0x0800669d
 8006948:	0800705b 	.word	0x0800705b

0800694c <_printf_common>:
 800694c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006950:	4616      	mov	r6, r2
 8006952:	4699      	mov	r9, r3
 8006954:	688a      	ldr	r2, [r1, #8]
 8006956:	690b      	ldr	r3, [r1, #16]
 8006958:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800695c:	4293      	cmp	r3, r2
 800695e:	bfb8      	it	lt
 8006960:	4613      	movlt	r3, r2
 8006962:	6033      	str	r3, [r6, #0]
 8006964:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006968:	4607      	mov	r7, r0
 800696a:	460c      	mov	r4, r1
 800696c:	b10a      	cbz	r2, 8006972 <_printf_common+0x26>
 800696e:	3301      	adds	r3, #1
 8006970:	6033      	str	r3, [r6, #0]
 8006972:	6823      	ldr	r3, [r4, #0]
 8006974:	0699      	lsls	r1, r3, #26
 8006976:	bf42      	ittt	mi
 8006978:	6833      	ldrmi	r3, [r6, #0]
 800697a:	3302      	addmi	r3, #2
 800697c:	6033      	strmi	r3, [r6, #0]
 800697e:	6825      	ldr	r5, [r4, #0]
 8006980:	f015 0506 	ands.w	r5, r5, #6
 8006984:	d106      	bne.n	8006994 <_printf_common+0x48>
 8006986:	f104 0a19 	add.w	sl, r4, #25
 800698a:	68e3      	ldr	r3, [r4, #12]
 800698c:	6832      	ldr	r2, [r6, #0]
 800698e:	1a9b      	subs	r3, r3, r2
 8006990:	42ab      	cmp	r3, r5
 8006992:	dc26      	bgt.n	80069e2 <_printf_common+0x96>
 8006994:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006998:	1e13      	subs	r3, r2, #0
 800699a:	6822      	ldr	r2, [r4, #0]
 800699c:	bf18      	it	ne
 800699e:	2301      	movne	r3, #1
 80069a0:	0692      	lsls	r2, r2, #26
 80069a2:	d42b      	bmi.n	80069fc <_printf_common+0xb0>
 80069a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069a8:	4649      	mov	r1, r9
 80069aa:	4638      	mov	r0, r7
 80069ac:	47c0      	blx	r8
 80069ae:	3001      	adds	r0, #1
 80069b0:	d01e      	beq.n	80069f0 <_printf_common+0xa4>
 80069b2:	6823      	ldr	r3, [r4, #0]
 80069b4:	6922      	ldr	r2, [r4, #16]
 80069b6:	f003 0306 	and.w	r3, r3, #6
 80069ba:	2b04      	cmp	r3, #4
 80069bc:	bf02      	ittt	eq
 80069be:	68e5      	ldreq	r5, [r4, #12]
 80069c0:	6833      	ldreq	r3, [r6, #0]
 80069c2:	1aed      	subeq	r5, r5, r3
 80069c4:	68a3      	ldr	r3, [r4, #8]
 80069c6:	bf0c      	ite	eq
 80069c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069cc:	2500      	movne	r5, #0
 80069ce:	4293      	cmp	r3, r2
 80069d0:	bfc4      	itt	gt
 80069d2:	1a9b      	subgt	r3, r3, r2
 80069d4:	18ed      	addgt	r5, r5, r3
 80069d6:	2600      	movs	r6, #0
 80069d8:	341a      	adds	r4, #26
 80069da:	42b5      	cmp	r5, r6
 80069dc:	d11a      	bne.n	8006a14 <_printf_common+0xc8>
 80069de:	2000      	movs	r0, #0
 80069e0:	e008      	b.n	80069f4 <_printf_common+0xa8>
 80069e2:	2301      	movs	r3, #1
 80069e4:	4652      	mov	r2, sl
 80069e6:	4649      	mov	r1, r9
 80069e8:	4638      	mov	r0, r7
 80069ea:	47c0      	blx	r8
 80069ec:	3001      	adds	r0, #1
 80069ee:	d103      	bne.n	80069f8 <_printf_common+0xac>
 80069f0:	f04f 30ff 	mov.w	r0, #4294967295
 80069f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069f8:	3501      	adds	r5, #1
 80069fa:	e7c6      	b.n	800698a <_printf_common+0x3e>
 80069fc:	18e1      	adds	r1, r4, r3
 80069fe:	1c5a      	adds	r2, r3, #1
 8006a00:	2030      	movs	r0, #48	; 0x30
 8006a02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a06:	4422      	add	r2, r4
 8006a08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a10:	3302      	adds	r3, #2
 8006a12:	e7c7      	b.n	80069a4 <_printf_common+0x58>
 8006a14:	2301      	movs	r3, #1
 8006a16:	4622      	mov	r2, r4
 8006a18:	4649      	mov	r1, r9
 8006a1a:	4638      	mov	r0, r7
 8006a1c:	47c0      	blx	r8
 8006a1e:	3001      	adds	r0, #1
 8006a20:	d0e6      	beq.n	80069f0 <_printf_common+0xa4>
 8006a22:	3601      	adds	r6, #1
 8006a24:	e7d9      	b.n	80069da <_printf_common+0x8e>
	...

08006a28 <_printf_i>:
 8006a28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a2c:	7e0f      	ldrb	r7, [r1, #24]
 8006a2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a30:	2f78      	cmp	r7, #120	; 0x78
 8006a32:	4691      	mov	r9, r2
 8006a34:	4680      	mov	r8, r0
 8006a36:	460c      	mov	r4, r1
 8006a38:	469a      	mov	sl, r3
 8006a3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a3e:	d807      	bhi.n	8006a50 <_printf_i+0x28>
 8006a40:	2f62      	cmp	r7, #98	; 0x62
 8006a42:	d80a      	bhi.n	8006a5a <_printf_i+0x32>
 8006a44:	2f00      	cmp	r7, #0
 8006a46:	f000 80d4 	beq.w	8006bf2 <_printf_i+0x1ca>
 8006a4a:	2f58      	cmp	r7, #88	; 0x58
 8006a4c:	f000 80c0 	beq.w	8006bd0 <_printf_i+0x1a8>
 8006a50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a58:	e03a      	b.n	8006ad0 <_printf_i+0xa8>
 8006a5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a5e:	2b15      	cmp	r3, #21
 8006a60:	d8f6      	bhi.n	8006a50 <_printf_i+0x28>
 8006a62:	a101      	add	r1, pc, #4	; (adr r1, 8006a68 <_printf_i+0x40>)
 8006a64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a68:	08006ac1 	.word	0x08006ac1
 8006a6c:	08006ad5 	.word	0x08006ad5
 8006a70:	08006a51 	.word	0x08006a51
 8006a74:	08006a51 	.word	0x08006a51
 8006a78:	08006a51 	.word	0x08006a51
 8006a7c:	08006a51 	.word	0x08006a51
 8006a80:	08006ad5 	.word	0x08006ad5
 8006a84:	08006a51 	.word	0x08006a51
 8006a88:	08006a51 	.word	0x08006a51
 8006a8c:	08006a51 	.word	0x08006a51
 8006a90:	08006a51 	.word	0x08006a51
 8006a94:	08006bd9 	.word	0x08006bd9
 8006a98:	08006b01 	.word	0x08006b01
 8006a9c:	08006b93 	.word	0x08006b93
 8006aa0:	08006a51 	.word	0x08006a51
 8006aa4:	08006a51 	.word	0x08006a51
 8006aa8:	08006bfb 	.word	0x08006bfb
 8006aac:	08006a51 	.word	0x08006a51
 8006ab0:	08006b01 	.word	0x08006b01
 8006ab4:	08006a51 	.word	0x08006a51
 8006ab8:	08006a51 	.word	0x08006a51
 8006abc:	08006b9b 	.word	0x08006b9b
 8006ac0:	682b      	ldr	r3, [r5, #0]
 8006ac2:	1d1a      	adds	r2, r3, #4
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	602a      	str	r2, [r5, #0]
 8006ac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006acc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e09f      	b.n	8006c14 <_printf_i+0x1ec>
 8006ad4:	6820      	ldr	r0, [r4, #0]
 8006ad6:	682b      	ldr	r3, [r5, #0]
 8006ad8:	0607      	lsls	r7, r0, #24
 8006ada:	f103 0104 	add.w	r1, r3, #4
 8006ade:	6029      	str	r1, [r5, #0]
 8006ae0:	d501      	bpl.n	8006ae6 <_printf_i+0xbe>
 8006ae2:	681e      	ldr	r6, [r3, #0]
 8006ae4:	e003      	b.n	8006aee <_printf_i+0xc6>
 8006ae6:	0646      	lsls	r6, r0, #25
 8006ae8:	d5fb      	bpl.n	8006ae2 <_printf_i+0xba>
 8006aea:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006aee:	2e00      	cmp	r6, #0
 8006af0:	da03      	bge.n	8006afa <_printf_i+0xd2>
 8006af2:	232d      	movs	r3, #45	; 0x2d
 8006af4:	4276      	negs	r6, r6
 8006af6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006afa:	485a      	ldr	r0, [pc, #360]	; (8006c64 <_printf_i+0x23c>)
 8006afc:	230a      	movs	r3, #10
 8006afe:	e012      	b.n	8006b26 <_printf_i+0xfe>
 8006b00:	682b      	ldr	r3, [r5, #0]
 8006b02:	6820      	ldr	r0, [r4, #0]
 8006b04:	1d19      	adds	r1, r3, #4
 8006b06:	6029      	str	r1, [r5, #0]
 8006b08:	0605      	lsls	r5, r0, #24
 8006b0a:	d501      	bpl.n	8006b10 <_printf_i+0xe8>
 8006b0c:	681e      	ldr	r6, [r3, #0]
 8006b0e:	e002      	b.n	8006b16 <_printf_i+0xee>
 8006b10:	0641      	lsls	r1, r0, #25
 8006b12:	d5fb      	bpl.n	8006b0c <_printf_i+0xe4>
 8006b14:	881e      	ldrh	r6, [r3, #0]
 8006b16:	4853      	ldr	r0, [pc, #332]	; (8006c64 <_printf_i+0x23c>)
 8006b18:	2f6f      	cmp	r7, #111	; 0x6f
 8006b1a:	bf0c      	ite	eq
 8006b1c:	2308      	moveq	r3, #8
 8006b1e:	230a      	movne	r3, #10
 8006b20:	2100      	movs	r1, #0
 8006b22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b26:	6865      	ldr	r5, [r4, #4]
 8006b28:	60a5      	str	r5, [r4, #8]
 8006b2a:	2d00      	cmp	r5, #0
 8006b2c:	bfa2      	ittt	ge
 8006b2e:	6821      	ldrge	r1, [r4, #0]
 8006b30:	f021 0104 	bicge.w	r1, r1, #4
 8006b34:	6021      	strge	r1, [r4, #0]
 8006b36:	b90e      	cbnz	r6, 8006b3c <_printf_i+0x114>
 8006b38:	2d00      	cmp	r5, #0
 8006b3a:	d04b      	beq.n	8006bd4 <_printf_i+0x1ac>
 8006b3c:	4615      	mov	r5, r2
 8006b3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b42:	fb03 6711 	mls	r7, r3, r1, r6
 8006b46:	5dc7      	ldrb	r7, [r0, r7]
 8006b48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b4c:	4637      	mov	r7, r6
 8006b4e:	42bb      	cmp	r3, r7
 8006b50:	460e      	mov	r6, r1
 8006b52:	d9f4      	bls.n	8006b3e <_printf_i+0x116>
 8006b54:	2b08      	cmp	r3, #8
 8006b56:	d10b      	bne.n	8006b70 <_printf_i+0x148>
 8006b58:	6823      	ldr	r3, [r4, #0]
 8006b5a:	07de      	lsls	r6, r3, #31
 8006b5c:	d508      	bpl.n	8006b70 <_printf_i+0x148>
 8006b5e:	6923      	ldr	r3, [r4, #16]
 8006b60:	6861      	ldr	r1, [r4, #4]
 8006b62:	4299      	cmp	r1, r3
 8006b64:	bfde      	ittt	le
 8006b66:	2330      	movle	r3, #48	; 0x30
 8006b68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b70:	1b52      	subs	r2, r2, r5
 8006b72:	6122      	str	r2, [r4, #16]
 8006b74:	f8cd a000 	str.w	sl, [sp]
 8006b78:	464b      	mov	r3, r9
 8006b7a:	aa03      	add	r2, sp, #12
 8006b7c:	4621      	mov	r1, r4
 8006b7e:	4640      	mov	r0, r8
 8006b80:	f7ff fee4 	bl	800694c <_printf_common>
 8006b84:	3001      	adds	r0, #1
 8006b86:	d14a      	bne.n	8006c1e <_printf_i+0x1f6>
 8006b88:	f04f 30ff 	mov.w	r0, #4294967295
 8006b8c:	b004      	add	sp, #16
 8006b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b92:	6823      	ldr	r3, [r4, #0]
 8006b94:	f043 0320 	orr.w	r3, r3, #32
 8006b98:	6023      	str	r3, [r4, #0]
 8006b9a:	4833      	ldr	r0, [pc, #204]	; (8006c68 <_printf_i+0x240>)
 8006b9c:	2778      	movs	r7, #120	; 0x78
 8006b9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ba2:	6823      	ldr	r3, [r4, #0]
 8006ba4:	6829      	ldr	r1, [r5, #0]
 8006ba6:	061f      	lsls	r7, r3, #24
 8006ba8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006bac:	d402      	bmi.n	8006bb4 <_printf_i+0x18c>
 8006bae:	065f      	lsls	r7, r3, #25
 8006bb0:	bf48      	it	mi
 8006bb2:	b2b6      	uxthmi	r6, r6
 8006bb4:	07df      	lsls	r7, r3, #31
 8006bb6:	bf48      	it	mi
 8006bb8:	f043 0320 	orrmi.w	r3, r3, #32
 8006bbc:	6029      	str	r1, [r5, #0]
 8006bbe:	bf48      	it	mi
 8006bc0:	6023      	strmi	r3, [r4, #0]
 8006bc2:	b91e      	cbnz	r6, 8006bcc <_printf_i+0x1a4>
 8006bc4:	6823      	ldr	r3, [r4, #0]
 8006bc6:	f023 0320 	bic.w	r3, r3, #32
 8006bca:	6023      	str	r3, [r4, #0]
 8006bcc:	2310      	movs	r3, #16
 8006bce:	e7a7      	b.n	8006b20 <_printf_i+0xf8>
 8006bd0:	4824      	ldr	r0, [pc, #144]	; (8006c64 <_printf_i+0x23c>)
 8006bd2:	e7e4      	b.n	8006b9e <_printf_i+0x176>
 8006bd4:	4615      	mov	r5, r2
 8006bd6:	e7bd      	b.n	8006b54 <_printf_i+0x12c>
 8006bd8:	682b      	ldr	r3, [r5, #0]
 8006bda:	6826      	ldr	r6, [r4, #0]
 8006bdc:	6961      	ldr	r1, [r4, #20]
 8006bde:	1d18      	adds	r0, r3, #4
 8006be0:	6028      	str	r0, [r5, #0]
 8006be2:	0635      	lsls	r5, r6, #24
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	d501      	bpl.n	8006bec <_printf_i+0x1c4>
 8006be8:	6019      	str	r1, [r3, #0]
 8006bea:	e002      	b.n	8006bf2 <_printf_i+0x1ca>
 8006bec:	0670      	lsls	r0, r6, #25
 8006bee:	d5fb      	bpl.n	8006be8 <_printf_i+0x1c0>
 8006bf0:	8019      	strh	r1, [r3, #0]
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	6123      	str	r3, [r4, #16]
 8006bf6:	4615      	mov	r5, r2
 8006bf8:	e7bc      	b.n	8006b74 <_printf_i+0x14c>
 8006bfa:	682b      	ldr	r3, [r5, #0]
 8006bfc:	1d1a      	adds	r2, r3, #4
 8006bfe:	602a      	str	r2, [r5, #0]
 8006c00:	681d      	ldr	r5, [r3, #0]
 8006c02:	6862      	ldr	r2, [r4, #4]
 8006c04:	2100      	movs	r1, #0
 8006c06:	4628      	mov	r0, r5
 8006c08:	f7f9 fb02 	bl	8000210 <memchr>
 8006c0c:	b108      	cbz	r0, 8006c12 <_printf_i+0x1ea>
 8006c0e:	1b40      	subs	r0, r0, r5
 8006c10:	6060      	str	r0, [r4, #4]
 8006c12:	6863      	ldr	r3, [r4, #4]
 8006c14:	6123      	str	r3, [r4, #16]
 8006c16:	2300      	movs	r3, #0
 8006c18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c1c:	e7aa      	b.n	8006b74 <_printf_i+0x14c>
 8006c1e:	6923      	ldr	r3, [r4, #16]
 8006c20:	462a      	mov	r2, r5
 8006c22:	4649      	mov	r1, r9
 8006c24:	4640      	mov	r0, r8
 8006c26:	47d0      	blx	sl
 8006c28:	3001      	adds	r0, #1
 8006c2a:	d0ad      	beq.n	8006b88 <_printf_i+0x160>
 8006c2c:	6823      	ldr	r3, [r4, #0]
 8006c2e:	079b      	lsls	r3, r3, #30
 8006c30:	d413      	bmi.n	8006c5a <_printf_i+0x232>
 8006c32:	68e0      	ldr	r0, [r4, #12]
 8006c34:	9b03      	ldr	r3, [sp, #12]
 8006c36:	4298      	cmp	r0, r3
 8006c38:	bfb8      	it	lt
 8006c3a:	4618      	movlt	r0, r3
 8006c3c:	e7a6      	b.n	8006b8c <_printf_i+0x164>
 8006c3e:	2301      	movs	r3, #1
 8006c40:	4632      	mov	r2, r6
 8006c42:	4649      	mov	r1, r9
 8006c44:	4640      	mov	r0, r8
 8006c46:	47d0      	blx	sl
 8006c48:	3001      	adds	r0, #1
 8006c4a:	d09d      	beq.n	8006b88 <_printf_i+0x160>
 8006c4c:	3501      	adds	r5, #1
 8006c4e:	68e3      	ldr	r3, [r4, #12]
 8006c50:	9903      	ldr	r1, [sp, #12]
 8006c52:	1a5b      	subs	r3, r3, r1
 8006c54:	42ab      	cmp	r3, r5
 8006c56:	dcf2      	bgt.n	8006c3e <_printf_i+0x216>
 8006c58:	e7eb      	b.n	8006c32 <_printf_i+0x20a>
 8006c5a:	2500      	movs	r5, #0
 8006c5c:	f104 0619 	add.w	r6, r4, #25
 8006c60:	e7f5      	b.n	8006c4e <_printf_i+0x226>
 8006c62:	bf00      	nop
 8006c64:	08007066 	.word	0x08007066
 8006c68:	08007077 	.word	0x08007077

08006c6c <memmove>:
 8006c6c:	4288      	cmp	r0, r1
 8006c6e:	b510      	push	{r4, lr}
 8006c70:	eb01 0402 	add.w	r4, r1, r2
 8006c74:	d902      	bls.n	8006c7c <memmove+0x10>
 8006c76:	4284      	cmp	r4, r0
 8006c78:	4623      	mov	r3, r4
 8006c7a:	d807      	bhi.n	8006c8c <memmove+0x20>
 8006c7c:	1e43      	subs	r3, r0, #1
 8006c7e:	42a1      	cmp	r1, r4
 8006c80:	d008      	beq.n	8006c94 <memmove+0x28>
 8006c82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c8a:	e7f8      	b.n	8006c7e <memmove+0x12>
 8006c8c:	4402      	add	r2, r0
 8006c8e:	4601      	mov	r1, r0
 8006c90:	428a      	cmp	r2, r1
 8006c92:	d100      	bne.n	8006c96 <memmove+0x2a>
 8006c94:	bd10      	pop	{r4, pc}
 8006c96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c9e:	e7f7      	b.n	8006c90 <memmove+0x24>

08006ca0 <_sbrk_r>:
 8006ca0:	b538      	push	{r3, r4, r5, lr}
 8006ca2:	4d06      	ldr	r5, [pc, #24]	; (8006cbc <_sbrk_r+0x1c>)
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	4604      	mov	r4, r0
 8006ca8:	4608      	mov	r0, r1
 8006caa:	602b      	str	r3, [r5, #0]
 8006cac:	f7fb fc00 	bl	80024b0 <_sbrk>
 8006cb0:	1c43      	adds	r3, r0, #1
 8006cb2:	d102      	bne.n	8006cba <_sbrk_r+0x1a>
 8006cb4:	682b      	ldr	r3, [r5, #0]
 8006cb6:	b103      	cbz	r3, 8006cba <_sbrk_r+0x1a>
 8006cb8:	6023      	str	r3, [r4, #0]
 8006cba:	bd38      	pop	{r3, r4, r5, pc}
 8006cbc:	200006e0 	.word	0x200006e0

08006cc0 <memcpy>:
 8006cc0:	440a      	add	r2, r1
 8006cc2:	4291      	cmp	r1, r2
 8006cc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006cc8:	d100      	bne.n	8006ccc <memcpy+0xc>
 8006cca:	4770      	bx	lr
 8006ccc:	b510      	push	{r4, lr}
 8006cce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cd6:	4291      	cmp	r1, r2
 8006cd8:	d1f9      	bne.n	8006cce <memcpy+0xe>
 8006cda:	bd10      	pop	{r4, pc}

08006cdc <_realloc_r>:
 8006cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ce0:	4680      	mov	r8, r0
 8006ce2:	4614      	mov	r4, r2
 8006ce4:	460e      	mov	r6, r1
 8006ce6:	b921      	cbnz	r1, 8006cf2 <_realloc_r+0x16>
 8006ce8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cec:	4611      	mov	r1, r2
 8006cee:	f7ff bc49 	b.w	8006584 <_malloc_r>
 8006cf2:	b92a      	cbnz	r2, 8006d00 <_realloc_r+0x24>
 8006cf4:	f7ff fbda 	bl	80064ac <_free_r>
 8006cf8:	4625      	mov	r5, r4
 8006cfa:	4628      	mov	r0, r5
 8006cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d00:	f000 f81b 	bl	8006d3a <_malloc_usable_size_r>
 8006d04:	4284      	cmp	r4, r0
 8006d06:	4607      	mov	r7, r0
 8006d08:	d802      	bhi.n	8006d10 <_realloc_r+0x34>
 8006d0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006d0e:	d812      	bhi.n	8006d36 <_realloc_r+0x5a>
 8006d10:	4621      	mov	r1, r4
 8006d12:	4640      	mov	r0, r8
 8006d14:	f7ff fc36 	bl	8006584 <_malloc_r>
 8006d18:	4605      	mov	r5, r0
 8006d1a:	2800      	cmp	r0, #0
 8006d1c:	d0ed      	beq.n	8006cfa <_realloc_r+0x1e>
 8006d1e:	42bc      	cmp	r4, r7
 8006d20:	4622      	mov	r2, r4
 8006d22:	4631      	mov	r1, r6
 8006d24:	bf28      	it	cs
 8006d26:	463a      	movcs	r2, r7
 8006d28:	f7ff ffca 	bl	8006cc0 <memcpy>
 8006d2c:	4631      	mov	r1, r6
 8006d2e:	4640      	mov	r0, r8
 8006d30:	f7ff fbbc 	bl	80064ac <_free_r>
 8006d34:	e7e1      	b.n	8006cfa <_realloc_r+0x1e>
 8006d36:	4635      	mov	r5, r6
 8006d38:	e7df      	b.n	8006cfa <_realloc_r+0x1e>

08006d3a <_malloc_usable_size_r>:
 8006d3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d3e:	1f18      	subs	r0, r3, #4
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	bfbc      	itt	lt
 8006d44:	580b      	ldrlt	r3, [r1, r0]
 8006d46:	18c0      	addlt	r0, r0, r3
 8006d48:	4770      	bx	lr
	...

08006d4c <_init>:
 8006d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d4e:	bf00      	nop
 8006d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d52:	bc08      	pop	{r3}
 8006d54:	469e      	mov	lr, r3
 8006d56:	4770      	bx	lr

08006d58 <_fini>:
 8006d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d5a:	bf00      	nop
 8006d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d5e:	bc08      	pop	{r3}
 8006d60:	469e      	mov	lr, r3
 8006d62:	4770      	bx	lr
